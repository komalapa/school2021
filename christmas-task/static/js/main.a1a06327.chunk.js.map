{"version":3,"sources":["types/types.ts","types/toys/toy.ts","assets/svg/ball1.svg","data.ts","components/shared/hooks/useToggle.ts","components/FilterCheckInput/FilterCheckInput.tsx","components/ColorFilter/ColorFilter.tsx","components/SpanInput/SpanInput.tsx","components/CountFilter/CountFilter.tsx","assets/svg/bell.svg","assets/svg/toy.svg","assets/svg/pine.svg","assets/svg/snowflake.svg","assets/svg/ball-2.svg","components/ShapeFilter/ShapeFilter.tsx","assets/svg/heart.svg","components/SizeFilter/SizeFilter.tsx","components/YearFilter/YearFilter.tsx","assets/svg/heart-full.svg","components/RadioInput/RadioInput.tsx","components/SelectSort/SelectSort.tsx","components/Search/Search.tsx","components/FiltersContainer/FiltersContainer.tsx","components/Message/Message.tsx","components/FavoriteButton/FavoriteButton.tsx","components/ToyCard/ToyCard.tsx","components/ToysContainer/ToysContainer.tsx","components/ToysApp/ToysApp.tsx","components/Lights/Lights.tsx","assets/svg/snow.svg","components/MainTree/MainTree.tsx","assets/svg/audio.svg","components/MainTreeContainer/MainTreeContainer.tsx","components/BackgroundSelector/BackgroundSelector.tsx","components/TreeSelector/TreeSelector.tsx","components/TreePanel/TreePannel.tsx","components/SmallToyCard/SmallToyCard.tsx","components/SmallToysContainer/SmallToysContainer.tsx","components/ToysPanel/ToysPanel.tsx","components/TreeApp/TreeApp.tsx","assets/svg/rss.svg","components/Footer/Footer.tsx","assets/svg/tree.svg","components/Home/Home.tsx","components/Nav/Nav.tsx","App.tsx","index.tsx","log.ts"],"names":["Shapes","Colors","Size","Direction","keyInEnum","e","value","keys","Object","filter","x","length","_path","Toy","data","id","name","count","year","shape","color","size","isFavorite","this","num","favorite","useToggle","initialState","useState","state","setState","FilterCheckInput","props","className","onToggleFilter","checked","filterName","filterValue","children","isChecked","toggleChecked","type","onChange","ColorFilter","toggleFilter","header","handleFilter","Red","indexOf","White","Yellow","Blue","Green","SpanInput","min","max","step","maxVal","minVal","minValue","setMinValue","maxValue","setMaxValue","isSended","setIsSended","reGradient","setReGradient","gradientValue","setGradientValue","gradient","inputStep","start","end","useEffect","style","backgroundImage","curValue","currentTarget","CountFilter","minFilter","maxFilter","_excluded","_extends","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgBall1","_ref","svgRef","title","titleId","width","height","viewBox","xmlns","ref","d","ForwardRef","SvgBell","undefined","_g","SvgToy","xmlnsXlink","stroke","fillRule","fill","SvgPine","clipRule","SvgSnowflake","ShapeFilter","Ball","Bell","Figure","Pinecone","Snowflake","SvgBall2","_g2","_g3","_g4","_g5","_g6","_g7","_g8","_g9","_g10","_g11","_g12","_g13","_g14","_g15","_g16","SizeFilter","L","M","S","YearFilter","SvgHeart","y","enableBackground","xmlSpace","SvgHeartFull","RadioInput","direction","onChoose","radioName","selected","onClick","defaultChecked","htmlFor","SelectSort","setupSort","handleSort","Up","Down","Search","searchLine","setupSearch","line","setLine","autoFocus","autoComplete","onInput","placeholder","FiltersContainter","toggleSpanFilter","filters","spanFilters","toggleOnlyFavorite","favoritesCount","reset","isOnlyFavorite","setIsOnlyFavorite","localStorage","clear","Message","message","FavoriteButton","toggleFavorite","showMsg","setShowMsg","setTimeout","ToyCard","toy","isLoaded","setIsLoaded","path","image","Image","src","onload","alt","ToysContainter","toys","cards","map","item","yearsSet","push","years","sort","a","b","countsSet","Set","add","counts","Array","from","curYear","Date","getFullYear","defaultFilters","defaultSpanFilters","initialFavorites","lsFavorites","favoritesString","getItem","JSON","parse","fav","find","forEach","ToysApp","sendFavorites","curToysList","setCurToysList","stringify","setFilters","setSpanFilters","favorites","setFavorites","setSort","searchStr","setSearchStr","isOnlyFavorites","setIsOnlyFavorites","isFiltred","setIsFiltered","filterToys","array","spanFilterToy","filterToy","toLowerCase","t1","t2","localeCompare","setItem","index","curFilters","splice","searchString","slice","Lights","colors","getLamp","angle","transform","getLine","lamp","lineTop","lineTopCenter","lineCenter","lineDown","MainTree","treeUrl","lights","onTakeToy","handleDragStart","dataTransfer","setData","getAttribute","handleOverDrop","preventDefault","stopPropagation","toyId","getData","toyImg","document","getElementById","createElement","position","top","nativeEvent","layerY","left","layerX","setAttribute","parentNode","removeChild","querySelector","appendChild","ondragstart","onDrop","onDragOver","href","coords","useMap","SvgSnow","MainTreeContainer","backgroundUrl","isSnow","snow","Math","random","animationDelay","BackgroundSelector","setupBackground","handleBackground","TreeSelector","setupTree","handleTree","TreePanel","setBackground","setTree","backgroundNumber","treeNumber","setLights","_","SmallToyCard","onDragStart","SmallToysContainer","onTake","SvgAudio","ToysPanel","toggleSnow","isMusic","toggleMusic","getColorsFromLS","colorsLS","TreeApp","setToys","setIsSnow","setIsMusic","setBackgoundNumber","setTreeNumber","handleTakeById","success","curToys","toFixed","number","audio","play","curLights","getTreeUrl","muted","autoPlay","SvgRss","Footer","rel","Home","to","SvgTree","Nav","App","element","favs","ReactDOM","render","StrictMode","console","log"],"mappings":"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","file":"static/js/main.a1a06327.chunk.js","sourcesContent":["export enum Shapes {\n  Ball = \"шар\",\n  Figure = \"фигурка\",\n  Bell = \"колокольчик\",\n  Pinecone = \"шишка\",\n  Snowflake = \"снежинка\",\n  Other = \"\",\n}\n\nexport enum Colors {\n  Yellow = \"желтый\",\n  Green = \"зелёный\",\n  Red = \"красный\",\n  White = \"белый\",\n  Blue = \"синий\",\n  Other = \"другой\",\n}\n\nexport enum Size {\n  L = \"большой\",\n  M = \"средний\",\n  S = \"малый\",\n}\nexport interface IToy {\n  id: number;\n  name: string;\n  count: number;\n  year: number;\n  shape: Shapes;\n  color: Colors;\n  size: Size;\n  isFavorite: Boolean;\n}\n\nexport type ToyData = {\n  num: string;\n  name: string;\n  count: string;\n  year: string;\n  shape: string;\n  color: string;\n  size: string;\n  favorite: boolean;\n};\n\nexport interface Filters {\n  color: Colors[];\n  shape: Shapes[];\n  size: Size[];\n}\n\nexport enum Direction {\n  Up,\n  Down,\n}\nexport interface Sort {\n  type: string; //\"name\" or \"year\" for now\n  direction: Direction;\n}\nexport interface SpanObject {\n  min: number;\n  max: number;\n  minVal: number;\n  maxVal: number;\n}\n\nexport interface SpanFilters {\n  year: SpanObject;\n  count: SpanObject;\n}\n","import { Colors, IToy, Shapes, Size, ToyData } from \"../types\";\n\nfunction keyInEnum(e: any, value: string): string {\n  let keys = Object.keys(e).filter((x) => e[x] === value);\n  return keys.length > 0 ? keys[0] : \"\";\n}\n\nexport class Toy implements IToy {\n  id: number;\n  name: string;\n  count: number;\n  year: number;\n  shape: Shapes;\n  color: Colors;\n  size: Size;\n  isFavorite: boolean;\n\n  constructor(data: ToyData) {\n    this.id = +data.num;\n    this.name = data.name;\n    this.count = +data.count;\n    this.year = +data.year;\n    this.shape = Shapes[keyInEnum(Shapes, data.shape)];\n    this.color = Colors[keyInEnum(Colors, data.color)];\n    this.size = Size[keyInEnum(Size, data.size)];\n    this.isFavorite = data.favorite;\n  }\n}\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgBall1(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 28,\n    height: 42,\n    viewBox: \"0 0 28 42\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.138 15.4019V13.1455H17.5299C17.5355 13.0685 17.5383 12.9915 17.5383 12.9131C17.5383 11.1445 16.2349 9.6754 14.5386 9.41453V8.48213H15.0197C15.4028 8.8662 15.8438 9.22553 16.3296 9.5424C17.3614 10.2177 19.4778 10.7716 20.3957 9.33473C20.2706 9.09487 20.0368 8.72433 19.8268 8.48587C19.7321 8.78453 18.0404 10.0949 15.2003 7.077C15.2003 7.077 19.5487 6.125 20.5782 8.95113C20.679 8.53533 20.8437 8.07473 21.0052 7.623C21.2506 6.93887 21.5036 6.23187 21.5647 5.5944C21.6688 4.49213 21.1414 3.94847 20.6799 3.68573C20.349 3.49767 19.9617 3.40247 19.5268 3.40247C18.5636 3.40247 17.3372 3.8752 15.8807 4.80853C15.3394 5.15527 14.8704 5.49967 14.539 5.75493V0H13.4606V5.7554C13.1288 5.49967 12.6598 5.1562 12.1175 4.809C10.662 3.87567 9.43511 3.40247 8.4719 3.40247C8.03744 3.40247 7.64964 3.49767 7.3183 3.68573C6.8577 3.948 6.3299 4.4926 6.43397 5.5944C6.4951 6.23187 6.74804 6.93933 6.99397 7.62347C7.1559 8.0752 7.32064 8.5358 7.42144 8.9516C8.4495 6.125 12.7988 7.07747 12.7988 7.07747C9.95917 10.0954 8.26751 8.785 8.17277 8.4868C7.96324 8.72573 7.72804 9.09627 7.6039 9.3352C8.52137 10.7725 10.6372 10.2195 11.67 9.54333C12.1558 9.22507 12.5963 8.86713 12.9799 8.48307H13.461V9.41547C11.7647 9.67633 10.4604 11.1454 10.4604 12.9141C10.4604 12.9925 10.4641 13.0695 10.4688 13.1465H9.86164V15.4028C4.3629 17.1542 0.380371 22.3015 0.380371 28.3813C0.380838 35.903 6.47784 42 14 42C21.5218 42 27.6192 35.903 27.6192 28.3808C27.6192 22.3011 23.6358 17.1533 18.138 15.4019ZM5.28644 29.4966L3.8813 29.5834C3.87617 29.5078 3.77117 27.6976 4.30084 25.62C5.02417 22.7817 6.59077 20.8171 8.83124 19.9379L9.34551 21.2483C4.94531 22.9745 5.28224 29.4313 5.28644 29.4966ZM15.4056 13.1455H12.5949C12.5823 13.0699 12.5744 12.9925 12.5744 12.9131C12.5744 12.1263 13.2142 11.4865 14.0005 11.4865C14.7868 11.4865 15.4266 12.1268 15.4266 12.9131C15.4257 12.9925 15.4182 13.0699 15.4056 13.1455Z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBall1);\nexport default __webpack_public_path__ + \"static/media/ball1.24d9dddf.svg\";\nexport { ForwardRef as ReactComponent };","export const data = [\n  {\n    num: '1',\n    name: 'Большой шар с рисунком',\n    count: '2',\n    year: '1960',\n    shape: 'шар',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '2',\n    name: 'Зелёный шар с цветами',\n    count: '5',\n    year: '2000',\n    shape: 'шар',\n    color: 'зелёный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '3',\n    name: 'Красный матовый шар',\n    count: '3',\n    year: '1990',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '4',\n    name: 'Сосулька красная',\n    count: '2',\n    year: '1980',\n    shape: 'фигурка',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '5',\n    name: 'Красный виноград',\n    count: '4',\n    year: '1980',\n    shape: 'фигурка',\n    color: 'красный',\n    size: 'средний',\n    favorite: true,\n  },\n  {\n    num: '6',\n    name: 'Красный шар с рисунком',\n    count: '6',\n    year: '2010',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '7',\n    name: 'Молочно-белый шар',\n    count: '12',\n    year: '1960',\n    shape: 'шар',\n    color: 'белый',\n    size: 'средний',\n    favorite: true,\n  },\n  {\n    num: '8',\n    name: 'Красный шар',\n    count: '10',\n    year: '2010',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '9',\n    name: 'Колокольчик старинный',\n    count: '2',\n    year: '1950',\n    shape: 'колокольчик',\n    color: 'белый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '10',\n    name: 'Белый шар ретро',\n    count: '7',\n    year: '1960',\n    shape: 'шар',\n    color: 'белый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '11',\n    name: 'Шишка еловая белая',\n    count: '11',\n    year: '1960',\n    shape: 'шишка',\n    color: 'белый',\n    size: 'малый',\n    favorite: false,\n  },\n  {\n    num: '12',\n    name: 'Белый шар с цветами',\n    count: '5',\n    year: '1980',\n    shape: 'шар',\n    color: 'белый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '13',\n    name: 'Шар расписной Река',\n    count: '3',\n    year: '1970',\n    shape: 'шар',\n    color: 'синий',\n    size: 'большой',\n    favorite: true,\n  },\n  {\n    num: '14',\n    name: 'Шар расписной Деревня',\n    count: '4',\n    year: '1970',\n    shape: 'шар',\n    color: 'синий',\n    size: 'большой',\n    favorite: true,\n  },\n  {\n    num: '15',\n    name: 'Колокольчик расписной',\n    count: '3',\n    year: '1970',\n    shape: 'колокольчик',\n    color: 'синий',\n    size: 'средний',\n    favorite: false,\n  },\n  {\n    num: '16',\n    name: 'Шишка расписная Пейзаж',\n    count: '3',\n    year: '1970',\n    shape: 'шишка',\n    color: 'синий',\n    size: 'средний',\n    favorite: true,\n  },\n  {\n    num: '17',\n    name: 'Шишка расписная',\n    count: '7',\n    year: '1970',\n    shape: 'шишка',\n    color: 'красный',\n    size: 'средний',\n    favorite: false,\n  },\n  {\n    num: '18',\n    name: 'Желтый шар с бантом',\n    count: '2',\n    year: '2010',\n    shape: 'шар',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '19',\n    name: 'Желтый шар с паетками',\n    count: '12',\n    year: '1980',\n    shape: 'шар',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '20',\n    name: 'Красный шар с бантом',\n    count: '8',\n    year: '1950',\n    shape: 'шар',\n    color: 'красный',\n    size: 'средний',\n    favorite: true,\n  },\n  {\n    num: '21',\n    name: 'Красный шар с звёздами',\n    count: '4',\n    year: '1970',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: true,\n  },\n  {\n    num: '22',\n    name: 'Шишка еловая золотая',\n    count: '11',\n    year: '1990',\n    shape: 'шишка',\n    color: 'желтый',\n    size: 'малый',\n    favorite: false,\n  },\n  {\n    num: '23',\n    name: 'Колокольчик старинный',\n    count: '9',\n    year: '1950',\n    shape: 'колокольчик',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '24',\n    name: 'Снежинка изящная',\n    count: '1',\n    year: '1940',\n    shape: 'снежинка',\n    color: 'белый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '25',\n    name: 'Розовый шар с блёстками',\n    count: '12',\n    year: '2010',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '26',\n    name: 'Рубиново-золотой шар',\n    count: '8',\n    year: '1960',\n    shape: 'шар',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '27',\n    name: 'Красный шар с узором',\n    count: '4',\n    year: '2010',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '28',\n    name: 'Бордовый шар с узором',\n    count: '10',\n    year: '2010',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '29',\n    name: 'Старинный шар с цветами',\n    count: '5',\n    year: '1950',\n    shape: 'шар',\n    color: 'желтый',\n    size: 'большой',\n    favorite: true,\n  },\n  {\n    num: '30',\n    name: 'Старинный шар с узором',\n    count: '8',\n    year: '1950',\n    shape: 'шар',\n    color: 'желтый',\n    size: 'большой',\n    favorite: true,\n  },\n  {\n    num: '31',\n    name: 'Красный шар с блёстками',\n    count: '8',\n    year: '2010',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '32',\n    name: 'Синий шар Вселенная',\n    count: '11',\n    year: '1970',\n    shape: 'шар',\n    color: 'синий',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '33',\n    name: 'Синий шар со снежинкой',\n    count: '6',\n    year: '2010',\n    shape: 'шар',\n    color: 'синий',\n    size: 'средний',\n    favorite: false,\n  },\n  {\n    num: '34',\n    name: 'Зелёный  шар с узором',\n    count: '8',\n    year: '2010',\n    shape: 'шар',\n    color: 'зелёный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '35',\n    name: 'Фигурка Лис в шарфе',\n    count: '8',\n    year: '1950',\n    shape: 'фигурка',\n    color: 'желтый',\n    size: 'средний',\n    favorite: true,\n  },\n  {\n    num: '36',\n    name: 'Сиреневый шар Метель',\n    count: '1',\n    year: '2000',\n    shape: 'шар',\n    color: 'синий',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '37',\n    name: 'Зелёный  шар Метель',\n    count: '6',\n    year: '2000',\n    shape: 'шар',\n    color: 'зелёный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '38',\n    name: 'Голубой  шар Метель',\n    count: '6',\n    year: '2000',\n    shape: 'шар',\n    color: 'синий',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '39',\n    name: 'Красная снежинка',\n    count: '6',\n    year: '1990',\n    shape: 'снежинка',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '40',\n    name: 'Снежинка золотая',\n    count: '12',\n    year: '2020',\n    shape: 'снежинка',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '41',\n    name: 'Снежинка арктическая',\n    count: '11',\n    year: '2020',\n    shape: 'снежинка',\n    color: 'белый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '42',\n    name: 'Зелёный шар',\n    count: '10',\n    year: '1980',\n    shape: 'шар',\n    color: 'зелёный',\n    size: 'средний',\n    favorite: false,\n  },\n  {\n    num: '43',\n    name: 'Снежинка двухцветная',\n    count: '6',\n    year: '1960',\n    shape: 'снежинка',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '44',\n    name: 'Фигурка Ангела',\n    count: '11',\n    year: '1940',\n    shape: 'фигурка',\n    color: 'красный',\n    size: 'средний',\n    favorite: true,\n  },\n  {\n    num: '45',\n    name: 'Снежинка новогодняя',\n    count: '1',\n    year: '1980',\n    shape: 'снежинка',\n    color: 'белый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '46',\n    name: 'Фигурка Мухомор',\n    count: '10',\n    year: '1950',\n    shape: 'фигурка',\n    color: 'красный',\n    size: 'малый',\n    favorite: false,\n  },\n  {\n    num: '47',\n    name: 'Фигурка Колодец',\n    count: '6',\n    year: '1950',\n    shape: 'фигурка',\n    color: 'красный',\n    size: 'малый',\n    favorite: false,\n  },\n  {\n    num: '48',\n    name: 'Желтый шар с бантом',\n    count: '6',\n    year: '1960',\n    shape: 'шар',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '49',\n    name: 'Снежинка с бирюзой',\n    count: '4',\n    year: '1980',\n    shape: 'снежинка',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '50',\n    name: 'Колокольчик большой',\n    count: '3',\n    year: '2020',\n    shape: 'колокольчик',\n    color: 'красный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '51',\n    name: 'Шишка с изморозью',\n    count: '12',\n    year: '1970',\n    shape: 'шишка',\n    color: 'красный',\n    size: 'малый',\n    favorite: false,\n  },\n  {\n    num: '52',\n    name: 'Красный шар с надписью',\n    count: '12',\n    year: '1990',\n    shape: 'шар',\n    color: 'красный',\n    size: 'большой',\n    favorite: true,\n  },\n  {\n    num: '53',\n    name: 'Снежинка серебристая',\n    count: '6',\n    year: '2020',\n    shape: 'снежинка',\n    color: 'белый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '54',\n    name: 'Зелёный шар с рисунком',\n    count: '6',\n    year: '2010',\n    shape: 'шар',\n    color: 'зелёный',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '55',\n    name: 'Пряничный домик',\n    count: '1',\n    year: '1940',\n    shape: 'фигурка',\n    color: 'желтый',\n    size: 'большой',\n    favorite: false,\n  },\n  {\n    num: '56',\n    name: 'Пряничный теремок',\n    count: '1',\n    year: '1940',\n    shape: 'фигурка',\n    color: 'желтый',\n    size: 'малый',\n    favorite: false,\n  },\n  {\n    num: '57',\n    name: 'Пряничная избушка',\n    count: '1',\n    year: '1940',\n    shape: 'фигурка',\n    color: 'желтый',\n    size: 'средний',\n    favorite: false,\n  },\n  {\n    num: '58',\n    name: 'Фигурка белого медведя',\n    count: '2',\n    year: '1980',\n    shape: 'фигурка',\n    color: 'белый',\n    size: 'средний',\n    favorite: false,\n  },\n  {\n    num: '59',\n    name: 'Желтый шар с надписью',\n    count: '10',\n    year: '1990',\n    shape: 'шар',\n    color: 'желтый',\n    size: 'средний',\n    favorite: false,\n  },\n  {\n    num: '60',\n    name: 'Фигурка Голубь',\n    count: '12',\n    year: '1940',\n    shape: 'фигурка',\n    color: 'белый',\n    size: 'средний',\n    favorite: true,\n  },\n];\n\nexport default data;","import { useState } from \"react\";\n\nexport const useToggle = (initialState) => {\n  const [state, setState] = useState(initialState);\n\n  const toggle = () => setState((state) => !state);\n\n  return [state, toggle];\n};\n","import { FC } from \"react\";\nimport { Colors, Shapes, Size } from \"../../types/types\";\nimport { useToggle } from \"../shared/hooks/useToggle\";\n\ninterface FilterCheckInputProps {\n  className: string;\n  onToggleFilter: CallableFunction;\n  checked: boolean;\n  filterName: string;\n  filterValue: Colors | Shapes | Size;\n}\n\nexport const FilterCheckInput: FC<FilterCheckInputProps> = (props) => {\n  const {\n    className,\n    onToggleFilter,\n    checked,\n    filterName,\n    filterValue,\n    children,\n  } = props;\n\n  const [isChecked, toggleChecked] = useToggle(checked);\n\n  if (isChecked !== checked) toggleChecked();\n\n  function handleInput() {\n    toggleChecked(isChecked);\n    onToggleFilter(filterName, filterValue);\n  }\n  return (\n    <label key={filterName + filterValue} className={`${className}__lbl`}>\n      <input\n        className={`${className}__check`}\n        type=\"checkbox\"\n        onChange={handleInput}\n        checked={isChecked}\n      />\n      {children}\n    </label>\n  );\n};\n","import { FC } from \"react\";\nimport { Colors } from \"../../types/types\";\nimport { FilterCheckInput } from \"../FilterCheckInput/FilterCheckInput\";\nimport \"./ColorFilter.css\";\n\ntype ColorFilterContainerProps = {\n  toggleFilter: CallableFunction;\n  checked: Colors[];\n  header?: string;\n};\n\nexport const ColorFilter: FC<ColorFilterContainerProps> = (props) => {\n  const { toggleFilter, checked, header } = props;\n\n  const handleFilter = (filterName, filterValue) => {\n    toggleFilter(filterName, filterValue);\n  };\n\n  return (\n    <div className=\"color-filter\">\n      <h3 className=\"color-filter__header\">{header || \"Цвет\"}</h3>\n      <FilterCheckInput\n        className=\"color-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"color\"\n        filterValue={Colors.Red}\n        checked={checked.indexOf(Colors.Red) >= 0}\n      >\n        <span className=\"color-filter__icon color-filter__icon-red\" />\n      </FilterCheckInput>\n\n      <FilterCheckInput\n        className=\"color-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"color\"\n        filterValue={Colors.White}\n        checked={checked.indexOf(Colors.White) >= 0}\n      >\n        <span className=\"color-filter__icon color-filter__icon-white\" />\n      </FilterCheckInput>\n      <FilterCheckInput\n        className=\"color-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"color\"\n        filterValue={Colors.Yellow}\n        checked={checked.indexOf(Colors.Yellow) >= 0}\n      >\n        <span className=\"color-filter__icon color-filter__icon-yellow\" />\n      </FilterCheckInput>\n      <FilterCheckInput\n        className=\"color-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"color\"\n        filterValue={Colors.Blue}\n        checked={checked.indexOf(Colors.Blue) >= 0}\n      >\n        <span className=\"color-filter__icon color-filter__icon-blue\" />\n      </FilterCheckInput>\n      <FilterCheckInput\n        className=\"color-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"color\"\n        filterValue={Colors.Green}\n        checked={checked.indexOf(Colors.Green) >= 0}\n      >\n        <span className=\"color-filter__icon color-filter__icon-green\" />\n      </FilterCheckInput>\n    </div>\n  );\n};\n","import { useEffect } from \"react\";\nimport { FC, useState } from \"react\";\n\nimport \"./SpanInput.css\";\n\ntype SpanInputProps = {\n  toggleFilter: CallableFunction;\n  min: number;\n  max: number;\n  step: number;\n  maxVal?: number;\n  minVal?: number;\n};\n\nexport const SpanInput: FC<SpanInputProps> = (props) => {\n  const { toggleFilter, min, max, step, maxVal, minVal } = props;\n  const [minValue, setMinValue] = useState(minVal || min);\n  const [maxValue, setMaxValue] = useState(maxVal || max);\n  const [isSended, setIsSended] = useState(false); //for send span value only on next render\n  const [reGradient, setReGradient] = useState(true); // for re calculate Gradient after state changes\n  const [gradientValue, setGradientValue] = useState<string>(\n    \"to right, white, white 0%, goldenrod 0%, goldenrod 100%, white 100%, white 100%\"\n  );\n  function handleMinInput(e: React.FormEvent<HTMLInputElement>): void {\n    const curValue: number = +e.currentTarget.value;\n    if (curValue <= maxValue) setMinValue(curValue);\n    setIsSended(false);\n  }\n\n  function handleMaxInput(e: React.FormEvent<HTMLInputElement>): void {\n    const curValue: number = +e.currentTarget.value;\n    if (curValue >= minValue) setMaxValue(curValue);\n    setIsSended(false);\n  }\n\n  if (!isSended) {\n    toggleFilter(minValue, maxValue);\n    setIsSended(true);\n    gradient();\n  }\n  function gradient() {\n    let inputStep = (step * 100) / (max - min);\n    let start = ((minValue - min) / step) * inputStep;\n    let end = ((maxValue - min) / step) * inputStep;\n    setGradientValue(\n      `to right, white, white ${start}%, goldenrod ${start}%, goldenrod ${end}%, white ${end}%, white 100%`\n    );\n  }\n\n  useEffect(() => {\n    if (minVal !== minValue && min !== minValue) {\n      setMinValue(minVal || min);\n      setReGradient(true);\n    }\n    if (maxVal !== maxValue && max !== maxValue) {\n      setMaxValue(maxVal || max);\n      setReGradient(true);\n    }\n  }, [minVal, min, minValue, maxVal, max, maxValue, reGradient]);\n\n  if (reGradient) {\n    gradient();\n    setReGradient(false);\n  }\n\n  return (\n    <div className=\"span-input\">\n      <span\n        className=\"span-input__track\"\n        style={{ backgroundImage: `linear-gradient(${gradientValue})` }}\n      ></span>\n\n      <span className=\"span-input__text span-input__min-text\">{minValue}</span>\n      <input\n        className=\"span-input__min\"\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={minValue}\n        onChange={handleMinInput}\n      />\n      <input\n        className=\"span-input__max\"\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={maxValue}\n        onChange={handleMaxInput}\n      />\n      <span className=\"span-input__max-text span-input__text\">{maxValue}</span>\n    </div>\n  );\n};\n","import { FC, useState } from \"react\";\nimport { SpanInput } from \"../SpanInput/SpanInput\";\nimport \"./CountFilter.css\";\n\ntype CountFilterContainerProps = {\n  toggleFilter: CallableFunction;\n  min: number;\n  max: number;\n  minVal?: number;\n  maxVal?: number;\n  step?: number;\n};\n\nexport const CountFilter: FC<CountFilterContainerProps> = (props) => {\n  const { toggleFilter, min, max, minVal, maxVal } = props;\n  const [minValue, setMinValue] = useState(minVal);\n  const [maxValue, setMaxValue] = useState(maxVal);\n\n  if (minValue !== minVal) setMinValue(minVal);\n  if (maxValue !== maxVal) setMaxValue(maxVal);\n\n  function handleFilter(minFilter, maxFilter) {\n    setMaxValue(maxFilter);\n    setMinValue(minFilter);\n    toggleFilter(\"count\", minFilter, maxFilter);\n  }\n  return (\n    <div className=\"count-filter\">\n      <h3 className=\"count-filter__header\">Количество</h3>\n      <SpanInput\n        min={min}\n        max={max}\n        step={1}\n        toggleFilter={handleFilter}\n        minVal={minVal}\n        maxVal={maxVal}\n      />\n    </div>\n  );\n};\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgBell(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 64,\n    height: 64,\n    viewBox: \"0 0 64 64\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"bell\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.416 2.188c-0.086 0.928-0.089 2.097-0.008 2.598 0.147 0.904 0.141 0.912-0.872 1.083-1.832 0.31-2.254 0.863-2.338 3.063-0.072 1.899-0.078 1.913-0.823 2.079-7.044 1.563-8.001 2.57-8.38 8.815-0.564 9.276-1.567 14.428-3.841 19.716-0.217 0.505-0.945 1.645-1.617 2.534-2.553 3.373-2.797 3.825-3.2 5.923-0.115 0.601 0.62 4.193 1.012 4.941 1.376 2.627 6.934 5.896 12.977 7.633 1.57 0.451 3.063 1.029 3.317 1.283 1.752 1.752 7.531 1.854 8.921 0.158 0.447-0.545 1.043-0.801 2.936-1.258 5.069-1.224 9.685-3.508 12.59-6.229 2.826-2.648 2.754-7.651-0.167-11.493-0.769-1.012-1.813-2.7-2.319-3.75s-1.005-2.085-1.108-2.298c-0.87-1.797-2.125-8.864-2.505-14.112-0.577-7.963-0.562-7.882-1.714-8.906-1.265-1.124-3.222-2.092-5.026-2.484-2.812-0.612-2.596-0.408-2.875-2.716-0.298-2.465-0.762-3.019-2.528-3.019h-1.097v-2.141c0-3.398-1.048-4.515-1.334-1.421z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBell);\nexport default __webpack_public_path__ + \"static/media/bell.bd70508f.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgToy(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 400,\n    height: 556.4304461942257,\n    viewBox: \"0, 0, 400,556.4304461942257\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"svgg\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path0\",\n    d: \"M215.300 8.692 C 214.709 8.899,214.618 10.800,215.200 10.800 C 215.420 10.800,215.600 11.340,215.600 12.000 L 215.600 13.200 213.000 13.200 C 211.533 13.200,210.400 13.374,210.400 13.600 C 210.400 13.820,209.950 14.000,209.400 14.000 C 208.778 14.000,208.400 14.227,208.400 14.600 C 208.400 14.973,208.022 15.200,207.400 15.200 C 206.778 15.200,206.400 15.427,206.400 15.800 C 206.400 16.173,206.022 16.400,205.400 16.400 C 204.850 16.400,204.400 16.580,204.400 16.800 C 204.400 17.020,203.860 17.200,203.200 17.200 C 202.400 17.200,202.000 17.400,202.000 17.800 C 202.000 18.130,201.820 18.400,201.600 18.400 C 201.380 18.400,201.200 18.850,201.200 19.400 C 201.200 20.244,201.013 20.400,200.000 20.400 C 198.867 20.400,198.800 20.489,198.800 22.000 C 198.800 22.880,198.620 23.600,198.400 23.600 C 198.180 23.600,198.000 24.320,198.000 25.200 C 198.000 26.356,197.833 26.800,197.400 26.800 C 197.027 26.800,196.800 27.178,196.800 27.800 C 196.800 28.350,196.620 28.800,196.400 28.800 C 196.180 28.800,196.000 29.520,196.000 30.400 C 196.000 31.556,195.833 32.000,195.400 32.000 C 194.900 32.000,194.800 32.800,194.800 36.800 C 194.800 40.800,194.900 41.600,195.400 41.600 C 195.821 41.600,196.000 42.025,196.000 43.029 C 196.000 44.605,196.895 45.803,197.810 45.451 C 198.577 45.157,198.570 43.439,197.800 42.800 C 197.470 42.526,197.200 41.795,197.200 41.175 C 197.200 40.555,197.020 39.936,196.800 39.800 C 196.580 39.664,196.400 38.213,196.400 36.576 C 196.400 34.859,196.569 33.600,196.800 33.600 C 197.020 33.600,197.200 32.964,197.200 32.187 C 197.200 31.301,197.423 30.689,197.800 30.545 C 198.130 30.418,198.400 29.996,198.400 29.606 C 198.400 29.217,198.670 28.674,199.000 28.400 C 199.364 28.098,199.600 27.222,199.600 26.175 C 199.600 25.225,199.780 24.336,200.000 24.200 C 200.220 24.064,200.400 23.672,200.400 23.330 C 200.400 22.554,204.958 18.000,205.734 18.000 C 206.046 18.000,206.526 17.730,206.800 17.400 C 207.074 17.070,207.636 16.800,208.049 16.800 C 208.462 16.800,208.800 16.655,208.800 16.477 C 208.800 15.353,212.482 14.586,213.338 15.531 C 214.289 16.583,214.170 16.800,212.643 16.800 C 211.805 16.800,211.197 17.030,211.055 17.400 C 210.929 17.730,210.470 18.000,210.036 18.000 C 209.602 18.000,209.136 18.180,209.000 18.400 C 208.864 18.620,208.467 18.800,208.117 18.800 C 207.324 18.800,201.600 24.527,201.600 25.320 C 201.600 25.640,201.330 26.126,201.000 26.400 C 200.670 26.674,200.400 27.405,200.400 28.025 C 200.400 28.645,200.220 29.264,200.000 29.400 C 199.780 29.536,199.600 30.425,199.600 31.375 C 199.600 32.445,199.365 33.297,198.982 33.615 C 198.066 34.375,198.325 38.540,199.300 38.725 C 199.904 38.840,200.000 38.527,200.000 36.429 C 200.000 34.537,200.133 34.000,200.600 34.000 C 201.053 34.000,201.200 33.511,201.200 32.000 C 201.200 30.900,201.380 30.000,201.600 30.000 C 201.820 30.000,202.000 29.550,202.000 29.000 C 202.000 28.378,202.227 28.000,202.600 28.000 C 203.033 28.000,203.200 27.556,203.200 26.400 C 203.200 25.520,203.380 24.800,203.600 24.800 C 203.820 24.800,204.000 24.530,204.000 24.200 C 204.000 23.870,204.270 23.600,204.600 23.600 C 204.930 23.600,205.200 23.330,205.200 23.000 C 205.200 22.670,205.470 22.400,205.800 22.400 C 206.130 22.400,206.400 22.220,206.400 22.000 C 206.400 21.780,206.850 21.600,207.400 21.600 C 208.022 21.600,208.400 21.373,208.400 21.000 C 208.400 20.627,208.778 20.400,209.400 20.400 C 209.950 20.400,210.400 20.220,210.400 20.000 C 210.400 19.780,210.670 19.600,211.000 19.600 C 211.330 19.600,211.600 19.330,211.600 19.000 C 211.600 18.118,216.212 18.155,217.101 19.044 C 217.568 19.511,218.219 19.634,219.472 19.493 C 220.432 19.385,221.200 19.467,221.200 19.678 C 221.200 20.487,223.791 22.379,224.946 22.413 C 226.394 22.456,227.200 23.923,227.200 26.515 C 227.200 29.440,228.022 30.805,228.987 29.485 C 229.713 28.492,230.400 28.645,230.400 29.800 C 230.400 30.422,230.627 30.800,231.000 30.800 C 231.508 30.800,231.600 31.778,231.600 37.200 C 231.600 42.622,231.508 43.600,231.000 43.600 C 230.670 43.600,230.400 43.851,230.400 44.157 C 230.400 44.464,230.130 44.818,229.800 44.945 C 229.470 45.071,229.200 45.541,229.200 45.987 C 229.200 46.753,228.955 46.800,225.000 46.800 C 221.533 46.800,220.800 46.695,220.800 46.200 C 220.800 45.782,220.379 45.600,219.408 45.600 C 218.256 45.600,217.972 45.427,217.764 44.600 C 217.474 43.444,216.208 43.256,214.976 44.187 C 213.937 44.974,209.643 44.983,208.146 44.202 C 206.229 43.203,204.400 43.397,204.400 44.600 C 204.400 45.150,204.580 45.600,204.800 45.600 C 205.020 45.600,205.200 46.050,205.200 46.600 C 205.200 47.150,205.007 47.600,204.771 47.600 C 204.218 47.600,203.200 46.582,203.200 46.029 C 203.200 45.793,202.930 45.600,202.600 45.600 C 202.227 45.600,202.000 45.222,202.000 44.600 C 202.000 43.376,200.965 43.250,200.591 44.429 C 200.428 44.942,200.570 45.524,200.964 45.960 C 201.659 46.729,201.802 47.828,201.250 48.169 C 201.058 48.288,200.565 47.938,200.155 47.392 C 199.334 46.299,198.000 46.056,198.000 47.000 C 198.000 47.373,197.622 47.600,197.000 47.600 C 196.378 47.600,196.000 47.827,196.000 48.200 C 196.000 48.633,195.556 48.800,194.400 48.800 C 193.244 48.800,192.800 48.967,192.800 49.400 C 192.800 49.800,192.400 50.000,191.600 50.000 C 190.940 50.000,190.400 50.180,190.400 50.400 C 190.400 50.620,189.950 50.800,189.400 50.800 C 188.778 50.800,188.400 51.027,188.400 51.400 C 188.400 51.730,188.220 52.000,188.000 52.000 C 187.780 52.000,187.600 52.270,187.600 52.600 C 187.600 52.930,187.330 53.200,187.000 53.200 C 186.528 53.200,186.400 53.756,186.400 55.800 C 186.400 57.844,186.272 58.400,185.800 58.400 C 185.427 58.400,185.200 58.778,185.200 59.400 C 185.200 60.022,185.427 60.400,185.800 60.400 C 186.173 60.400,186.400 60.778,186.400 61.400 C 186.400 62.022,186.173 62.400,185.800 62.400 C 185.288 62.400,185.200 63.489,185.200 69.800 C 185.200 76.111,185.288 77.200,185.800 77.200 C 186.253 77.200,186.400 77.689,186.400 79.200 C 186.400 80.711,186.547 81.200,187.000 81.200 C 187.330 81.200,187.600 81.470,187.600 81.800 C 187.600 82.219,188.022 82.400,189.000 82.400 C 189.978 82.400,190.400 82.219,190.400 81.800 C 190.400 81.470,190.670 81.200,191.000 81.200 C 191.373 81.200,191.600 80.822,191.600 80.200 C 191.600 79.578,191.827 79.200,192.200 79.200 C 192.573 79.200,192.800 78.822,192.800 78.200 C 192.800 77.650,192.980 77.200,193.200 77.200 C 193.420 77.200,193.600 77.920,193.600 78.800 C 193.600 79.956,193.767 80.400,194.200 80.400 C 194.530 80.400,194.800 80.580,194.800 80.800 C 194.800 81.020,194.530 81.200,194.200 81.200 C 193.800 81.200,193.600 81.600,193.600 82.400 C 193.600 83.413,193.444 83.600,192.600 83.600 C 192.050 83.600,191.600 83.780,191.600 84.000 C 191.600 84.220,191.330 84.400,191.000 84.400 C 190.670 84.400,190.400 84.670,190.400 85.000 C 190.400 85.373,190.022 85.600,189.400 85.600 C 188.778 85.600,188.400 85.827,188.400 86.200 C 188.400 86.633,187.956 86.800,186.800 86.800 C 185.920 86.800,185.200 86.980,185.200 87.200 C 185.200 87.420,184.480 87.600,183.600 87.600 C 182.444 87.600,182.000 87.767,182.000 88.200 C 182.000 88.653,181.511 88.800,180.000 88.800 C 178.900 88.800,178.000 88.980,178.000 89.200 C 178.000 89.420,177.550 89.600,177.000 89.600 C 176.378 89.600,176.000 89.827,176.000 90.200 C 176.000 90.706,175.089 90.800,170.200 90.800 C 165.311 90.800,164.400 90.706,164.400 90.200 C 164.400 89.728,163.844 89.600,161.800 89.600 C 160.333 89.600,159.200 89.426,159.200 89.200 C 159.200 88.980,158.480 88.800,157.600 88.800 C 156.444 88.800,156.000 88.633,156.000 88.200 C 156.000 87.728,155.444 87.600,153.400 87.600 C 151.933 87.600,150.800 87.426,150.800 87.200 C 150.800 86.946,147.733 86.800,142.400 86.800 C 137.067 86.800,134.000 86.946,134.000 87.200 C 134.000 87.420,133.460 87.600,132.800 87.600 C 132.000 87.600,131.600 87.800,131.600 88.200 C 131.600 88.573,131.222 88.800,130.600 88.800 C 130.050 88.800,129.600 88.980,129.600 89.200 C 129.600 89.420,128.880 89.600,128.000 89.600 C 126.844 89.600,126.400 89.767,126.400 90.200 C 126.400 90.573,126.022 90.800,125.400 90.800 C 124.778 90.800,124.400 91.027,124.400 91.400 C 124.400 91.730,124.130 92.000,123.800 92.000 C 123.470 92.000,123.200 92.180,123.200 92.400 C 123.200 92.620,122.750 92.800,122.200 92.800 C 121.578 92.800,121.200 93.027,121.200 93.400 C 121.200 93.773,120.822 94.000,120.200 94.000 C 119.578 94.000,119.200 94.227,119.200 94.600 C 119.200 94.930,119.007 95.200,118.771 95.200 C 118.218 95.200,117.200 96.218,117.200 96.771 C 117.200 97.007,117.006 97.200,116.769 97.200 C 116.015 97.200,114.000 99.506,114.000 100.369 C 114.000 100.841,113.741 101.200,113.400 101.200 C 113.000 101.200,112.800 101.600,112.800 102.400 C 112.800 103.060,112.620 103.600,112.400 103.600 C 112.180 103.600,112.000 104.050,112.000 104.600 C 112.000 105.222,111.773 105.600,111.400 105.600 C 111.070 105.600,110.800 105.780,110.800 106.000 C 110.800 106.220,110.530 106.400,110.200 106.400 C 109.767 106.400,109.600 106.844,109.600 108.000 C 109.600 108.880,109.420 109.600,109.200 109.600 C 108.980 109.600,108.800 110.140,108.800 110.800 C 108.800 111.600,108.600 112.000,108.200 112.000 C 107.747 112.000,107.600 112.489,107.600 114.000 C 107.600 115.511,107.453 116.000,107.000 116.000 C 106.487 116.000,106.400 117.133,106.400 123.800 C 106.400 130.467,106.487 131.600,107.000 131.600 C 107.433 131.600,107.600 132.044,107.600 133.200 C 107.600 134.356,107.767 134.800,108.200 134.800 C 108.600 134.800,108.800 135.200,108.800 136.000 C 108.800 136.660,108.980 137.200,109.200 137.200 C 109.420 137.200,109.600 137.650,109.600 138.200 C 109.600 138.822,109.827 139.200,110.200 139.200 C 110.573 139.200,110.800 139.578,110.800 140.200 C 110.800 141.000,111.000 141.200,111.800 141.200 C 112.600 141.200,112.800 141.400,112.800 142.200 C 112.800 142.822,113.027 143.200,113.400 143.200 C 113.773 143.200,114.000 143.578,114.000 144.200 C 114.000 144.750,114.180 145.200,114.400 145.200 C 114.620 145.200,114.800 145.470,114.800 145.800 C 114.800 146.130,115.070 146.400,115.400 146.400 C 115.730 146.400,116.000 146.670,116.000 147.000 C 116.000 147.330,116.270 147.600,116.600 147.600 C 116.973 147.600,117.200 147.978,117.200 148.600 C 117.200 149.150,117.380 149.600,117.600 149.600 C 117.820 149.600,118.000 149.870,118.000 150.200 C 118.000 150.530,118.270 150.800,118.600 150.800 C 118.973 150.800,119.200 151.178,119.200 151.800 C 119.200 152.350,119.393 152.800,119.629 152.800 C 120.182 152.800,121.200 153.818,121.200 154.371 C 121.200 154.607,121.470 154.800,121.800 154.800 C 122.283 154.800,122.400 155.422,122.400 158.000 C 122.400 160.578,122.283 161.200,121.800 161.200 C 121.317 161.200,121.200 161.822,121.200 164.400 C 121.200 166.267,121.033 167.600,120.800 167.600 C 120.580 167.600,120.400 168.500,120.400 169.600 C 120.400 171.111,120.253 171.600,119.800 171.600 C 119.280 171.600,119.200 173.200,119.200 183.600 C 119.200 194.000,119.280 195.600,119.800 195.600 C 120.283 195.600,120.400 196.222,120.400 198.800 C 120.400 200.667,120.567 202.000,120.800 202.000 C 121.033 202.000,121.200 203.333,121.200 205.200 C 121.200 207.778,121.317 208.400,121.800 208.400 C 122.272 208.400,122.400 208.956,122.400 211.000 C 122.400 212.467,122.574 213.600,122.800 213.600 C 123.020 213.600,123.200 214.320,123.200 215.200 C 123.200 216.356,123.367 216.800,123.800 216.800 C 124.233 216.800,124.400 217.244,124.400 218.400 C 124.400 219.556,124.567 220.000,125.000 220.000 C 125.373 220.000,125.600 220.378,125.600 221.000 C 125.600 221.550,125.780 222.000,126.000 222.000 C 126.220 222.000,126.400 222.720,126.400 223.600 C 126.400 224.756,126.567 225.200,127.000 225.200 C 127.373 225.200,127.600 225.578,127.600 226.200 C 127.600 226.822,127.827 227.200,128.200 227.200 C 128.573 227.200,128.800 227.578,128.800 228.200 C 128.800 228.750,128.980 229.200,129.200 229.200 C 129.420 229.200,129.600 229.740,129.600 230.400 C 129.600 231.413,129.756 231.600,130.600 231.600 C 131.400 231.600,131.600 231.800,131.600 232.600 C 131.600 233.222,131.827 233.600,132.200 233.600 C 132.573 233.600,132.800 233.978,132.800 234.600 C 132.800 235.222,133.027 235.600,133.400 235.600 C 133.773 235.600,134.000 235.978,134.000 236.600 C 134.000 237.150,134.180 237.600,134.400 237.600 C 134.620 237.600,134.800 237.870,134.800 238.200 C 134.800 238.530,135.070 238.800,135.400 238.800 C 135.773 238.800,136.000 239.178,136.000 239.800 C 136.000 240.422,136.227 240.800,136.600 240.800 C 136.930 240.800,137.200 241.070,137.200 241.400 C 137.200 241.730,137.380 242.000,137.600 242.000 C 137.826 242.000,138.000 243.133,138.000 244.600 C 138.000 246.067,137.826 247.200,137.600 247.200 C 137.380 247.200,137.200 247.470,137.200 247.800 C 137.200 248.130,136.930 248.400,136.600 248.400 C 136.270 248.400,136.000 248.580,136.000 248.800 C 136.000 249.020,135.550 249.200,135.000 249.200 C 134.378 249.200,134.000 249.427,134.000 249.800 C 134.000 250.130,133.730 250.400,133.400 250.400 C 133.070 250.400,132.800 250.670,132.800 251.000 C 132.800 251.373,132.422 251.600,131.800 251.600 C 131.250 251.600,130.800 251.780,130.800 252.000 C 130.800 252.220,130.530 252.400,130.200 252.400 C 129.870 252.400,129.600 252.670,129.600 253.000 C 129.600 253.346,129.238 253.600,128.746 253.600 C 128.276 253.600,127.475 254.050,126.965 254.600 C 126.455 255.150,125.670 255.600,125.219 255.600 C 124.758 255.600,124.400 255.862,124.400 256.200 C 124.400 256.573,124.022 256.800,123.400 256.800 C 122.850 256.800,122.400 256.980,122.400 257.200 C 122.400 257.420,122.130 257.600,121.800 257.600 C 121.470 257.600,121.200 257.870,121.200 258.200 C 121.200 258.530,121.020 258.800,120.800 258.800 C 120.580 258.800,120.400 259.070,120.400 259.400 C 120.400 259.778,120.019 260.000,119.371 260.000 C 118.317 260.000,117.200 260.808,117.200 261.571 C 117.200 261.807,116.737 262.000,116.171 262.000 C 115.117 262.000,114.000 262.808,114.000 263.571 C 114.000 263.807,113.730 264.000,113.400 264.000 C 113.070 264.000,112.800 264.193,112.800 264.429 C 112.800 265.192,111.683 266.000,110.629 266.000 C 109.981 266.000,109.600 266.222,109.600 266.600 C 109.600 266.930,109.420 267.200,109.200 267.200 C 108.980 267.200,108.800 267.470,108.800 267.800 C 108.800 268.130,108.530 268.400,108.200 268.400 C 107.870 268.400,107.600 268.580,107.600 268.800 C 107.600 269.020,107.330 269.200,107.000 269.200 C 106.670 269.200,106.400 269.393,106.400 269.629 C 106.400 270.182,105.382 271.200,104.829 271.200 C 104.593 271.200,104.400 271.470,104.400 271.800 C 104.400 272.173,104.022 272.400,103.400 272.400 C 102.778 272.400,102.400 272.627,102.400 273.000 C 102.400 273.330,102.207 273.600,101.971 273.600 C 101.418 273.600,100.400 274.618,100.400 275.171 C 100.400 275.407,100.130 275.600,99.800 275.600 C 99.470 275.600,99.200 275.870,99.200 276.200 C 99.200 276.530,99.007 276.800,98.771 276.800 C 98.218 276.800,97.200 277.818,97.200 278.371 C 97.200 278.607,97.007 278.800,96.771 278.800 C 96.218 278.800,95.200 279.818,95.200 280.371 C 95.200 280.607,94.930 280.800,94.600 280.800 C 94.270 280.800,94.000 281.070,94.000 281.400 C 94.000 281.730,93.807 282.000,93.571 282.000 C 92.808 282.000,92.000 283.117,92.000 284.171 C 92.000 285.048,91.822 285.200,90.800 285.200 C 89.853 285.200,89.600 285.375,89.600 286.029 C 89.600 286.914,88.734 288.000,88.029 288.000 C 87.793 288.000,87.600 288.463,87.600 289.029 C 87.600 290.083,86.792 291.200,86.029 291.200 C 85.793 291.200,85.600 291.740,85.600 292.400 C 85.600 293.413,85.444 293.600,84.600 293.600 C 83.800 293.600,83.600 293.800,83.600 294.600 C 83.600 295.150,83.422 295.600,83.205 295.600 C 82.490 295.600,81.200 296.963,81.200 297.717 C 81.200 298.528,80.306 299.600,79.629 299.600 C 79.393 299.600,79.200 300.140,79.200 300.800 C 79.200 301.813,79.044 302.000,78.200 302.000 C 77.400 302.000,77.200 302.200,77.200 303.000 C 77.200 303.550,77.007 304.000,76.771 304.000 C 76.008 304.000,75.200 305.117,75.200 306.171 C 75.200 306.819,74.978 307.200,74.600 307.200 C 74.270 307.200,74.000 307.380,74.000 307.600 C 74.000 307.820,73.730 308.000,73.400 308.000 C 73.070 308.000,72.800 308.270,72.800 308.600 C 72.800 308.930,72.620 309.200,72.400 309.200 C 72.180 309.200,72.000 309.650,72.000 310.200 C 72.000 310.822,71.773 311.200,71.400 311.200 C 71.027 311.200,70.800 311.578,70.800 312.200 C 70.800 312.750,70.620 313.200,70.400 313.200 C 70.180 313.200,70.000 313.470,70.000 313.800 C 70.000 314.130,69.730 314.400,69.400 314.400 C 69.070 314.400,68.800 314.670,68.800 315.000 C 68.800 315.330,68.530 315.600,68.200 315.600 C 67.779 315.600,67.600 316.025,67.600 317.029 C 67.600 318.426,66.883 319.600,66.029 319.600 C 65.793 319.600,65.600 319.969,65.600 320.419 C 65.600 320.870,65.150 321.655,64.600 322.165 C 64.050 322.675,63.600 323.296,63.600 323.546 C 63.600 323.796,63.330 324.000,63.000 324.000 C 62.579 324.000,62.400 324.425,62.400 325.429 C 62.400 326.826,61.683 328.000,60.829 328.000 C 60.593 328.000,60.400 328.450,60.400 329.000 C 60.400 329.622,60.173 330.000,59.800 330.000 C 59.422 330.000,59.200 330.381,59.200 331.029 C 59.200 332.083,58.392 333.200,57.629 333.200 C 57.393 333.200,57.200 333.740,57.200 334.400 C 57.200 335.200,57.000 335.600,56.600 335.600 C 56.227 335.600,56.000 335.978,56.000 336.600 C 56.000 337.150,55.820 337.600,55.600 337.600 C 55.380 337.600,55.200 338.050,55.200 338.600 C 55.200 339.222,54.973 339.600,54.600 339.600 C 54.227 339.600,54.000 339.978,54.000 340.600 C 54.000 341.150,53.820 341.600,53.600 341.600 C 53.380 341.600,53.200 341.870,53.200 342.200 C 53.200 342.530,52.930 342.800,52.600 342.800 C 52.167 342.800,52.000 343.244,52.000 344.400 C 52.000 345.280,51.807 346.000,51.571 346.000 C 50.717 346.000,50.000 347.174,50.000 348.571 C 50.000 349.575,49.821 350.000,49.400 350.000 C 49.000 350.000,48.800 350.400,48.800 351.200 C 48.800 352.000,48.600 352.400,48.200 352.400 C 47.827 352.400,47.600 352.778,47.600 353.400 C 47.600 353.950,47.420 354.400,47.200 354.400 C 46.980 354.400,46.800 354.850,46.800 355.400 C 46.800 356.022,46.573 356.400,46.200 356.400 C 45.827 356.400,45.600 356.778,45.600 357.400 C 45.600 357.950,45.420 358.400,45.200 358.400 C 44.980 358.400,44.800 359.390,44.800 360.600 C 44.800 362.289,44.661 362.800,44.200 362.800 C 43.827 362.800,43.600 363.178,43.600 363.800 C 43.600 364.422,43.373 364.800,43.000 364.800 C 42.505 364.800,42.400 365.533,42.400 369.000 C 42.400 371.533,42.241 373.200,42.000 373.200 C 41.774 373.200,41.600 374.333,41.600 375.800 C 41.600 377.267,41.774 378.400,42.000 378.400 C 42.630 378.400,42.483 382.375,41.829 383.029 C 41.514 383.343,40.794 383.600,40.229 383.600 C 39.581 383.600,39.200 383.822,39.200 384.200 C 39.200 384.653,38.711 384.800,37.200 384.800 C 35.689 384.800,35.200 384.947,35.200 385.400 C 35.200 385.773,34.822 386.000,34.200 386.000 C 33.650 386.000,33.200 386.180,33.200 386.400 C 33.200 386.620,32.660 386.800,32.000 386.800 C 31.200 386.800,30.800 387.000,30.800 387.400 C 30.800 387.773,30.422 388.000,29.800 388.000 C 29.250 388.000,28.800 388.180,28.800 388.400 C 28.800 388.620,28.080 388.800,27.200 388.800 C 26.044 388.800,25.600 388.967,25.600 389.400 C 25.600 389.730,25.420 390.000,25.200 390.000 C 24.980 390.000,24.800 390.270,24.800 390.600 C 24.800 390.930,24.530 391.200,24.200 391.200 C 23.870 391.200,23.600 391.380,23.600 391.600 C 23.600 391.820,23.330 392.000,23.000 392.000 C 22.670 392.000,22.400 392.270,22.400 392.600 C 22.400 392.930,22.220 393.200,22.000 393.200 C 21.780 393.200,21.600 393.470,21.600 393.800 C 21.600 394.130,21.330 394.400,21.000 394.400 C 20.670 394.400,20.400 394.580,20.400 394.800 C 20.400 395.020,19.950 395.200,19.400 395.200 C 18.600 395.200,18.400 395.400,18.400 396.200 C 18.400 396.822,18.173 397.200,17.800 397.200 C 17.400 397.200,17.200 397.600,17.200 398.400 C 17.200 399.060,17.020 399.600,16.800 399.600 C 16.574 399.600,16.400 400.733,16.400 402.200 C 16.400 404.244,16.272 404.800,15.800 404.800 C 15.347 404.800,15.200 405.289,15.200 406.800 C 15.200 408.311,15.053 408.800,14.600 408.800 C 14.082 408.800,14.000 410.244,14.000 419.400 C 14.000 428.556,14.082 430.000,14.600 430.000 C 15.089 430.000,15.200 430.667,15.200 433.600 C 15.200 436.533,15.311 437.200,15.800 437.200 C 16.289 437.200,16.400 437.867,16.400 440.800 C 16.400 442.933,16.563 444.400,16.800 444.400 C 17.039 444.400,17.200 445.933,17.200 448.200 C 17.200 451.311,17.309 452.000,17.800 452.000 C 18.272 452.000,18.400 452.556,18.400 454.600 C 18.400 456.644,18.528 457.200,19.000 457.200 C 19.433 457.200,19.600 457.644,19.600 458.800 C 19.600 459.680,19.780 460.400,20.000 460.400 C 20.226 460.400,20.400 461.533,20.400 463.000 C 20.400 465.044,20.528 465.600,21.000 465.600 C 21.453 465.600,21.600 466.089,21.600 467.600 C 21.600 468.700,21.780 469.600,22.000 469.600 C 22.220 469.600,22.400 470.320,22.400 471.200 C 22.400 472.356,22.567 472.800,23.000 472.800 C 23.433 472.800,23.600 473.244,23.600 474.400 C 23.600 475.556,23.767 476.000,24.200 476.000 C 24.573 476.000,24.800 476.378,24.800 477.000 C 24.800 477.550,24.980 478.000,25.200 478.000 C 25.420 478.000,25.600 478.720,25.600 479.600 C 25.600 480.756,25.767 481.200,26.200 481.200 C 26.600 481.200,26.800 481.600,26.800 482.400 C 26.800 483.200,27.000 483.600,27.400 483.600 C 27.773 483.600,28.000 483.978,28.000 484.600 C 28.000 485.150,28.180 485.600,28.400 485.600 C 28.620 485.600,28.800 486.050,28.800 486.600 C 28.800 487.222,29.027 487.600,29.400 487.600 C 29.773 487.600,30.000 487.978,30.000 488.600 C 30.000 489.150,30.180 489.600,30.400 489.600 C 30.620 489.600,30.800 490.320,30.800 491.200 C 30.800 492.356,30.967 492.800,31.400 492.800 C 31.730 492.800,32.000 493.070,32.000 493.400 C 32.000 493.730,32.270 494.000,32.600 494.000 C 32.973 494.000,33.200 494.378,33.200 495.000 C 33.200 495.550,33.380 496.000,33.600 496.000 C 33.820 496.000,34.000 496.450,34.000 497.000 C 34.000 497.622,34.227 498.000,34.600 498.000 C 35.000 498.000,35.200 498.400,35.200 499.200 C 35.200 500.000,35.400 500.400,35.800 500.400 C 36.173 500.400,36.400 500.778,36.400 501.400 C 36.400 501.950,36.580 502.400,36.800 502.400 C 37.020 502.400,37.200 502.850,37.200 503.400 C 37.200 504.022,37.427 504.400,37.800 504.400 C 38.130 504.400,38.400 504.670,38.400 505.000 C 38.400 505.330,38.580 505.600,38.800 505.600 C 39.020 505.600,39.200 506.050,39.200 506.600 C 39.200 507.222,39.427 507.600,39.800 507.600 C 40.130 507.600,40.400 507.870,40.400 508.200 C 40.400 508.530,40.593 508.800,40.829 508.800 C 41.382 508.800,42.400 509.818,42.400 510.371 C 42.400 510.607,42.670 510.800,43.000 510.800 C 43.373 510.800,43.600 511.178,43.600 511.800 C 43.600 512.600,43.800 512.800,44.600 512.800 C 45.222 512.800,45.600 513.027,45.600 513.400 C 45.600 513.730,45.870 514.000,46.200 514.000 C 46.530 514.000,46.800 514.180,46.800 514.400 C 46.800 514.620,47.250 514.800,47.800 514.800 C 48.422 514.800,48.800 515.027,48.800 515.400 C 48.800 515.730,49.070 516.000,49.400 516.000 C 49.730 516.000,50.000 516.270,50.000 516.600 C 50.000 517.033,50.444 517.200,51.600 517.200 C 52.480 517.200,53.200 517.380,53.200 517.600 C 53.200 517.820,53.650 518.000,54.200 518.000 C 54.822 518.000,55.200 518.227,55.200 518.600 C 55.200 518.973,55.578 519.200,56.200 519.200 C 56.750 519.200,57.200 519.380,57.200 519.600 C 57.200 519.820,57.920 520.000,58.800 520.000 C 59.956 520.000,60.400 520.167,60.400 520.600 C 60.400 521.120,62.000 521.200,72.400 521.200 C 82.800 521.200,84.400 521.120,84.400 520.600 C 84.400 520.109,85.089 520.000,88.200 520.000 C 90.467 520.000,92.000 519.839,92.000 519.600 C 92.000 519.363,93.467 519.200,95.600 519.200 C 98.533 519.200,99.200 519.089,99.200 518.600 C 99.200 518.088,100.289 518.000,106.600 518.000 C 111.267 518.000,114.000 517.852,114.000 517.600 C 114.000 517.339,120.400 517.200,132.400 517.200 C 144.400 517.200,150.800 517.339,150.800 517.600 C 150.800 517.820,151.700 518.000,152.800 518.000 C 154.311 518.000,154.800 518.147,154.800 518.600 C 154.800 519.072,155.356 519.200,157.400 519.200 C 159.444 519.200,160.000 519.072,160.000 518.600 C 160.000 518.117,160.622 518.000,163.200 518.000 C 165.778 518.000,166.400 518.117,166.400 518.600 C 166.400 519.072,166.956 519.200,169.000 519.200 C 170.467 519.200,171.600 519.374,171.600 519.600 C 171.600 519.820,172.050 520.000,172.600 520.000 C 173.150 520.000,173.600 519.820,173.600 519.600 C 173.600 519.359,175.267 519.200,177.800 519.200 C 180.333 519.200,182.000 519.359,182.000 519.600 C 182.000 519.861,188.933 520.000,202.000 520.000 C 219.511 520.000,222.000 520.075,222.000 520.600 C 222.000 521.095,222.733 521.200,226.200 521.200 C 229.667 521.200,230.400 521.305,230.400 521.800 C 230.400 522.295,231.133 522.400,234.600 522.400 C 237.133 522.400,238.800 522.559,238.800 522.800 C 238.800 523.037,240.252 523.200,242.357 523.200 C 245.150 523.200,245.964 523.329,246.145 523.800 C 246.307 524.223,246.968 524.400,248.387 524.400 C 249.910 524.400,250.400 524.546,250.400 525.000 C 250.400 525.483,251.022 525.600,253.600 525.600 C 255.467 525.600,256.800 525.767,256.800 526.000 C 256.800 526.231,258.052 526.400,259.757 526.400 C 262.017 526.400,262.769 526.542,262.945 527.000 C 263.117 527.449,263.834 527.600,265.787 527.600 C 267.262 527.600,268.400 527.774,268.400 528.000 C 268.400 528.220,268.850 528.400,269.400 528.400 C 270.022 528.400,270.400 528.627,270.400 529.000 C 270.400 529.433,270.844 529.600,272.000 529.600 C 272.880 529.600,273.600 529.793,273.600 530.029 C 273.600 530.883,274.774 531.600,276.171 531.600 C 277.175 531.600,277.600 531.779,277.600 532.200 C 277.600 532.530,277.870 532.800,278.200 532.800 C 278.530 532.800,278.800 533.070,278.800 533.400 C 278.800 533.773,279.178 534.000,279.800 534.000 C 280.350 534.000,280.800 534.180,280.800 534.400 C 280.800 534.620,281.250 534.800,281.800 534.800 C 282.422 534.800,282.800 535.027,282.800 535.400 C 282.800 535.778,283.181 536.000,283.829 536.000 C 284.883 536.000,286.000 536.808,286.000 537.571 C 286.000 537.807,286.720 538.000,287.600 538.000 C 288.756 538.000,289.200 538.167,289.200 538.600 C 289.200 538.930,289.470 539.200,289.800 539.200 C 290.130 539.200,290.400 539.380,290.400 539.600 C 290.400 539.820,290.850 540.000,291.400 540.000 C 292.022 540.000,292.400 540.227,292.400 540.600 C 292.400 540.973,292.778 541.200,293.400 541.200 C 294.022 541.200,294.400 541.427,294.400 541.800 C 294.400 542.173,294.778 542.400,295.400 542.400 C 295.950 542.400,296.400 542.580,296.400 542.800 C 296.400 543.020,297.120 543.200,298.000 543.200 C 299.156 543.200,299.600 543.367,299.600 543.800 C 299.600 544.200,300.000 544.400,300.800 544.400 C 301.460 544.400,302.000 544.580,302.000 544.800 C 302.000 545.020,302.630 545.200,303.400 545.200 C 304.378 545.200,304.800 545.381,304.800 545.800 C 304.800 546.233,305.244 546.400,306.400 546.400 C 307.556 546.400,308.000 546.567,308.000 547.000 C 308.000 547.433,308.444 547.600,309.600 547.600 C 310.480 547.600,311.200 547.780,311.200 548.000 C 311.200 548.239,312.733 548.400,315.000 548.400 C 318.111 548.400,318.800 548.509,318.800 549.000 C 318.800 549.510,319.822 549.600,325.600 549.600 C 331.378 549.600,332.400 549.510,332.400 549.000 C 332.400 548.528,332.956 548.400,335.000 548.400 C 336.467 548.400,337.600 548.226,337.600 548.000 C 337.600 547.780,338.050 547.600,338.600 547.600 C 339.222 547.600,339.600 547.373,339.600 547.000 C 339.600 546.539,340.111 546.400,341.800 546.400 C 343.489 546.400,344.000 546.261,344.000 545.800 C 344.000 545.347,344.489 545.200,346.000 545.200 C 347.100 545.200,348.000 545.020,348.000 544.800 C 348.000 544.580,348.450 544.400,349.000 544.400 C 349.622 544.400,350.000 544.173,350.000 543.800 C 350.000 543.367,350.444 543.200,351.600 543.200 C 352.480 543.200,353.200 543.020,353.200 542.800 C 353.200 542.580,353.470 542.400,353.800 542.400 C 354.130 542.400,354.400 542.130,354.400 541.800 C 354.400 541.427,354.778 541.200,355.400 541.200 C 356.022 541.200,356.400 540.973,356.400 540.600 C 356.400 540.270,356.670 540.000,357.000 540.000 C 357.330 540.000,357.600 539.820,357.600 539.600 C 357.600 539.380,358.050 539.200,358.600 539.200 C 359.222 539.200,359.600 538.973,359.600 538.600 C 359.600 538.270,359.870 538.000,360.200 538.000 C 360.530 538.000,360.800 537.730,360.800 537.400 C 360.800 537.060,361.159 536.800,361.629 536.800 C 362.514 536.800,363.600 535.934,363.600 535.229 C 363.600 534.993,363.870 534.800,364.200 534.800 C 364.573 534.800,364.800 534.422,364.800 533.800 C 364.800 533.178,365.027 532.800,365.400 532.800 C 365.730 532.800,366.000 532.607,366.000 532.371 C 366.000 531.818,367.018 530.800,367.571 530.800 C 367.807 530.800,368.000 530.530,368.000 530.200 C 368.000 529.870,368.270 529.600,368.600 529.600 C 368.930 529.600,369.200 529.407,369.200 529.171 C 369.200 528.618,370.218 527.600,370.771 527.600 C 371.007 527.600,371.200 527.150,371.200 526.600 C 371.200 526.050,371.380 525.600,371.600 525.600 C 371.820 525.600,372.000 525.330,372.000 525.000 C 372.000 524.670,372.270 524.400,372.600 524.400 C 372.973 524.400,373.200 524.022,373.200 523.400 C 373.200 522.778,373.427 522.400,373.800 522.400 C 374.130 522.400,374.400 522.130,374.400 521.800 C 374.400 521.470,374.580 521.200,374.800 521.200 C 375.020 521.200,375.200 520.930,375.200 520.600 C 375.200 520.270,375.470 520.000,375.800 520.000 C 376.173 520.000,376.400 519.622,376.400 519.000 C 376.400 518.450,376.593 518.000,376.829 518.000 C 377.592 518.000,378.400 516.883,378.400 515.829 C 378.400 515.263,378.593 514.800,378.829 514.800 C 379.382 514.800,380.400 513.782,380.400 513.229 C 380.400 512.993,380.670 512.800,381.000 512.800 C 381.373 512.800,381.600 512.422,381.600 511.800 C 381.600 511.178,381.827 510.800,382.200 510.800 C 382.530 510.800,382.800 510.607,382.800 510.371 C 382.800 509.818,383.818 508.800,384.371 508.800 C 384.607 508.800,384.800 508.080,384.800 507.200 C 384.800 506.044,384.967 505.600,385.400 505.600 C 385.833 505.600,386.000 505.156,386.000 504.000 C 386.000 503.120,386.180 502.400,386.400 502.400 C 386.620 502.400,386.800 501.680,386.800 500.800 C 386.800 499.644,386.967 499.200,387.400 499.200 C 387.833 499.200,388.000 498.756,388.000 497.600 C 388.000 496.720,388.180 496.000,388.400 496.000 C 388.620 496.000,388.800 495.280,388.800 494.400 C 388.800 493.244,388.967 492.800,389.400 492.800 C 389.853 492.800,390.000 492.311,390.000 490.800 C 390.000 489.289,390.147 488.800,390.600 488.800 C 391.095 488.800,391.200 488.067,391.200 484.600 C 391.200 482.067,391.359 480.400,391.600 480.400 C 391.844 480.400,392.000 478.533,392.000 475.600 C 392.000 471.600,392.100 470.800,392.600 470.800 C 393.108 470.800,393.200 469.844,393.200 464.600 C 393.200 459.356,393.108 458.400,392.600 458.400 C 392.105 458.400,392.000 457.667,392.000 454.200 C 392.000 451.667,391.841 450.000,391.600 450.000 C 391.380 450.000,391.200 449.280,391.200 448.400 C 391.200 447.244,391.033 446.800,390.600 446.800 C 390.167 446.800,390.000 446.356,390.000 445.200 C 390.000 444.044,389.833 443.600,389.400 443.600 C 389.027 443.600,388.800 443.222,388.800 442.600 C 388.800 442.050,388.620 441.600,388.400 441.600 C 388.180 441.600,388.000 441.060,388.000 440.400 C 388.000 439.600,387.800 439.200,387.400 439.200 C 387.043 439.200,386.800 438.833,386.800 438.295 C 386.800 437.796,386.351 437.053,385.800 436.639 C 385.228 436.209,384.800 435.484,384.800 434.944 C 384.800 434.372,384.564 434.000,384.200 434.000 C 383.827 434.000,383.600 433.622,383.600 433.000 C 383.600 432.450,383.420 432.000,383.200 432.000 C 382.980 432.000,382.800 431.730,382.800 431.400 C 382.800 431.070,382.530 430.800,382.200 430.800 C 381.870 430.800,381.600 430.620,381.600 430.400 C 381.600 430.180,381.330 430.000,381.000 430.000 C 380.670 430.000,380.400 429.807,380.400 429.571 C 380.400 429.018,379.382 428.000,378.829 428.000 C 378.593 428.000,378.400 427.460,378.400 426.800 C 378.400 425.787,378.244 425.600,377.400 425.600 C 376.600 425.600,376.400 425.400,376.400 424.600 C 376.400 423.800,376.200 423.600,375.400 423.600 C 374.778 423.600,374.400 423.373,374.400 423.000 C 374.400 422.670,374.130 422.400,373.800 422.400 C 373.470 422.400,373.200 422.220,373.200 422.000 C 373.200 421.780,372.750 421.600,372.200 421.600 C 371.578 421.600,371.200 421.373,371.200 421.000 C 371.200 420.670,370.930 420.400,370.600 420.400 C 370.270 420.400,370.000 420.220,370.000 420.000 C 370.000 419.780,369.550 419.600,369.000 419.600 C 368.378 419.600,368.000 419.373,368.000 419.000 C 368.000 418.627,367.622 418.400,367.000 418.400 C 366.378 418.400,366.000 418.173,366.000 417.800 C 366.000 417.400,365.600 417.200,364.800 417.200 C 364.140 417.200,363.600 417.020,363.600 416.800 C 363.600 416.580,362.970 416.400,362.200 416.400 C 361.222 416.400,360.800 416.219,360.800 415.800 C 360.800 415.367,360.356 415.200,359.200 415.200 C 358.044 415.200,357.600 415.033,357.600 414.600 C 357.600 414.270,357.330 414.000,357.000 414.000 C 356.495 414.000,356.400 413.111,356.400 408.400 C 356.400 403.689,356.305 402.800,355.800 402.800 C 355.317 402.800,355.200 402.178,355.200 399.600 C 355.200 397.733,355.033 396.400,354.800 396.400 C 354.580 396.400,354.400 395.410,354.400 394.200 C 354.400 392.511,354.261 392.000,353.800 392.000 C 353.328 392.000,353.200 391.444,353.200 389.400 C 353.200 387.356,353.328 386.800,353.800 386.800 C 354.173 386.800,354.400 386.422,354.400 385.800 C 354.400 385.250,354.580 384.800,354.800 384.800 C 355.020 384.800,355.200 384.080,355.200 383.200 C 355.200 382.044,355.367 381.600,355.800 381.600 C 356.173 381.600,356.400 381.222,356.400 380.600 C 356.400 379.978,356.627 379.600,357.000 379.600 C 357.373 379.600,357.600 379.222,357.600 378.600 C 357.600 378.050,357.780 377.600,358.000 377.600 C 358.220 377.600,358.400 377.060,358.400 376.400 C 358.400 375.600,358.600 375.200,359.000 375.200 C 359.433 375.200,359.600 374.756,359.600 373.600 C 359.600 372.444,359.767 372.000,360.200 372.000 C 360.619 372.000,360.800 371.578,360.800 370.600 C 360.800 369.830,360.980 369.200,361.200 369.200 C 361.429 369.200,361.600 368.000,361.600 366.400 C 361.600 364.178,361.724 363.600,362.200 363.600 C 362.672 363.600,362.800 363.044,362.800 361.000 C 362.800 359.533,362.974 358.400,363.200 358.400 C 363.441 358.400,363.600 356.733,363.600 354.200 C 363.600 350.733,363.705 350.000,364.200 350.000 C 364.714 350.000,364.800 348.800,364.800 341.600 C 364.800 334.400,364.714 333.200,364.200 333.200 C 363.747 333.200,363.600 332.711,363.600 331.200 C 363.600 330.100,363.420 329.200,363.200 329.200 C 362.967 329.200,362.800 327.867,362.800 326.000 C 362.800 323.422,362.683 322.800,362.200 322.800 C 361.728 322.800,361.600 322.244,361.600 320.200 C 361.600 318.733,361.426 317.600,361.200 317.600 C 360.980 317.600,360.800 316.880,360.800 316.000 C 360.800 314.844,360.633 314.400,360.200 314.400 C 359.747 314.400,359.600 313.911,359.600 312.400 C 359.600 310.889,359.453 310.400,359.000 310.400 C 358.567 310.400,358.400 309.956,358.400 308.800 C 358.400 307.920,358.220 307.200,358.000 307.200 C 357.780 307.200,357.600 306.660,357.600 306.000 C 357.600 305.200,357.400 304.800,357.000 304.800 C 356.581 304.800,356.400 304.378,356.400 303.400 C 356.400 302.422,356.219 302.000,355.800 302.000 C 355.470 302.000,355.200 301.730,355.200 301.400 C 355.200 301.070,355.020 300.800,354.800 300.800 C 354.580 300.800,354.400 300.080,354.400 299.200 C 354.400 298.044,354.233 297.600,353.800 297.600 C 353.470 297.600,353.200 297.330,353.200 297.000 C 353.200 296.670,353.020 296.400,352.800 296.400 C 352.580 296.400,352.400 295.950,352.400 295.400 C 352.400 294.778,352.173 294.400,351.800 294.400 C 351.470 294.400,351.200 294.220,351.200 294.000 C 351.200 293.780,350.930 293.600,350.600 293.600 C 350.200 293.600,350.000 293.200,350.000 292.400 C 350.000 291.740,349.820 291.200,349.600 291.200 C 349.380 291.200,349.200 290.750,349.200 290.200 C 349.200 289.578,348.973 289.200,348.600 289.200 C 348.270 289.200,348.000 288.930,348.000 288.600 C 348.000 288.270,347.730 288.000,347.400 288.000 C 347.060 288.000,346.800 287.641,346.800 287.171 C 346.800 286.286,345.934 285.200,345.229 285.200 C 344.993 285.200,344.800 284.737,344.800 284.171 C 344.800 283.117,343.992 282.000,343.229 282.000 C 342.993 282.000,342.800 281.730,342.800 281.400 C 342.800 281.027,342.422 280.800,341.800 280.800 C 341.000 280.800,340.800 280.600,340.800 279.800 C 340.800 279.178,340.573 278.800,340.200 278.800 C 339.827 278.800,339.600 278.422,339.600 277.800 C 339.600 277.178,339.373 276.800,339.000 276.800 C 338.670 276.800,338.400 276.530,338.400 276.200 C 338.400 275.870,338.220 275.600,338.000 275.600 C 337.780 275.600,337.600 275.330,337.600 275.000 C 337.600 274.627,337.222 274.400,336.600 274.400 C 336.050 274.400,335.600 274.220,335.600 274.000 C 335.600 273.780,335.330 273.600,335.000 273.600 C 334.600 273.600,334.400 273.200,334.400 272.400 C 334.400 271.387,334.244 271.200,333.400 271.200 C 332.600 271.200,332.400 271.000,332.400 270.200 C 332.400 269.578,332.173 269.200,331.800 269.200 C 331.470 269.200,331.200 269.020,331.200 268.800 C 331.200 268.580,330.750 268.400,330.200 268.400 C 329.578 268.400,329.200 268.173,329.200 267.800 C 329.200 267.470,328.930 267.200,328.600 267.200 C 328.270 267.200,328.000 267.007,328.000 266.771 C 328.000 266.218,326.982 265.200,326.429 265.200 C 326.193 265.200,326.000 264.930,326.000 264.600 C 326.000 264.270,325.730 264.000,325.400 264.000 C 325.070 264.000,324.800 263.807,324.800 263.571 C 324.800 263.018,323.782 262.000,323.229 262.000 C 322.993 262.000,322.800 261.730,322.800 261.400 C 322.800 261.070,322.607 260.800,322.371 260.800 C 321.818 260.800,320.800 259.782,320.800 259.229 C 320.800 258.993,320.350 258.800,319.800 258.800 C 319.178 258.800,318.800 258.573,318.800 258.200 C 318.800 257.870,318.530 257.600,318.200 257.600 C 317.870 257.600,317.600 257.420,317.600 257.200 C 317.600 256.980,317.330 256.800,317.000 256.800 C 316.670 256.800,316.400 256.606,316.400 256.369 C 316.400 255.809,314.191 253.600,313.631 253.600 C 313.394 253.600,313.200 253.407,313.200 253.171 C 313.200 252.618,312.182 251.600,311.629 251.600 C 311.393 251.600,311.200 251.330,311.200 251.000 C 311.200 250.670,311.020 250.400,310.800 250.400 C 310.580 250.400,310.400 250.130,310.400 249.800 C 310.400 249.470,310.130 249.200,309.800 249.200 C 309.470 249.200,309.200 249.020,309.200 248.800 C 309.200 248.580,308.930 248.400,308.600 248.400 C 308.270 248.400,308.000 248.130,308.000 247.800 C 308.000 247.470,307.820 247.200,307.600 247.200 C 307.380 247.200,307.200 246.750,307.200 246.200 C 307.200 245.578,306.973 245.200,306.600 245.200 C 306.128 245.200,306.000 244.644,306.000 242.600 C 306.000 240.556,305.872 240.000,305.400 240.000 C 305.070 240.000,304.800 239.730,304.800 239.400 C 304.800 239.070,305.070 238.800,305.400 238.800 C 305.853 238.800,306.000 238.311,306.000 236.800 C 306.000 235.289,306.147 234.800,306.600 234.800 C 307.033 234.800,307.200 234.356,307.200 233.200 C 307.200 232.320,307.380 231.600,307.600 231.600 C 307.820 231.600,308.000 231.060,308.000 230.400 C 308.000 229.600,308.200 229.200,308.600 229.200 C 309.053 229.200,309.200 228.711,309.200 227.200 C 309.200 225.689,309.347 225.200,309.800 225.200 C 310.173 225.200,310.400 224.822,310.400 224.200 C 310.400 223.650,310.580 223.200,310.800 223.200 C 311.020 223.200,311.200 222.480,311.200 221.600 C 311.200 220.444,311.367 220.000,311.800 220.000 C 312.261 220.000,312.400 219.489,312.400 217.800 C 312.400 216.590,312.580 215.600,312.800 215.600 C 313.020 215.600,313.200 215.150,313.200 214.600 C 313.200 213.978,313.427 213.600,313.800 213.600 C 314.253 213.600,314.400 213.111,314.400 211.600 C 314.400 210.089,314.547 209.600,315.000 209.600 C 315.461 209.600,315.600 209.089,315.600 207.400 C 315.600 206.190,315.780 205.200,316.000 205.200 C 316.220 205.200,316.400 204.750,316.400 204.200 C 316.400 203.578,316.627 203.200,317.000 203.200 C 317.472 203.200,317.600 202.644,317.600 200.600 C 317.600 198.556,317.728 198.000,318.200 198.000 C 318.683 198.000,318.800 197.378,318.800 194.800 C 318.800 192.933,318.967 191.600,319.200 191.600 C 319.450 191.600,319.600 189.200,319.600 185.200 C 319.600 179.778,319.692 178.800,320.200 178.800 C 320.689 178.800,320.800 178.133,320.800 175.200 C 320.800 172.267,320.689 171.600,320.200 171.600 C 319.767 171.600,319.600 171.156,319.600 170.000 C 319.600 168.844,319.767 168.400,320.200 168.400 C 320.683 168.400,320.800 167.778,320.800 165.200 C 320.800 163.333,320.967 162.000,321.200 162.000 C 321.420 162.000,321.600 161.370,321.600 160.600 C 321.600 159.622,321.781 159.200,322.200 159.200 C 322.530 159.200,322.800 158.930,322.800 158.600 C 322.800 158.270,323.070 158.000,323.400 158.000 C 323.730 158.000,324.000 157.807,324.000 157.571 C 324.000 157.018,325.018 156.000,325.571 156.000 C 325.807 156.000,326.000 155.730,326.000 155.400 C 326.000 155.070,326.270 154.800,326.600 154.800 C 326.930 154.800,327.200 154.607,327.200 154.371 C 327.200 153.818,328.218 152.800,328.771 152.800 C 329.007 152.800,329.200 152.607,329.200 152.371 C 329.200 151.818,330.218 150.800,330.771 150.800 C 331.007 150.800,331.200 150.530,331.200 150.200 C 331.200 149.870,331.470 149.600,331.800 149.600 C 332.173 149.600,332.400 149.222,332.400 148.600 C 332.400 148.050,332.580 147.600,332.800 147.600 C 333.020 147.600,333.200 147.330,333.200 147.000 C 333.200 146.670,333.470 146.400,333.800 146.400 C 334.130 146.400,334.400 146.130,334.400 145.800 C 334.400 145.470,334.593 145.200,334.829 145.200 C 335.534 145.200,336.400 144.114,336.400 143.229 C 336.400 142.759,336.660 142.400,337.000 142.400 C 337.378 142.400,337.600 142.019,337.600 141.371 C 337.600 140.317,338.408 139.200,339.171 139.200 C 339.407 139.200,339.600 138.750,339.600 138.200 C 339.600 137.578,339.827 137.200,340.200 137.200 C 340.600 137.200,340.800 136.800,340.800 136.000 C 340.800 135.340,340.980 134.800,341.200 134.800 C 341.420 134.800,341.600 133.900,341.600 132.800 C 341.600 131.289,341.747 130.800,342.200 130.800 C 342.712 130.800,342.800 129.711,342.800 123.400 C 342.800 117.089,342.712 116.000,342.200 116.000 C 341.767 116.000,341.600 115.556,341.600 114.400 C 341.600 113.520,341.420 112.800,341.200 112.800 C 340.980 112.800,340.800 112.350,340.800 111.800 C 340.800 111.178,340.573 110.800,340.200 110.800 C 339.739 110.800,339.600 110.289,339.600 108.600 C 339.600 106.911,339.461 106.400,339.000 106.400 C 338.627 106.400,338.400 106.022,338.400 105.400 C 338.400 104.850,338.220 104.400,338.000 104.400 C 337.780 104.400,337.600 103.950,337.600 103.400 C 337.600 102.778,337.373 102.400,337.000 102.400 C 336.670 102.400,336.400 102.207,336.400 101.971 C 336.400 101.418,335.382 100.400,334.829 100.400 C 334.568 100.400,334.400 99.382,334.400 97.800 C 334.400 95.756,334.272 95.200,333.800 95.200 C 333.470 95.200,333.200 94.930,333.200 94.600 C 333.200 94.227,332.822 94.000,332.200 94.000 C 331.578 94.000,331.200 93.773,331.200 93.400 C 331.200 93.070,330.930 92.800,330.600 92.800 C 330.270 92.800,330.000 92.620,330.000 92.400 C 330.000 92.169,328.733 92.000,327.000 92.000 C 324.600 92.000,324.000 91.880,324.000 91.400 C 324.000 91.070,323.730 90.800,323.400 90.800 C 323.070 90.800,322.800 90.530,322.800 90.200 C 322.800 89.870,322.607 89.600,322.371 89.600 C 321.818 89.600,320.800 88.582,320.800 88.029 C 320.800 87.760,319.609 87.600,317.600 87.600 C 315.022 87.600,314.400 87.717,314.400 88.200 C 314.400 88.573,314.022 88.800,313.400 88.800 C 312.778 88.800,312.400 88.573,312.400 88.200 C 312.400 87.683,311.022 87.600,302.400 87.600 C 293.778 87.600,292.400 87.683,292.400 88.200 C 292.400 88.661,291.889 88.800,290.200 88.800 C 288.990 88.800,288.000 88.980,288.000 89.200 C 288.000 89.420,287.550 89.600,287.000 89.600 C 286.378 89.600,286.000 89.827,286.000 90.200 C 286.000 90.708,285.044 90.800,279.800 90.800 C 274.556 90.800,273.600 90.708,273.600 90.200 C 273.600 89.739,273.089 89.600,271.400 89.600 C 270.190 89.600,269.200 89.420,269.200 89.200 C 269.200 88.980,268.300 88.800,267.200 88.800 C 265.689 88.800,265.200 88.653,265.200 88.200 C 265.200 87.709,264.511 87.600,261.400 87.600 C 259.133 87.600,257.600 87.439,257.600 87.200 C 257.600 86.980,256.700 86.800,255.600 86.800 C 254.089 86.800,253.600 86.653,253.600 86.200 C 253.600 85.827,253.222 85.600,252.600 85.600 C 251.978 85.600,251.600 85.373,251.600 85.000 C 251.600 84.567,251.156 84.400,250.000 84.400 C 249.120 84.400,248.400 84.220,248.400 84.000 C 248.400 83.780,247.680 83.600,246.800 83.600 C 245.644 83.600,245.200 83.433,245.200 83.000 C 245.200 82.670,244.930 82.400,244.600 82.400 C 244.270 82.400,244.000 82.130,244.000 81.800 C 244.000 81.427,243.622 81.200,243.000 81.200 C 242.200 81.200,242.000 81.000,242.000 80.200 C 242.000 79.400,241.800 79.200,241.000 79.200 C 240.120 79.200,240.000 79.029,240.000 77.771 C 240.000 76.374,240.717 75.200,241.571 75.200 C 241.807 75.200,242.000 74.660,242.000 74.000 C 242.000 72.987,242.156 72.800,243.000 72.800 C 243.622 72.800,244.000 73.027,244.000 73.400 C 244.000 73.730,244.270 74.000,244.600 74.000 C 244.930 74.000,245.200 74.205,245.200 74.456 C 245.200 75.128,246.468 75.973,247.500 75.987 C 248.377 76.000,248.400 75.893,248.400 71.800 C 248.400 68.333,248.295 67.600,247.800 67.600 C 247.292 67.600,247.200 66.644,247.200 61.400 C 247.200 56.156,247.108 55.200,246.600 55.200 C 246.270 55.200,246.000 54.930,246.000 54.600 C 246.000 54.270,245.820 54.000,245.600 54.000 C 245.380 54.000,245.200 53.280,245.200 52.400 C 245.200 51.244,245.033 50.800,244.600 50.800 C 244.227 50.800,244.000 50.422,244.000 49.800 C 244.000 48.900,243.840 48.800,242.400 48.800 C 241.244 48.800,240.800 48.633,240.800 48.200 C 240.800 47.720,240.200 47.600,237.800 47.600 C 236.067 47.600,234.800 47.431,234.800 47.200 C 234.800 46.980,234.980 46.800,235.200 46.800 C 235.420 46.800,235.600 46.350,235.600 45.800 C 235.600 45.178,235.827 44.800,236.200 44.800 C 236.654 44.800,236.800 44.308,236.800 42.771 C 236.800 40.597,235.556 39.912,235.269 41.929 C 235.197 42.435,234.882 42.947,234.569 43.067 C 234.240 43.193,234.000 43.829,234.000 44.573 C 234.000 45.429,233.665 46.175,233.000 46.800 C 232.450 47.317,232.000 48.040,232.000 48.408 C 232.000 49.263,230.751 50.400,229.813 50.400 C 229.414 50.400,228.869 50.699,228.602 51.065 C 228.304 51.472,227.851 51.628,227.432 51.468 C 226.612 51.153,226.967 50.400,227.935 50.400 C 228.740 50.400,230.000 49.054,230.000 48.194 C 230.000 47.866,230.720 46.947,231.600 46.152 C 232.480 45.357,233.200 44.368,233.200 43.953 C 233.200 43.539,233.380 43.200,233.600 43.200 C 233.833 43.200,234.000 41.867,234.000 40.000 C 234.000 38.133,233.833 36.800,233.600 36.800 C 233.369 36.800,233.200 35.529,233.200 33.787 C 233.200 31.479,233.060 30.721,232.600 30.545 C 232.270 30.418,232.000 29.903,232.000 29.400 C 232.000 28.897,231.730 28.382,231.400 28.255 C 231.023 28.111,230.800 27.499,230.800 26.613 C 230.800 25.836,230.620 25.200,230.400 25.200 C 230.180 25.200,230.000 24.869,230.000 24.464 C 230.000 22.675,225.155 18.716,223.305 18.993 C 221.614 19.247,221.600 19.239,221.600 18.025 C 221.600 16.364,223.885 16.219,225.129 17.800 C 225.561 18.350,226.220 18.800,226.592 18.800 C 227.531 18.800,230.000 21.212,230.000 22.130 C 230.000 22.545,230.450 23.239,231.000 23.671 C 231.550 24.104,232.000 24.811,232.000 25.242 C 232.000 25.673,232.270 26.129,232.600 26.255 C 232.930 26.382,233.200 26.916,233.200 27.443 C 233.200 27.969,233.380 28.400,233.600 28.400 C 233.820 28.400,234.000 28.738,234.000 29.151 C 234.000 29.564,234.261 30.118,234.579 30.383 C 234.898 30.647,235.213 31.703,235.279 32.728 C 235.482 35.867,236.800 35.608,236.800 32.429 C 236.800 30.537,236.667 30.000,236.200 30.000 C 235.767 30.000,235.600 29.556,235.600 28.400 C 235.600 27.520,235.420 26.800,235.200 26.800 C 234.980 26.800,234.800 26.530,234.800 26.200 C 234.800 25.870,234.980 25.600,235.200 25.600 C 235.420 25.600,235.600 25.238,235.600 24.795 C 235.600 24.352,235.803 23.664,236.052 23.266 C 236.436 22.651,236.199 22.237,234.482 20.520 C 232.527 18.566,231.600 18.359,231.600 19.880 C 231.600 20.166,231.330 20.400,231.000 20.400 C 230.670 20.400,230.400 20.220,230.400 20.000 C 230.400 19.780,230.130 19.600,229.800 19.600 C 229.470 19.600,229.200 19.330,229.200 19.000 C 229.200 18.670,229.020 18.400,228.800 18.400 C 228.580 18.400,228.400 18.130,228.400 17.800 C 228.400 17.470,228.207 17.200,227.971 17.200 C 227.418 17.200,226.400 16.182,226.400 15.629 C 226.400 15.393,225.860 15.200,225.200 15.200 C 224.400 15.200,224.000 15.000,224.000 14.600 C 224.000 14.270,223.820 14.000,223.600 14.000 C 223.380 14.000,223.200 13.370,223.200 12.600 C 223.200 11.670,223.013 11.200,222.643 11.200 C 222.336 11.200,221.982 10.930,221.855 10.600 C 221.710 10.222,221.098 10.000,220.200 10.000 C 219.302 10.000,218.690 10.222,218.545 10.600 C 218.185 11.538,217.666 11.305,217.527 10.143 C 217.400 9.083,216.276 8.350,215.300 8.692 M236.667 35.467 C 236.097 36.036,236.379 39.200,237.000 39.200 C 237.453 39.200,237.600 38.711,237.600 37.200 C 237.600 35.341,237.317 34.816,236.667 35.467 M199.772 39.729 C 199.315 40.919,199.772 42.988,200.523 43.131 C 201.152 43.250,201.230 43.019,201.123 41.365 C 201.002 39.490,200.225 38.549,199.772 39.729 M224.869 49.062 C 225.664 49.782,225.838 51.006,225.200 51.400 C 224.393 51.899,224.754 53.538,225.700 53.672 C 227.410 53.915,227.107 55.528,225.324 55.674 C 224.082 55.777,223.776 55.971,223.669 56.724 C 223.481 58.052,222.513 58.245,221.380 57.181 C 219.777 55.676,219.972 49.200,221.619 49.200 C 222.023 49.200,222.464 49.020,222.600 48.800 C 222.974 48.196,224.048 48.320,224.869 49.062 M233.200 52.976 C 233.200 53.733,233.380 54.464,233.600 54.600 C 233.820 54.736,234.000 55.287,234.000 55.824 C 234.000 56.361,233.820 56.800,233.600 56.800 C 233.380 56.800,233.200 56.430,233.200 55.977 C 233.200 55.525,232.635 54.639,231.945 54.009 C 230.506 52.695,230.616 51.600,232.187 51.600 C 233.075 51.600,233.200 51.770,233.200 52.976 M218.400 55.639 C 218.400 56.004,218.679 56.534,219.020 56.817 C 220.094 57.708,219.616 59.775,218.300 59.927 C 217.695 59.996,217.200 60.221,217.200 60.427 C 217.200 60.981,214.644 60.879,214.030 60.300 C 213.606 59.900,213.463 59.900,213.317 60.300 C 213.216 60.575,212.698 60.800,212.167 60.800 C 210.855 60.800,210.873 59.395,212.200 58.165 C 212.750 57.655,213.200 56.970,213.200 56.643 C 213.200 56.315,213.380 55.936,213.600 55.800 C 213.820 55.664,214.000 55.274,214.000 54.933 C 214.000 54.592,214.396 53.902,214.880 53.399 L 215.759 52.485 217.080 53.731 C 217.806 54.416,218.400 55.274,218.400 55.639 M198.960 53.556 C 200.127 54.846,199.710 58.600,198.400 58.600 C 197.460 58.600,197.393 58.458,197.278 56.245 C 197.100 52.782,197.574 52.024,198.960 53.556 M215.062 57.531 C 213.857 58.862,214.198 60.000,215.800 60.000 C 217.167 60.000,217.200 59.962,217.200 58.400 C 217.200 56.587,216.262 56.206,215.062 57.531 M226.800 57.469 C 226.800 57.836,227.095 58.462,227.454 58.860 C 228.060 59.530,228.060 59.602,227.454 59.834 C 226.565 60.176,226.520 63.807,227.400 64.145 C 227.730 64.271,228.000 64.716,228.000 65.133 C 228.000 65.550,228.459 66.350,229.019 66.910 C 229.645 67.536,229.875 68.030,229.616 68.190 C 229.384 68.333,229.086 68.169,228.954 67.825 C 228.822 67.481,228.425 67.200,228.071 67.200 C 226.292 67.200,223.100 62.913,224.200 62.000 C 224.553 61.707,224.800 60.834,224.800 59.883 C 224.800 58.937,225.075 57.959,225.462 57.531 C 226.287 56.620,226.800 56.596,226.800 57.469 M221.600 62.000 C 221.600 62.414,221.433 62.856,221.229 62.982 C 220.775 63.263,220.249 61.767,220.602 61.197 C 220.967 60.607,221.600 61.116,221.600 62.000 M222.512 64.600 C 222.464 64.820,221.969 65.057,221.412 65.127 C 220.641 65.223,220.400 65.485,220.400 66.227 C 220.400 66.912,220.178 67.200,219.649 67.200 C 219.236 67.200,218.674 67.470,218.400 67.800 C 218.126 68.130,217.294 68.400,216.551 68.400 C 215.464 68.400,215.200 68.557,215.200 69.206 C 215.200 70.158,212.904 72.371,211.900 72.388 C 211.099 72.402,211.056 72.259,211.571 71.295 C 211.775 70.913,212.039 70.285,212.158 69.900 C 212.277 69.515,212.741 69.200,213.187 69.200 C 213.676 69.200,214.000 68.937,214.000 68.540 C 214.000 67.131,216.624 65.200,218.537 65.200 C 219.783 65.200,220.386 65.012,220.555 64.572 C 220.817 63.890,222.662 63.916,222.512 64.600 M234.500 70.157 C 235.165 70.662,235.500 72.400,234.931 72.400 C 234.347 72.400,233.200 71.034,233.200 70.338 C 233.200 69.472,233.537 69.425,234.500 70.157 M223.975 71.071 C 224.867 71.835,224.708 72.400,223.601 72.400 C 223.022 72.400,222.820 72.742,222.724 73.884 C 222.623 75.091,222.413 75.412,221.600 75.601 C 220.967 75.748,220.553 76.157,220.472 76.716 C 220.302 77.892,216.400 78.086,216.400 76.919 C 216.400 76.545,215.836 75.656,215.147 74.945 C 213.809 73.564,213.805 72.400,215.138 72.400 C 215.558 72.400,216.126 72.130,216.400 71.800 C 216.674 71.470,217.405 71.200,218.025 71.200 C 218.645 71.200,219.264 71.020,219.400 70.800 C 219.811 70.135,223.110 70.331,223.975 71.071 M168.689 160.888 C 172.448 164.614,172.379 166.249,168.291 170.310 C 166.690 171.900,165.090 173.200,164.733 173.200 C 164.377 173.200,163.973 173.495,163.834 173.854 C 163.602 174.460,163.530 174.460,162.860 173.854 C 162.455 173.488,161.462 173.200,160.600 173.200 C 158.904 173.200,157.600 172.298,157.600 171.125 C 157.600 170.713,157.330 170.271,157.000 170.145 C 156.541 169.969,156.400 169.215,156.400 166.945 C 156.400 164.674,156.541 163.921,157.000 163.745 C 157.330 163.618,157.600 163.227,157.600 162.876 C 157.600 162.017,159.987 159.600,160.836 159.600 C 161.209 159.600,161.618 159.330,161.745 159.000 C 162.412 157.262,166.021 158.244,168.689 160.888 M245.600 159.000 C 245.874 159.330,246.687 159.600,247.406 159.600 C 248.200 159.600,248.805 159.836,248.945 160.200 C 249.071 160.530,249.481 160.800,249.856 160.800 C 250.767 160.800,252.000 161.957,252.000 162.813 C 252.000 163.192,252.270 163.726,252.600 164.000 C 253.041 164.366,253.200 165.337,253.200 167.662 C 253.200 170.105,253.063 170.878,252.600 171.055 C 252.270 171.182,252.000 171.697,252.000 172.200 C 252.000 172.703,251.730 173.218,251.400 173.345 C 251.070 173.471,250.800 173.941,250.800 174.387 C 250.800 174.834,250.620 175.200,250.400 175.200 C 250.180 175.200,250.000 175.020,250.000 174.800 C 250.000 174.580,249.730 174.400,249.400 174.400 C 249.070 174.400,248.800 174.580,248.800 174.800 C 248.800 175.020,248.350 175.200,247.800 175.200 C 247.250 175.200,246.800 175.020,246.800 174.800 C 246.800 174.580,245.894 174.400,244.787 174.400 C 243.368 174.400,242.707 174.223,242.545 173.800 C 242.418 173.470,242.025 173.200,241.671 173.200 C 240.789 173.200,237.200 169.599,237.200 168.715 C 237.200 168.322,237.020 168.000,236.800 168.000 C 236.580 168.000,236.400 167.111,236.400 166.024 C 236.400 164.937,236.580 163.936,236.800 163.800 C 237.020 163.664,237.200 163.243,237.200 162.865 C 237.200 162.082,238.538 160.800,239.356 160.800 C 239.656 160.800,240.126 160.530,240.400 160.200 C 240.674 159.870,241.217 159.600,241.606 159.600 C 241.996 159.600,242.418 159.330,242.545 159.000 C 242.676 158.657,243.273 158.400,243.938 158.400 C 244.578 158.400,245.326 158.670,245.600 159.000 M198.400 184.200 C 198.737 184.606,199.642 184.800,201.206 184.800 C 202.889 184.800,203.577 184.963,203.745 185.400 C 203.889 185.777,204.501 186.000,205.387 186.000 C 206.164 186.000,206.800 186.180,206.800 186.400 C 206.800 186.620,207.231 186.800,207.757 186.800 C 208.284 186.800,208.818 187.070,208.945 187.400 C 209.071 187.730,209.487 188.000,209.868 188.000 C 211.104 188.000,213.200 190.413,213.200 191.836 C 213.200 192.614,213.439 193.206,213.811 193.349 C 215.033 193.818,214.462 204.504,213.200 204.799 C 212.579 204.944,212.153 205.359,212.075 205.892 C 211.999 206.420,211.614 206.799,211.075 206.875 C 210.418 206.969,210.169 207.316,210.077 208.270 C 210.009 208.969,209.694 209.756,209.377 210.019 C 209.060 210.283,208.800 210.782,208.800 211.130 C 208.800 211.994,206.406 214.400,205.545 214.400 C 205.161 214.400,204.736 214.580,204.600 214.800 C 204.464 215.020,204.023 215.200,203.619 215.200 C 203.216 215.200,202.782 215.470,202.655 215.800 C 202.529 216.130,202.119 216.400,201.744 216.400 C 200.591 216.400,199.600 217.631,199.600 219.062 C 199.600 219.798,199.780 220.400,200.000 220.400 C 200.220 220.400,200.400 220.738,200.400 221.151 C 200.400 221.564,200.670 222.126,201.000 222.400 C 201.330 222.674,201.600 223.214,201.600 223.600 C 201.600 223.986,201.870 224.526,202.200 224.800 C 202.530 225.074,202.800 225.636,202.800 226.049 C 202.800 226.462,202.980 226.800,203.200 226.800 C 203.420 226.800,203.600 227.588,203.600 228.551 C 203.600 229.620,203.834 230.496,204.200 230.800 C 204.530 231.074,204.800 231.614,204.800 232.000 C 204.800 232.386,205.070 232.926,205.400 233.200 C 205.730 233.474,206.000 234.023,206.000 234.421 C 206.000 234.867,206.346 235.193,206.900 235.272 C 207.478 235.354,207.846 235.722,207.928 236.300 C 208.005 236.843,208.334 237.200,208.758 237.200 C 209.144 237.200,209.883 237.650,210.400 238.200 C 210.917 238.750,211.674 239.200,212.082 239.200 C 212.491 239.200,212.929 239.470,213.055 239.800 C 213.216 240.218,213.867 240.400,215.200 240.400 C 216.533 240.400,217.184 240.582,217.345 241.000 C 217.488 241.374,218.098 241.600,218.964 241.600 C 219.728 241.600,220.464 241.780,220.600 242.000 C 220.736 242.220,222.521 242.400,224.575 242.400 C 227.400 242.400,228.423 242.545,228.800 243.000 C 229.137 243.406,230.042 243.600,231.606 243.600 C 233.289 243.600,233.977 243.437,234.145 243.000 C 234.314 242.559,235.009 242.400,236.764 242.400 C 238.078 242.400,239.264 242.220,239.400 242.000 C 239.536 241.780,240.155 241.600,240.775 241.600 C 241.395 241.600,242.126 241.330,242.400 241.000 C 242.674 240.670,243.214 240.400,243.600 240.400 C 243.986 240.400,244.526 240.130,244.800 239.800 C 245.074 239.470,245.636 239.200,246.049 239.200 C 246.462 239.200,246.800 239.020,246.800 238.800 C 246.800 238.580,247.138 238.400,247.551 238.400 C 247.964 238.400,248.526 238.130,248.800 237.800 C 249.074 237.470,249.625 237.200,250.025 237.200 C 250.425 237.200,250.864 237.020,251.000 236.800 C 251.408 236.140,252.000 236.348,252.000 237.151 C 252.000 237.564,251.730 238.126,251.400 238.400 C 251.070 238.674,250.800 239.236,250.800 239.649 C 250.800 240.103,250.518 240.400,250.086 240.400 C 249.694 240.400,248.395 241.390,247.200 242.600 C 245.623 244.197,244.729 244.800,243.937 244.800 C 243.338 244.800,242.736 244.980,242.600 245.200 C 242.464 245.420,241.278 245.600,239.964 245.600 C 238.209 245.600,237.514 245.759,237.345 246.200 C 237.205 246.564,236.600 246.800,235.806 246.800 C 235.087 246.800,234.274 247.070,234.000 247.400 C 233.596 247.887,232.313 248.000,227.194 248.000 C 221.956 248.000,220.847 247.898,220.655 247.400 C 220.487 246.960,219.793 246.800,218.062 246.800 C 216.449 246.800,215.540 246.609,215.200 246.200 C 214.898 245.836,214.022 245.600,212.975 245.600 C 212.025 245.600,211.136 245.420,211.000 245.200 C 210.864 244.980,210.398 244.800,209.964 244.800 C 209.530 244.800,209.071 244.530,208.945 244.200 C 208.818 243.870,208.396 243.600,208.006 243.600 C 207.617 243.600,207.074 243.870,206.800 244.200 C 206.526 244.530,205.803 244.800,205.193 244.800 C 204.532 244.800,203.704 245.201,203.142 245.793 C 202.624 246.339,201.907 246.789,201.549 246.793 C 201.191 246.797,200.674 247.070,200.400 247.400 C 200.126 247.730,199.564 248.000,199.151 248.000 C 198.738 248.000,198.400 248.180,198.400 248.400 C 198.400 248.631,197.150 248.800,195.449 248.800 C 193.314 248.800,192.360 248.966,192.000 249.400 C 191.726 249.730,190.995 250.000,190.375 250.000 C 189.755 250.000,189.136 250.180,189.000 250.400 C 188.864 250.620,188.245 250.800,187.625 250.800 C 187.005 250.800,186.270 251.075,185.992 251.410 C 185.538 251.957,185.415 251.957,184.811 251.410 C 184.440 251.075,183.566 250.800,182.869 250.800 C 182.171 250.800,181.600 250.620,181.600 250.400 C 181.600 249.822,177.858 249.907,177.230 250.500 C 176.806 250.900,176.663 250.900,176.517 250.500 C 176.409 250.206,175.625 250.000,174.616 250.000 C 173.577 250.000,172.701 249.763,172.400 249.400 C 172.126 249.070,171.623 248.800,171.283 248.800 C 170.605 248.800,169.200 247.679,169.200 247.138 C 169.200 246.663,170.700 246.715,171.000 247.200 C 171.136 247.420,172.322 247.600,173.636 247.600 C 175.391 247.600,176.086 247.759,176.255 248.200 C 176.436 248.670,177.244 248.800,179.994 248.800 C 182.624 248.800,183.627 248.650,184.000 248.200 C 184.328 247.804,185.222 247.600,186.625 247.600 C 187.795 247.600,188.864 247.420,189.000 247.200 C 189.136 246.980,189.556 246.800,189.934 246.800 C 190.780 246.800,196.400 241.213,196.400 240.372 C 196.400 240.037,197.120 239.059,198.000 238.200 C 199.753 236.488,200.322 233.563,199.000 233.055 C 198.628 232.913,198.400 232.304,198.400 231.455 C 198.400 230.607,198.172 229.998,197.800 229.855 C 197.394 229.700,197.200 229.064,197.200 227.893 C 197.200 226.940,196.984 225.944,196.720 225.680 C 196.347 225.307,196.347 225.093,196.720 224.720 C 197.301 224.139,197.359 221.745,196.800 221.400 C 196.580 221.264,196.400 220.803,196.400 220.376 C 196.400 219.884,196.126 219.600,195.649 219.600 C 195.236 219.600,194.674 219.330,194.400 219.000 C 194.126 218.670,193.586 218.400,193.200 218.400 C 192.814 218.400,192.274 218.130,192.000 217.800 C 191.726 217.470,191.164 217.200,190.751 217.200 C 190.338 217.200,190.000 217.020,190.000 216.800 C 190.000 216.580,189.671 216.400,189.270 216.400 C 188.868 216.400,188.117 215.950,187.600 215.400 C 187.083 214.850,186.395 214.400,186.071 214.400 C 185.324 214.400,182.800 211.829,182.800 211.069 C 182.800 210.755,182.530 210.274,182.200 210.000 C 181.870 209.726,181.600 209.158,181.600 208.738 C 181.600 208.319,181.330 207.871,181.000 207.745 C 180.670 207.618,180.400 207.207,180.400 206.831 C 180.400 206.455,179.502 205.260,178.405 204.174 C 177.307 203.088,176.407 201.907,176.405 201.549 C 176.402 201.191,176.130 200.674,175.800 200.400 C 175.470 200.126,175.200 199.564,175.200 199.151 C 175.200 198.738,175.020 198.400,174.800 198.400 C 173.853 198.400,174.353 193.535,175.400 192.565 C 175.950 192.055,176.400 191.411,176.400 191.133 C 176.400 190.354,180.079 186.800,180.885 186.800 C 181.278 186.800,181.600 186.620,181.600 186.400 C 181.600 186.180,181.938 186.000,182.351 186.000 C 182.764 186.000,183.326 185.730,183.600 185.400 C 183.874 185.070,184.687 184.800,185.406 184.800 C 186.200 184.800,186.805 184.564,186.945 184.200 C 187.133 183.708,188.140 183.600,192.538 183.600 C 196.818 183.600,198.003 183.721,198.400 184.200 M187.100 194.473 C 185.653 196.021,185.712 196.400,187.400 196.400 C 188.767 196.400,188.800 196.362,188.800 194.800 C 188.800 192.929,188.581 192.887,187.100 194.473 M268.800 199.000 C 269.074 199.330,269.636 199.600,270.049 199.600 C 270.462 199.600,270.800 199.780,270.800 200.000 C 270.800 200.220,271.101 200.400,271.469 200.400 C 271.836 200.400,272.481 200.711,272.901 201.092 C 273.626 201.747,273.686 201.747,274.053 201.092 C 274.529 200.241,275.338 200.203,276.000 201.000 C 276.274 201.330,276.808 201.600,277.187 201.600 C 278.331 201.600,279.270 202.984,279.128 204.463 C 278.979 206.024,276.268 206.687,275.216 205.420 C 274.934 205.079,274.389 204.800,274.007 204.800 C 273.625 204.800,272.974 204.350,272.561 203.800 C 272.148 203.250,271.515 202.800,271.154 202.800 C 270.793 202.800,270.274 202.530,270.000 202.200 C 269.726 201.870,269.186 201.600,268.800 201.600 C 268.414 201.600,267.874 201.330,267.600 201.000 C 267.326 200.670,266.595 200.400,265.975 200.400 C 264.734 200.400,264.209 199.876,264.552 198.981 C 264.859 198.182,268.133 198.197,268.800 199.000 M276.145 210.600 C 276.288 210.974,276.898 211.200,277.764 211.200 C 278.528 211.200,279.264 211.380,279.400 211.600 C 279.536 211.820,280.002 212.000,280.436 212.000 C 280.870 212.000,281.330 212.272,281.457 212.605 C 282.255 214.683,277.688 215.169,275.767 213.211 C 275.125 212.557,274.285 212.017,273.900 212.011 C 273.026 211.997,273.016 211.667,273.862 210.731 C 274.663 209.846,275.829 209.779,276.145 210.600 M242.400 258.654 C 242.400 259.691,242.113 260.374,241.400 261.035 C 239.607 262.697,239.979 264.612,242.600 267.200 C 244.379 268.957,244.800 269.624,244.800 270.686 C 244.800 271.409,244.980 272.000,245.200 272.000 C 245.420 272.000,245.600 272.788,245.600 273.751 C 245.600 274.820,245.834 275.696,246.200 276.000 C 246.530 276.274,246.800 277.087,246.800 277.806 C 246.800 278.600,247.036 279.205,247.400 279.345 C 248.192 279.649,248.159 280.361,247.308 281.301 C 246.653 282.026,246.653 282.086,247.308 282.453 C 247.755 282.703,248.000 283.328,248.000 284.220 C 248.000 284.979,248.180 285.600,248.400 285.600 C 248.640 285.600,248.800 287.184,248.800 289.551 C 248.800 292.575,248.941 293.619,249.400 294.000 C 249.827 294.355,250.000 295.293,250.000 297.262 C 250.000 299.349,249.853 300.081,249.400 300.255 C 249.070 300.382,248.800 300.842,248.800 301.279 C 248.800 303.288,242.992 304.677,241.600 303.000 C 241.326 302.670,240.805 302.400,240.441 302.400 C 239.659 302.400,236.400 299.055,236.400 298.253 C 236.400 297.948,236.130 297.474,235.800 297.200 C 235.470 296.926,235.200 296.373,235.200 295.971 C 235.200 295.569,234.919 295.082,234.575 294.890 C 234.008 294.573,234.008 294.492,234.575 294.021 C 235.396 293.339,235.414 290.275,234.600 289.600 C 234.262 289.319,234.000 288.447,234.000 287.600 C 234.000 286.753,234.262 285.881,234.600 285.600 C 235.476 284.873,235.363 283.600,234.424 283.600 C 233.530 283.600,232.825 282.725,233.529 282.490 C 233.788 282.404,234.000 282.010,234.000 281.616 C 234.000 281.221,234.277 280.668,234.616 280.387 C 235.160 279.935,235.114 279.754,234.216 278.816 C 233.142 277.696,232.704 273.554,233.600 273.000 C 233.820 272.864,234.000 272.245,234.000 271.625 C 234.000 271.005,234.270 270.274,234.600 270.000 C 235.300 269.419,235.419 266.379,234.767 265.727 C 234.457 265.417,234.475 265.070,234.830 264.500 C 235.470 263.476,235.051 262.400,234.013 262.400 C 233.566 262.400,233.200 262.220,233.200 262.000 C 233.200 261.780,232.761 261.600,232.224 261.600 C 231.687 261.600,231.136 261.780,231.000 262.000 C 230.859 262.229,228.810 262.400,226.219 262.400 C 222.558 262.400,221.641 262.516,221.455 263.000 C 221.329 263.330,220.859 263.600,220.413 263.600 C 219.957 263.600,219.600 263.336,219.600 263.000 C 219.600 262.627,219.978 262.400,220.600 262.400 C 221.150 262.400,221.600 262.220,221.600 262.000 C 221.600 261.779,222.650 261.600,223.951 261.600 C 225.553 261.600,226.461 261.409,226.800 261.000 C 227.074 260.670,227.617 260.400,228.006 260.400 C 228.396 260.400,228.818 260.130,228.945 259.800 C 229.071 259.470,229.509 259.200,229.918 259.200 C 230.326 259.200,231.083 258.750,231.600 258.200 C 232.504 257.238,232.728 257.200,237.470 257.200 L 242.400 257.200 242.400 258.654 M179.600 263.000 C 179.874 263.330,180.557 263.600,181.117 263.600 C 182.487 263.600,183.600 264.681,183.600 266.013 C 183.600 266.612,183.870 267.326,184.200 267.600 C 184.530 267.874,184.800 268.414,184.800 268.800 C 184.800 269.186,184.530 269.726,184.200 270.000 C 183.804 270.328,183.600 271.222,183.600 272.625 C 183.600 273.795,183.420 274.864,183.200 275.000 C 182.980 275.136,182.800 276.713,182.800 278.505 C 182.800 283.546,179.481 286.254,176.800 283.400 C 176.283 282.850,175.532 282.400,175.130 282.400 C 174.729 282.400,174.400 282.220,174.400 282.000 C 174.400 281.182,173.251 281.634,173.128 282.500 C 173.017 283.281,172.762 283.400,171.200 283.400 L 169.400 283.400 169.281 280.435 C 169.197 278.340,169.314 277.377,169.678 277.152 C 170.088 276.898,170.092 276.732,169.697 276.337 C 169.400 276.040,169.200 274.763,169.200 273.169 C 169.200 271.246,169.027 270.354,168.581 269.984 C 168.037 269.532,168.158 269.269,169.581 267.820 C 170.471 266.912,171.200 265.856,171.200 265.472 C 171.200 264.481,172.301 264.186,173.146 264.951 C 174.080 265.796,175.200 265.782,175.200 264.926 C 175.200 263.045,178.455 261.620,179.600 263.000 M201.995 267.489 C 202.438 267.868,202.800 268.487,202.800 268.865 C 202.800 269.243,202.980 269.664,203.200 269.800 C 203.766 270.150,203.697 272.543,203.103 273.137 C 202.708 273.532,202.727 273.708,203.200 274.000 C 203.673 274.292,203.692 274.468,203.297 274.863 C 203.023 275.137,202.800 275.662,202.800 276.031 C 202.800 276.400,202.530 276.926,202.200 277.200 C 201.870 277.474,201.600 278.017,201.600 278.406 C 201.600 278.796,201.330 279.218,201.000 279.345 C 200.532 279.524,200.400 280.320,200.400 282.964 C 200.400 284.828,200.220 286.464,200.000 286.600 C 199.780 286.736,199.600 287.456,199.600 288.200 C 199.600 289.760,199.025 290.331,198.463 289.327 C 198.133 288.738,197.983 288.717,197.422 289.182 C 196.923 289.596,196.655 289.615,196.301 289.261 C 195.947 288.907,195.431 289.192,194.147 290.452 C 191.694 292.860,191.200 292.482,191.200 288.200 C 191.200 285.524,191.069 284.725,190.600 284.545 C 189.826 284.248,189.828 283.040,190.604 282.396 C 191.143 281.949,191.141 281.845,190.590 281.442 C 190.058 281.053,190.197 280.770,191.586 279.414 C 192.474 278.547,193.200 277.551,193.200 277.200 C 193.200 276.849,193.920 275.859,194.800 275.000 C 195.897 273.929,196.400 273.093,196.400 272.342 C 196.400 271.740,196.580 271.136,196.800 271.000 C 197.020 270.864,197.200 270.398,197.200 269.964 C 197.200 269.530,197.470 269.071,197.800 268.945 C 198.130 268.818,198.400 268.284,198.400 267.757 C 198.400 266.561,200.710 266.389,201.995 267.489 M172.400 277.828 C 172.400 280.324,172.445 280.449,173.300 280.328 C 174.789 280.116,174.903 275.200,173.419 275.200 C 172.430 275.200,172.400 275.278,172.400 277.828 M186.800 279.400 C 186.800 279.950,186.630 280.400,186.422 280.400 C 186.214 280.400,185.989 281.255,185.922 282.300 C 185.818 283.923,185.668 284.219,184.898 284.328 C 183.738 284.493,183.202 283.280,184.135 282.598 C 184.501 282.331,184.800 281.727,184.800 281.256 C 184.800 280.762,185.054 280.400,185.400 280.400 C 185.773 280.400,186.000 280.022,186.000 279.400 C 186.000 278.850,186.180 278.400,186.400 278.400 C 186.620 278.400,186.800 278.850,186.800 279.400 M186.000 286.554 C 186.000 286.833,185.555 287.479,185.010 287.990 C 183.616 289.301,183.064 288.022,184.408 286.592 C 185.319 285.622,186.000 285.606,186.000 286.554 M346.545 442.600 C 346.671 442.930,347.130 443.200,347.564 443.200 C 347.998 443.200,348.464 443.380,348.600 443.600 C 348.736 443.820,349.202 444.000,349.636 444.000 C 350.070 444.000,350.529 444.270,350.655 444.600 C 350.782 444.930,351.316 445.200,351.843 445.200 C 352.369 445.200,352.800 445.380,352.800 445.600 C 352.800 445.820,353.138 446.000,353.551 446.000 C 353.964 446.000,354.526 446.270,354.800 446.600 C 355.074 446.930,355.611 447.200,355.993 447.200 C 356.375 447.200,357.026 447.650,357.439 448.200 C 357.852 448.750,358.451 449.200,358.769 449.200 C 359.520 449.200,361.200 450.780,361.200 451.486 C 361.200 451.786,361.920 452.717,362.800 453.554 C 363.680 454.391,364.400 455.399,364.400 455.794 C 364.400 456.189,364.699 456.731,365.065 456.998 C 365.459 457.286,365.627 457.752,365.478 458.142 C 365.131 459.044,364.400 458.972,364.400 458.036 C 364.400 457.615,363.411 456.310,362.202 455.136 C 360.994 453.961,360.004 452.744,360.002 452.431 C 359.999 451.614,358.794 450.400,357.987 450.400 C 357.608 450.400,357.074 450.130,356.800 449.800 C 356.526 449.470,356.007 449.200,355.646 449.200 C 355.285 449.200,354.652 448.750,354.239 448.200 C 353.826 447.650,353.164 447.200,352.768 447.200 C 352.371 447.200,351.936 447.020,351.800 446.800 C 351.664 446.580,350.325 446.400,348.825 446.400 C 346.889 446.400,345.954 446.226,345.600 445.800 C 345.220 445.342,344.181 445.200,341.200 445.200 C 338.219 445.200,337.180 445.342,336.800 445.800 C 336.526 446.130,335.795 446.400,335.175 446.400 C 334.555 446.400,333.936 446.580,333.800 446.800 C 333.664 447.020,333.047 447.200,332.428 447.200 C 331.642 447.200,330.837 447.681,329.752 448.800 C 328.898 449.679,327.939 450.399,327.619 450.400 C 326.822 450.400,324.400 452.808,324.400 453.601 C 324.400 453.954,323.500 455.107,322.400 456.161 C 321.300 457.215,320.398 458.375,320.396 458.739 C 320.394 459.102,319.676 460.030,318.800 460.800 C 317.924 461.570,317.206 462.484,317.204 462.830 C 317.202 463.177,316.750 463.883,316.200 464.400 C 315.650 464.917,315.200 465.632,315.200 465.988 C 315.200 466.345,314.668 467.079,314.017 467.619 C 313.366 468.158,312.826 468.884,312.817 469.230 C 312.808 469.577,312.350 470.283,311.800 470.800 C 311.250 471.317,310.800 472.046,310.800 472.421 C 310.800 472.795,310.530 473.326,310.200 473.600 C 309.870 473.874,309.600 474.436,309.600 474.849 C 309.600 475.262,309.420 475.600,309.200 475.600 C 308.980 475.600,308.800 475.938,308.800 476.351 C 308.800 476.764,308.530 477.326,308.200 477.600 C 307.870 477.874,307.600 478.425,307.600 478.825 C 307.600 479.225,307.420 479.664,307.200 479.800 C 306.980 479.936,306.800 480.377,306.800 480.781 C 306.800 481.184,306.530 481.618,306.200 481.745 C 305.870 481.871,305.600 482.319,305.600 482.738 C 305.600 483.158,305.330 483.726,305.000 484.000 C 304.591 484.339,304.400 485.247,304.400 486.849 C 304.400 488.150,304.221 489.200,304.000 489.200 C 303.746 489.200,303.600 492.259,303.600 497.576 C 303.600 502.729,303.754 506.048,304.000 506.200 C 304.220 506.336,304.400 507.247,304.400 508.224 C 304.400 509.201,304.220 510.000,304.000 510.000 C 303.780 510.000,303.600 509.634,303.600 509.187 C 303.600 508.741,303.330 508.271,303.000 508.145 C 302.534 507.966,302.400 507.178,302.400 504.606 C 302.400 502.154,302.245 501.169,301.800 500.800 C 301.309 500.392,301.200 499.040,301.200 493.338 C 301.200 487.518,301.298 486.337,301.800 486.145 C 302.164 486.005,302.400 485.400,302.400 484.606 C 302.400 483.887,302.670 483.074,303.000 482.800 C 303.330 482.526,303.600 481.964,303.600 481.551 C 303.600 481.138,303.780 480.800,304.000 480.800 C 304.220 480.800,304.400 480.462,304.400 480.049 C 304.400 479.636,304.670 479.074,305.000 478.800 C 305.330 478.526,305.600 477.694,305.600 476.951 C 305.600 476.208,305.780 475.600,306.000 475.600 C 306.220 475.600,306.400 475.262,306.400 474.849 C 306.400 474.436,306.670 473.874,307.000 473.600 C 307.330 473.326,307.600 472.627,307.600 472.047 C 307.600 471.467,308.050 470.507,308.600 469.913 C 309.150 469.320,309.600 468.591,309.600 468.292 C 309.600 467.994,310.140 467.232,310.800 466.600 C 311.460 465.968,312.000 465.190,312.000 464.871 C 312.000 464.552,312.450 463.875,313.000 463.365 C 313.550 462.855,314.000 462.196,314.000 461.900 C 314.000 461.604,314.720 460.659,315.600 459.800 C 316.480 458.941,317.200 457.997,317.200 457.703 C 317.200 457.409,318.100 456.231,319.200 455.085 C 320.299 453.938,321.199 452.685,321.200 452.300 C 321.200 451.888,321.502 451.600,321.933 451.600 C 322.884 451.600,325.600 448.884,325.600 447.933 C 325.600 447.466,325.891 447.200,326.401 447.200 C 326.842 447.200,327.853 446.480,328.648 445.600 C 329.443 444.720,330.422 444.000,330.823 444.000 C 331.224 444.000,331.664 443.820,331.800 443.600 C 331.936 443.380,333.122 443.200,334.436 443.200 C 336.191 443.200,336.886 443.041,337.055 442.600 C 337.241 442.116,338.156 442.000,341.800 442.000 C 345.444 442.000,346.359 442.116,346.545 442.600 M346.328 448.300 C 346.404 448.837,346.735 449.200,347.148 449.200 C 348.142 449.200,348.800 449.999,348.800 451.205 C 348.800 452.789,350.857 454.621,351.902 453.968 C 352.915 453.335,354.000 453.747,354.000 454.764 C 354.000 455.198,354.180 455.664,354.400 455.800 C 354.620 455.936,354.800 456.820,354.800 457.764 C 354.800 459.200,354.996 459.631,356.000 460.400 C 356.660 460.906,357.200 461.642,357.200 462.036 C 357.200 462.430,357.380 462.864,357.600 463.000 C 357.820 463.136,358.000 464.010,358.000 464.942 C 358.000 466.393,358.231 466.863,359.600 468.200 C 360.827 469.398,361.200 470.070,361.200 471.081 L 361.200 472.400 363.800 472.400 C 366.004 472.400,366.402 472.294,366.413 471.700 C 366.426 471.015,367.697 469.200,368.164 469.200 C 368.294 469.200,368.400 471.810,368.400 475.000 C 368.400 478.600,368.248 480.800,368.000 480.800 C 367.780 480.800,367.600 481.408,367.600 482.151 C 367.600 482.894,367.330 483.726,367.000 484.000 C 366.670 484.274,366.400 485.005,366.400 485.625 C 366.400 486.245,366.220 486.864,366.000 487.000 C 365.780 487.136,365.600 487.847,365.600 488.581 C 365.600 489.397,365.367 490.004,365.000 490.145 C 364.622 490.290,364.400 490.902,364.400 491.800 C 364.400 492.698,364.178 493.310,363.800 493.455 C 363.470 493.582,363.200 494.016,363.200 494.419 C 363.200 494.823,363.020 495.264,362.800 495.400 C 362.580 495.536,362.400 496.425,362.400 497.375 C 362.400 498.422,362.164 499.298,361.800 499.600 C 361.470 499.874,361.200 500.414,361.200 500.800 C 361.200 501.186,360.930 501.726,360.600 502.000 C 360.270 502.274,360.000 502.836,360.000 503.249 C 360.000 503.662,359.820 504.000,359.600 504.000 C 359.380 504.000,359.200 504.636,359.200 505.413 C 359.200 506.299,358.977 506.911,358.600 507.055 C 358.270 507.182,358.000 507.645,358.000 508.085 C 358.000 508.525,357.550 509.239,357.000 509.671 C 356.450 510.104,356.000 510.768,356.000 511.148 C 356.000 511.527,355.280 512.541,354.400 513.400 C 353.520 514.259,352.800 515.183,352.800 515.453 C 352.800 516.322,350.063 518.910,349.409 518.659 C 348.732 518.399,348.574 517.600,349.200 517.600 C 349.420 517.600,349.600 517.007,349.600 516.281 C 349.600 515.270,349.973 514.598,351.200 513.400 C 352.263 512.362,352.800 511.485,352.800 510.789 C 352.800 510.187,353.226 509.339,353.800 508.800 C 354.350 508.283,354.800 507.591,354.800 507.262 C 354.800 506.932,355.092 506.341,355.449 505.946 C 356.250 505.061,355.903 504.000,354.813 504.000 C 354.284 504.000,354.000 504.263,354.000 504.751 C 354.000 505.164,353.730 505.726,353.400 506.000 C 353.070 506.274,352.800 506.755,352.800 507.068 C 352.800 507.382,352.350 508.055,351.800 508.565 C 351.250 509.075,350.800 509.764,350.800 510.097 C 350.800 510.430,350.530 510.926,350.200 511.200 C 349.870 511.474,349.600 511.918,349.600 512.188 C 349.600 513.701,345.517 518.800,344.306 518.800 C 343.964 518.800,343.260 519.247,342.742 519.793 C 341.959 520.619,341.421 520.787,339.549 520.793 C 338.043 520.798,337.133 520.999,336.800 521.400 C 336.496 521.766,335.620 522.000,334.551 522.000 C 333.588 522.000,332.800 522.180,332.800 522.400 C 332.800 522.620,332.192 522.800,331.449 522.800 C 330.706 522.800,329.874 523.070,329.600 523.400 C 329.254 523.816,328.336 524.000,326.600 524.000 C 324.864 524.000,323.946 523.816,323.600 523.400 C 323.326 523.070,322.823 522.800,322.483 522.800 C 321.641 522.800,320.400 521.624,320.400 520.827 C 320.400 520.060,319.183 518.932,318.138 518.731 C 316.901 518.493,317.051 513.450,318.300 513.272 C 319.509 513.100,319.452 512.400,318.228 512.400 C 317.524 512.400,317.220 512.151,317.128 511.500 C 317.019 510.737,316.696 510.570,315.000 510.400 C 312.525 510.152,311.867 508.249,313.746 506.771 C 314.296 506.338,314.803 505.584,314.873 505.096 C 314.946 504.584,315.338 504.146,315.800 504.061 C 317.127 503.817,318.000 502.559,318.000 500.892 C 318.000 499.701,318.273 499.088,319.200 498.200 C 319.860 497.568,320.400 496.735,320.400 496.349 C 320.400 495.963,320.580 495.536,320.800 495.400 C 321.362 495.053,321.300 491.860,320.720 491.280 C 320.347 490.907,320.347 490.693,320.720 490.320 C 322.152 488.888,320.676 486.000,318.511 486.000 C 316.612 486.000,316.737 484.614,318.800 482.800 C 319.676 482.030,320.394 481.116,320.396 480.770 C 320.398 480.423,320.850 479.717,321.400 479.200 C 321.950 478.683,322.400 477.943,322.400 477.554 C 322.400 477.165,322.580 476.736,322.800 476.600 C 323.653 476.073,323.262 473.664,322.300 473.528 C 321.176 473.368,320.816 471.217,321.780 470.417 C 322.121 470.134,322.400 469.609,322.400 469.251 C 322.401 468.893,323.121 467.902,324.000 467.048 C 324.880 466.195,325.600 465.160,325.600 464.748 C 325.600 464.337,325.780 464.000,326.000 464.000 C 326.220 464.000,326.400 463.679,326.400 463.286 C 326.400 462.894,327.390 461.595,328.600 460.400 C 329.810 459.205,330.800 457.906,330.800 457.514 C 330.800 457.121,330.980 456.800,331.200 456.800 C 331.420 456.800,331.600 456.474,331.600 456.075 C 331.600 455.676,332.140 454.832,332.800 454.200 C 333.460 453.568,334.000 452.812,334.000 452.520 C 334.000 452.228,334.167 451.677,334.371 451.295 C 334.575 450.913,334.839 450.285,334.958 449.900 C 335.127 449.355,335.620 449.200,337.187 449.200 C 338.294 449.200,339.200 449.020,339.200 448.800 C 339.200 448.580,340.081 448.400,341.157 448.400 C 342.563 448.400,343.182 448.224,343.354 447.774 C 343.749 446.746,346.168 447.173,346.328 448.300 M362.400 486.576 C 362.400 486.919,362.130 487.200,361.800 487.200 C 361.434 487.200,361.200 487.573,361.200 488.157 C 361.200 488.684,360.930 489.218,360.600 489.345 C 360.223 489.489,360.000 490.101,360.000 490.987 C 360.000 491.764,359.820 492.400,359.600 492.400 C 359.380 492.400,359.200 493.120,359.200 494.000 C 359.200 494.880,359.380 495.600,359.600 495.600 C 359.820 495.600,360.000 494.899,360.000 494.043 C 360.000 493.028,360.209 492.405,360.600 492.255 C 360.930 492.129,361.200 491.679,361.200 491.255 C 361.200 490.832,361.470 490.382,361.800 490.255 C 362.167 490.114,362.400 489.508,362.400 488.693 C 362.400 487.960,362.596 487.164,362.835 486.925 C 363.148 486.612,363.148 486.415,362.835 486.222 C 362.593 486.072,362.400 486.229,362.400 486.576 M357.200 499.800 C 357.200 500.350,357.380 500.800,357.600 500.800 C 357.820 500.800,358.000 500.350,358.000 499.800 C 358.000 499.250,357.820 498.800,357.600 498.800 C 357.380 498.800,357.200 499.250,357.200 499.800 M356.000 501.800 C 356.000 502.350,356.180 502.800,356.400 502.800 C 356.620 502.800,356.800 502.350,356.800 501.800 C 356.800 501.250,356.620 500.800,356.400 500.800 C 356.180 500.800,356.000 501.250,356.000 501.800 \",\n    stroke: \"none\",\n    fillRule: \"evenodd\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path1\",\n    d: \"M217.600 10.200 C 217.600 10.750,217.737 11.200,217.904 11.200 C 218.351 11.200,219.194 9.727,218.910 9.443 C 218.324 8.857,217.600 9.275,217.600 10.200 M210.200 15.505 C 209.540 15.845,208.940 16.276,208.867 16.462 C 208.793 16.648,208.410 16.800,208.016 16.800 C 207.621 16.800,207.074 17.070,206.800 17.400 C 206.526 17.730,206.046 18.000,205.734 18.000 C 204.958 18.000,200.400 22.554,200.400 23.330 C 200.400 23.672,200.220 24.064,200.000 24.200 C 199.780 24.336,199.600 25.225,199.600 26.175 C 199.600 27.222,199.364 28.098,199.000 28.400 C 198.670 28.674,198.400 29.217,198.400 29.606 C 198.400 29.996,198.130 30.418,197.800 30.545 C 197.423 30.689,197.200 31.301,197.200 32.187 C 197.200 32.964,197.020 33.600,196.800 33.600 C 196.569 33.600,196.400 34.859,196.400 36.576 C 196.400 38.213,196.580 39.664,196.800 39.800 C 197.020 39.936,197.200 40.555,197.200 41.175 C 197.200 41.795,197.487 42.540,197.838 42.832 C 198.310 43.224,198.413 43.757,198.233 44.881 C 198.029 46.160,198.103 46.400,198.700 46.400 C 199.091 46.400,199.746 46.847,200.155 47.392 C 200.565 47.938,201.058 48.288,201.250 48.169 C 201.810 47.823,201.656 46.724,200.937 45.930 C 200.407 45.345,200.361 45.003,200.710 44.238 C 201.087 43.411,201.033 43.250,200.320 43.063 C 199.589 42.872,199.516 42.616,199.685 40.854 C 199.848 39.160,199.766 38.832,199.138 38.668 C 198.170 38.415,198.060 34.380,199.000 33.600 C 199.364 33.298,199.600 32.422,199.600 31.375 C 199.600 30.425,199.780 29.536,200.000 29.400 C 200.220 29.264,200.400 28.645,200.400 28.025 C 200.400 27.405,200.670 26.674,201.000 26.400 C 201.330 26.126,201.600 25.640,201.600 25.320 C 201.600 24.527,207.324 18.800,208.117 18.800 C 208.467 18.800,208.864 18.620,209.000 18.400 C 209.136 18.180,209.602 18.000,210.036 18.000 C 210.470 18.000,210.929 17.730,211.055 17.400 C 211.197 17.030,211.805 16.800,212.643 16.800 C 214.169 16.800,214.341 16.433,213.269 15.462 C 212.395 14.672,211.797 14.680,210.200 15.505 M221.600 18.025 C 221.600 19.239,221.614 19.247,223.305 18.993 C 225.155 18.716,230.000 22.675,230.000 24.464 C 230.000 24.869,230.180 25.200,230.400 25.200 C 230.620 25.200,230.800 25.836,230.800 26.613 C 230.800 27.499,231.023 28.111,231.400 28.255 C 231.730 28.382,232.000 28.897,232.000 29.400 C 232.000 29.903,232.270 30.418,232.600 30.545 C 233.060 30.721,233.200 31.479,233.200 33.787 C 233.200 35.529,233.369 36.800,233.600 36.800 C 233.833 36.800,234.000 38.133,234.000 40.000 C 234.000 41.867,233.833 43.200,233.600 43.200 C 233.380 43.200,233.200 43.539,233.200 43.953 C 233.200 44.368,232.480 45.357,231.600 46.152 C 230.720 46.947,230.000 47.866,230.000 48.194 C 230.000 49.054,228.740 50.400,227.935 50.400 C 226.967 50.400,226.612 51.153,227.432 51.468 C 227.851 51.628,228.304 51.472,228.602 51.065 C 228.869 50.699,229.445 50.400,229.882 50.400 C 230.792 50.400,232.000 49.224,232.000 48.338 C 232.000 48.009,232.450 47.317,233.000 46.800 C 233.665 46.175,234.000 45.429,234.000 44.573 C 234.000 43.798,234.239 43.194,234.600 43.055 C 234.930 42.929,235.200 42.443,235.200 41.975 C 235.200 41.491,235.512 41.044,235.924 40.936 C 236.986 40.658,236.964 34.939,235.900 34.659 C 235.365 34.518,235.200 34.053,235.200 32.686 C 235.200 31.585,234.970 30.707,234.600 30.400 C 234.270 30.126,234.000 29.564,234.000 29.151 C 234.000 28.738,233.820 28.400,233.600 28.400 C 233.380 28.400,233.200 27.969,233.200 27.443 C 233.200 26.916,232.930 26.382,232.600 26.255 C 232.270 26.129,232.000 25.673,232.000 25.242 C 232.000 24.811,231.550 24.104,231.000 23.671 C 230.450 23.239,230.000 22.545,230.000 22.130 C 230.000 21.212,227.531 18.800,226.592 18.800 C 226.220 18.800,225.561 18.350,225.129 17.800 C 223.885 16.219,221.600 16.364,221.600 18.025 M220.267 19.467 C 219.806 19.927,219.975 20.400,220.600 20.400 C 220.930 20.400,221.200 20.130,221.200 19.800 C 221.200 19.175,220.727 19.006,220.267 19.467 M222.600 48.800 C 222.464 49.020,222.023 49.200,221.619 49.200 C 219.972 49.200,219.777 55.676,221.380 57.181 C 222.513 58.245,223.481 58.052,223.669 56.724 C 223.776 55.971,224.082 55.777,225.324 55.674 C 227.107 55.528,227.410 53.915,225.700 53.672 C 224.754 53.538,224.393 51.899,225.200 51.400 C 225.838 51.006,225.664 49.782,224.869 49.062 C 224.048 48.320,222.974 48.196,222.600 48.800 M230.933 52.231 C 230.778 52.634,231.145 53.278,231.945 54.009 C 232.635 54.639,233.200 55.525,233.200 55.977 C 233.200 56.430,233.380 56.800,233.600 56.800 C 233.820 56.800,234.000 56.361,234.000 55.824 C 234.000 55.287,233.820 54.736,233.600 54.600 C 233.380 54.464,233.200 53.733,233.200 52.976 C 233.200 51.467,231.447 50.891,230.933 52.231 M214.880 53.399 C 214.396 53.902,214.000 54.592,214.000 54.933 C 214.000 55.274,213.820 55.664,213.600 55.800 C 213.380 55.936,213.200 56.315,213.200 56.643 C 213.200 56.970,212.750 57.655,212.200 58.165 C 210.873 59.395,210.855 60.800,212.167 60.800 C 212.698 60.800,213.216 60.575,213.317 60.300 C 213.463 59.900,213.606 59.900,214.030 60.300 C 214.644 60.879,217.200 60.981,217.200 60.427 C 217.200 60.221,217.695 59.996,218.300 59.927 C 219.616 59.775,220.094 57.708,219.020 56.817 C 218.679 56.534,218.400 56.004,218.400 55.639 C 218.400 55.274,217.806 54.416,217.080 53.731 L 215.759 52.485 214.880 53.399 M197.366 53.345 C 196.702 55.074,197.396 58.600,198.400 58.600 C 199.327 58.600,199.409 58.444,199.522 56.456 C 199.672 53.831,198.068 51.516,197.366 53.345 M217.200 58.400 C 217.200 59.962,217.167 60.000,215.800 60.000 C 214.198 60.000,213.857 58.862,215.062 57.531 C 216.262 56.206,217.200 56.587,217.200 58.400 M225.462 57.531 C 225.075 57.959,224.800 58.937,224.800 59.883 C 224.800 60.834,224.553 61.707,224.200 62.000 C 223.100 62.913,226.292 67.200,228.071 67.200 C 228.425 67.200,228.822 67.481,228.954 67.825 C 229.086 68.169,229.384 68.333,229.616 68.190 C 229.875 68.030,229.645 67.536,229.019 66.910 C 228.459 66.350,228.000 65.550,228.000 65.133 C 228.000 64.716,227.730 64.271,227.400 64.145 C 226.520 63.807,226.565 60.176,227.454 59.834 C 228.060 59.602,228.060 59.530,227.454 58.860 C 227.095 58.462,226.800 57.836,226.800 57.469 C 226.800 56.596,226.287 56.620,225.462 57.531 M220.602 61.197 C 220.249 61.767,220.775 63.263,221.229 62.982 C 221.710 62.685,221.709 61.315,221.228 61.017 C 221.023 60.891,220.741 60.971,220.602 61.197 M220.555 64.572 C 220.386 65.012,219.783 65.200,218.537 65.200 C 216.624 65.200,214.000 67.131,214.000 68.540 C 214.000 68.937,213.676 69.200,213.187 69.200 C 212.741 69.200,212.277 69.515,212.158 69.900 C 212.039 70.285,211.775 70.913,211.571 71.295 C 211.056 72.259,211.099 72.402,211.900 72.388 C 212.904 72.371,215.200 70.158,215.200 69.206 C 215.200 68.557,215.464 68.400,216.551 68.400 C 217.294 68.400,218.126 68.130,218.400 67.800 C 218.674 67.470,219.236 67.200,219.649 67.200 C 220.178 67.200,220.400 66.912,220.400 66.227 C 220.400 65.485,220.641 65.223,221.412 65.127 C 222.695 64.966,222.891 64.241,221.698 64.072 C 221.157 63.995,220.700 64.195,220.555 64.572 M233.200 70.338 C 233.200 71.034,234.347 72.400,234.931 72.400 C 235.500 72.400,235.165 70.662,234.500 70.157 C 233.537 69.425,233.200 69.472,233.200 70.338 M219.400 70.800 C 219.264 71.020,218.645 71.200,218.025 71.200 C 217.405 71.200,216.674 71.470,216.400 71.800 C 216.126 72.130,215.558 72.400,215.138 72.400 C 213.805 72.400,213.809 73.564,215.147 74.945 C 215.836 75.656,216.400 76.545,216.400 76.919 C 216.400 78.086,220.302 77.892,220.472 76.716 C 220.553 76.157,220.967 75.748,221.600 75.601 C 222.413 75.412,222.623 75.091,222.724 73.884 C 222.820 72.742,223.022 72.400,223.601 72.400 C 224.708 72.400,224.867 71.835,223.975 71.071 C 223.110 70.331,219.811 70.135,219.400 70.800 M161.745 159.000 C 161.618 159.330,161.209 159.600,160.836 159.600 C 159.987 159.600,157.600 162.017,157.600 162.876 C 157.600 163.227,157.330 163.618,157.000 163.745 C 156.541 163.921,156.400 164.674,156.400 166.945 C 156.400 169.215,156.541 169.969,157.000 170.145 C 157.330 170.271,157.600 170.713,157.600 171.125 C 157.600 172.298,158.904 173.200,160.600 173.200 C 161.462 173.200,162.455 173.488,162.860 173.854 C 163.530 174.460,163.602 174.460,163.834 173.854 C 163.973 173.495,164.377 173.200,164.733 173.200 C 166.492 173.200,171.200 167.520,171.200 165.398 C 171.200 161.287,162.997 155.736,161.745 159.000 M242.545 159.000 C 242.418 159.330,241.996 159.600,241.606 159.600 C 241.217 159.600,240.674 159.870,240.400 160.200 C 240.126 160.530,239.656 160.800,239.356 160.800 C 238.538 160.800,237.200 162.082,237.200 162.865 C 237.200 163.243,237.020 163.664,236.800 163.800 C 236.580 163.936,236.400 164.937,236.400 166.024 C 236.400 167.111,236.580 168.000,236.800 168.000 C 237.020 168.000,237.200 168.322,237.200 168.715 C 237.200 169.599,240.789 173.200,241.671 173.200 C 242.025 173.200,242.418 173.470,242.545 173.800 C 242.707 174.223,243.368 174.400,244.787 174.400 C 245.894 174.400,246.800 174.580,246.800 174.800 C 246.800 175.020,247.250 175.200,247.800 175.200 C 248.350 175.200,248.800 175.020,248.800 174.800 C 248.800 174.580,249.070 174.400,249.400 174.400 C 249.730 174.400,250.000 174.580,250.000 174.800 C 250.000 175.020,250.180 175.200,250.400 175.200 C 250.620 175.200,250.800 174.834,250.800 174.387 C 250.800 173.941,251.070 173.471,251.400 173.345 C 251.730 173.218,252.000 172.703,252.000 172.200 C 252.000 171.697,252.270 171.182,252.600 171.055 C 253.063 170.878,253.200 170.105,253.200 167.662 C 253.200 165.337,253.041 164.366,252.600 164.000 C 252.270 163.726,252.000 163.192,252.000 162.813 C 252.000 161.957,250.767 160.800,249.856 160.800 C 249.481 160.800,249.071 160.530,248.945 160.200 C 248.805 159.836,248.200 159.600,247.406 159.600 C 246.687 159.600,245.874 159.330,245.600 159.000 C 245.326 158.670,244.578 158.400,243.938 158.400 C 243.273 158.400,242.676 158.657,242.545 159.000 M186.945 184.200 C 186.805 184.564,186.200 184.800,185.406 184.800 C 184.687 184.800,183.874 185.070,183.600 185.400 C 183.326 185.730,182.764 186.000,182.351 186.000 C 181.938 186.000,181.600 186.180,181.600 186.400 C 181.600 186.620,181.278 186.800,180.885 186.800 C 180.079 186.800,176.400 190.354,176.400 191.133 C 176.400 191.411,175.950 192.055,175.400 192.565 C 174.353 193.535,173.853 198.400,174.800 198.400 C 175.020 198.400,175.200 198.738,175.200 199.151 C 175.200 199.564,175.470 200.126,175.800 200.400 C 176.130 200.674,176.402 201.191,176.405 201.549 C 176.407 201.907,177.307 203.088,178.405 204.174 C 179.502 205.260,180.400 206.455,180.400 206.831 C 180.400 207.207,180.670 207.618,181.000 207.745 C 181.330 207.871,181.600 208.319,181.600 208.738 C 181.600 209.158,181.870 209.726,182.200 210.000 C 182.530 210.274,182.800 210.755,182.800 211.069 C 182.800 211.829,185.324 214.400,186.071 214.400 C 186.395 214.400,187.083 214.850,187.600 215.400 C 188.117 215.950,188.868 216.400,189.270 216.400 C 189.671 216.400,190.000 216.580,190.000 216.800 C 190.000 217.020,190.338 217.200,190.751 217.200 C 191.164 217.200,191.726 217.470,192.000 217.800 C 192.274 218.130,192.814 218.400,193.200 218.400 C 193.586 218.400,194.126 218.670,194.400 219.000 C 194.674 219.330,195.236 219.600,195.649 219.600 C 196.126 219.600,196.400 219.884,196.400 220.376 C 196.400 220.803,196.580 221.264,196.800 221.400 C 197.359 221.745,197.301 224.139,196.720 224.720 C 196.347 225.093,196.347 225.307,196.720 225.680 C 196.984 225.944,197.200 226.940,197.200 227.893 C 197.200 229.064,197.394 229.700,197.800 229.855 C 198.172 229.998,198.400 230.607,198.400 231.455 C 198.400 232.304,198.628 232.913,199.000 233.055 C 200.322 233.563,199.753 236.488,198.000 238.200 C 197.120 239.059,196.400 240.037,196.400 240.372 C 196.400 241.213,190.780 246.800,189.934 246.800 C 189.556 246.800,189.136 246.980,189.000 247.200 C 188.864 247.420,187.795 247.600,186.625 247.600 C 185.222 247.600,184.328 247.804,184.000 248.200 C 183.627 248.650,182.624 248.800,179.994 248.800 C 177.244 248.800,176.436 248.670,176.255 248.200 C 176.086 247.759,175.391 247.600,173.636 247.600 C 172.322 247.600,171.136 247.420,171.000 247.200 C 170.700 246.715,169.200 246.663,169.200 247.138 C 169.200 247.679,170.605 248.800,171.283 248.800 C 171.623 248.800,172.126 249.070,172.400 249.400 C 172.701 249.763,173.577 250.000,174.616 250.000 C 175.625 250.000,176.409 250.206,176.517 250.500 C 176.663 250.900,176.806 250.900,177.230 250.500 C 177.858 249.907,181.600 249.822,181.600 250.400 C 181.600 250.620,182.171 250.800,182.869 250.800 C 183.566 250.800,184.440 251.075,184.811 251.410 C 185.415 251.957,185.538 251.957,185.992 251.410 C 186.270 251.075,187.005 250.800,187.625 250.800 C 188.245 250.800,188.864 250.620,189.000 250.400 C 189.136 250.180,189.755 250.000,190.375 250.000 C 190.995 250.000,191.726 249.730,192.000 249.400 C 192.360 248.966,193.314 248.800,195.449 248.800 C 197.150 248.800,198.400 248.631,198.400 248.400 C 198.400 248.180,198.738 248.000,199.151 248.000 C 199.564 248.000,200.126 247.730,200.400 247.400 C 200.674 247.070,201.191 246.797,201.549 246.793 C 201.907 246.789,202.624 246.339,203.142 245.793 C 203.704 245.201,204.532 244.800,205.193 244.800 C 205.803 244.800,206.526 244.530,206.800 244.200 C 207.074 243.870,207.617 243.600,208.006 243.600 C 208.396 243.600,208.818 243.870,208.945 244.200 C 209.071 244.530,209.530 244.800,209.964 244.800 C 210.398 244.800,210.864 244.980,211.000 245.200 C 211.136 245.420,212.025 245.600,212.975 245.600 C 214.022 245.600,214.898 245.836,215.200 246.200 C 215.540 246.609,216.449 246.800,218.062 246.800 C 219.793 246.800,220.487 246.960,220.655 247.400 C 220.847 247.898,221.956 248.000,227.194 248.000 C 232.313 248.000,233.596 247.887,234.000 247.400 C 234.274 247.070,235.087 246.800,235.806 246.800 C 236.600 246.800,237.205 246.564,237.345 246.200 C 237.514 245.759,238.209 245.600,239.964 245.600 C 241.278 245.600,242.464 245.420,242.600 245.200 C 242.736 244.980,243.338 244.800,243.937 244.800 C 244.729 244.800,245.623 244.197,247.200 242.600 C 248.395 241.390,249.694 240.400,250.086 240.400 C 250.518 240.400,250.800 240.103,250.800 239.649 C 250.800 239.236,251.070 238.674,251.400 238.400 C 251.730 238.126,252.000 237.564,252.000 237.151 C 252.000 236.348,251.408 236.140,251.000 236.800 C 250.864 237.020,250.425 237.200,250.025 237.200 C 249.625 237.200,249.074 237.470,248.800 237.800 C 248.526 238.130,247.964 238.400,247.551 238.400 C 247.138 238.400,246.800 238.580,246.800 238.800 C 246.800 239.020,246.462 239.200,246.049 239.200 C 245.636 239.200,245.074 239.470,244.800 239.800 C 244.526 240.130,243.986 240.400,243.600 240.400 C 243.214 240.400,242.674 240.670,242.400 241.000 C 242.126 241.330,241.395 241.600,240.775 241.600 C 240.155 241.600,239.536 241.780,239.400 242.000 C 239.264 242.220,238.078 242.400,236.764 242.400 C 235.009 242.400,234.314 242.559,234.145 243.000 C 233.977 243.437,233.289 243.600,231.606 243.600 C 230.042 243.600,229.137 243.406,228.800 243.000 C 228.423 242.545,227.400 242.400,224.575 242.400 C 222.521 242.400,220.736 242.220,220.600 242.000 C 220.464 241.780,219.728 241.600,218.964 241.600 C 218.098 241.600,217.488 241.374,217.345 241.000 C 217.184 240.582,216.533 240.400,215.200 240.400 C 213.867 240.400,213.216 240.218,213.055 239.800 C 212.929 239.470,212.491 239.200,212.082 239.200 C 211.674 239.200,210.917 238.750,210.400 238.200 C 209.883 237.650,209.144 237.200,208.758 237.200 C 208.334 237.200,208.005 236.843,207.928 236.300 C 207.846 235.722,207.478 235.354,206.900 235.272 C 206.346 235.193,206.000 234.867,206.000 234.421 C 206.000 234.023,205.730 233.474,205.400 233.200 C 205.070 232.926,204.800 232.386,204.800 232.000 C 204.800 231.614,204.530 231.074,204.200 230.800 C 203.834 230.496,203.600 229.620,203.600 228.551 C 203.600 227.588,203.420 226.800,203.200 226.800 C 202.980 226.800,202.800 226.462,202.800 226.049 C 202.800 225.636,202.530 225.074,202.200 224.800 C 201.870 224.526,201.600 223.986,201.600 223.600 C 201.600 223.214,201.330 222.674,201.000 222.400 C 200.670 222.126,200.400 221.564,200.400 221.151 C 200.400 220.738,200.220 220.400,200.000 220.400 C 199.780 220.400,199.600 219.798,199.600 219.062 C 199.600 217.631,200.591 216.400,201.744 216.400 C 202.119 216.400,202.529 216.130,202.655 215.800 C 202.782 215.470,203.216 215.200,203.619 215.200 C 204.023 215.200,204.464 215.020,204.600 214.800 C 204.736 214.580,205.161 214.400,205.545 214.400 C 206.406 214.400,208.800 211.994,208.800 211.130 C 208.800 210.782,209.060 210.283,209.377 210.019 C 209.694 209.756,210.009 208.969,210.077 208.270 C 210.169 207.316,210.418 206.969,211.075 206.875 C 211.614 206.799,211.999 206.420,212.075 205.892 C 212.153 205.359,212.579 204.944,213.200 204.799 C 214.462 204.504,215.033 193.818,213.811 193.349 C 213.439 193.206,213.200 192.614,213.200 191.836 C 213.200 190.413,211.104 188.000,209.868 188.000 C 209.487 188.000,209.071 187.730,208.945 187.400 C 208.818 187.070,208.284 186.800,207.757 186.800 C 207.231 186.800,206.800 186.620,206.800 186.400 C 206.800 186.180,206.164 186.000,205.387 186.000 C 204.501 186.000,203.889 185.777,203.745 185.400 C 203.577 184.963,202.889 184.800,201.206 184.800 C 199.642 184.800,198.737 184.606,198.400 184.200 C 198.003 183.721,196.818 183.600,192.538 183.600 C 188.140 183.600,187.133 183.708,186.945 184.200 M188.800 194.800 C 188.800 196.362,188.767 196.400,187.400 196.400 C 185.712 196.400,185.653 196.021,187.100 194.473 C 188.581 192.887,188.800 192.929,188.800 194.800 M264.552 198.981 C 264.209 199.876,264.734 200.400,265.975 200.400 C 266.595 200.400,267.326 200.670,267.600 201.000 C 267.874 201.330,268.414 201.600,268.800 201.600 C 269.186 201.600,269.726 201.870,270.000 202.200 C 270.274 202.530,270.793 202.800,271.154 202.800 C 271.515 202.800,272.148 203.250,272.561 203.800 C 272.974 204.350,273.625 204.800,274.007 204.800 C 274.389 204.800,274.934 205.079,275.216 205.420 C 276.268 206.687,278.979 206.024,279.128 204.463 C 279.270 202.984,278.331 201.600,277.187 201.600 C 276.808 201.600,276.274 201.330,276.000 201.000 C 275.338 200.203,274.529 200.241,274.053 201.092 C 273.686 201.747,273.626 201.747,272.901 201.092 C 272.481 200.711,271.836 200.400,271.469 200.400 C 271.101 200.400,270.800 200.220,270.800 200.000 C 270.800 199.780,270.462 199.600,270.049 199.600 C 269.636 199.600,269.074 199.330,268.800 199.000 C 268.133 198.197,264.859 198.182,264.552 198.981 M273.862 210.731 C 273.016 211.667,273.026 211.997,273.900 212.011 C 274.285 212.017,275.125 212.557,275.767 213.211 C 277.688 215.169,282.255 214.683,281.457 212.605 C 281.330 212.272,280.870 212.000,280.436 212.000 C 280.002 212.000,279.536 211.820,279.400 211.600 C 279.264 211.380,278.528 211.200,277.764 211.200 C 276.898 211.200,276.288 210.974,276.145 210.600 C 275.829 209.779,274.663 209.846,273.862 210.731 M231.600 258.200 C 231.083 258.750,230.326 259.200,229.918 259.200 C 229.509 259.200,229.071 259.470,228.945 259.800 C 228.818 260.130,228.396 260.400,228.006 260.400 C 227.617 260.400,227.074 260.670,226.800 261.000 C 226.461 261.409,225.553 261.600,223.951 261.600 C 222.650 261.600,221.600 261.779,221.600 262.000 C 221.600 262.220,221.150 262.400,220.600 262.400 C 219.978 262.400,219.600 262.627,219.600 263.000 C 219.600 263.336,219.957 263.600,220.413 263.600 C 220.859 263.600,221.329 263.330,221.455 263.000 C 221.641 262.516,222.558 262.400,226.219 262.400 C 228.810 262.400,230.859 262.229,231.000 262.000 C 231.136 261.780,231.687 261.600,232.224 261.600 C 232.761 261.600,233.200 261.780,233.200 262.000 C 233.200 262.220,233.566 262.400,234.013 262.400 C 235.051 262.400,235.470 263.476,234.830 264.500 C 234.475 265.070,234.457 265.417,234.767 265.727 C 235.419 266.379,235.300 269.419,234.600 270.000 C 234.270 270.274,234.000 271.005,234.000 271.625 C 234.000 272.245,233.820 272.864,233.600 273.000 C 232.704 273.554,233.142 277.696,234.216 278.816 C 235.114 279.754,235.160 279.935,234.616 280.387 C 234.277 280.668,234.000 281.221,234.000 281.616 C 234.000 282.010,233.788 282.404,233.529 282.490 C 232.825 282.725,233.530 283.600,234.424 283.600 C 235.363 283.600,235.476 284.873,234.600 285.600 C 234.262 285.881,234.000 286.753,234.000 287.600 C 234.000 288.447,234.262 289.319,234.600 289.600 C 235.414 290.275,235.396 293.339,234.575 294.021 C 234.008 294.492,234.008 294.573,234.575 294.890 C 234.919 295.082,235.200 295.569,235.200 295.971 C 235.200 296.373,235.470 296.926,235.800 297.200 C 236.130 297.474,236.400 297.948,236.400 298.253 C 236.400 299.055,239.659 302.400,240.441 302.400 C 240.805 302.400,241.326 302.670,241.600 303.000 C 242.992 304.677,248.800 303.288,248.800 301.279 C 248.800 300.842,249.070 300.382,249.400 300.255 C 249.853 300.081,250.000 299.349,250.000 297.262 C 250.000 295.293,249.827 294.355,249.400 294.000 C 248.941 293.619,248.800 292.575,248.800 289.551 C 248.800 287.184,248.640 285.600,248.400 285.600 C 248.180 285.600,248.000 284.979,248.000 284.220 C 248.000 283.328,247.755 282.703,247.308 282.453 C 246.653 282.086,246.653 282.026,247.308 281.301 C 248.159 280.361,248.192 279.649,247.400 279.345 C 247.036 279.205,246.800 278.600,246.800 277.806 C 246.800 277.087,246.530 276.274,246.200 276.000 C 245.834 275.696,245.600 274.820,245.600 273.751 C 245.600 272.788,245.420 272.000,245.200 272.000 C 244.980 272.000,244.800 271.409,244.800 270.686 C 244.800 269.624,244.379 268.957,242.600 267.200 C 239.979 264.612,239.607 262.697,241.400 261.035 C 242.113 260.374,242.400 259.691,242.400 258.654 L 242.400 257.200 237.470 257.200 C 232.728 257.200,232.504 257.238,231.600 258.200 M176.070 263.326 C 175.591 263.835,175.200 264.555,175.200 264.926 C 175.200 265.782,174.080 265.796,173.146 264.951 C 172.301 264.186,171.200 264.481,171.200 265.472 C 171.200 265.856,170.471 266.912,169.581 267.820 C 168.158 269.269,168.037 269.532,168.581 269.984 C 169.027 270.354,169.200 271.246,169.200 273.169 C 169.200 274.763,169.400 276.040,169.697 276.337 C 170.092 276.732,170.088 276.898,169.678 277.152 C 169.314 277.377,169.197 278.340,169.281 280.435 L 169.400 283.400 171.200 283.400 C 172.762 283.400,173.017 283.281,173.128 282.500 C 173.251 281.634,174.400 281.182,174.400 282.000 C 174.400 282.220,174.729 282.400,175.130 282.400 C 175.532 282.400,176.283 282.850,176.800 283.400 C 179.481 286.254,182.800 283.546,182.800 278.505 C 182.800 276.713,182.980 275.136,183.200 275.000 C 183.420 274.864,183.600 273.795,183.600 272.625 C 183.600 271.222,183.804 270.328,184.200 270.000 C 184.530 269.726,184.800 269.186,184.800 268.800 C 184.800 268.414,184.530 267.874,184.200 267.600 C 183.870 267.326,183.600 266.612,183.600 266.013 C 183.600 264.681,182.487 263.600,181.117 263.600 C 180.557 263.600,179.874 263.330,179.600 263.000 C 178.856 262.103,177.063 262.269,176.070 263.326 M198.400 267.757 C 198.400 268.284,198.130 268.818,197.800 268.945 C 197.470 269.071,197.200 269.530,197.200 269.964 C 197.200 270.398,197.020 270.864,196.800 271.000 C 196.580 271.136,196.400 271.740,196.400 272.342 C 196.400 273.093,195.897 273.929,194.800 275.000 C 193.920 275.859,193.200 276.849,193.200 277.200 C 193.200 277.551,192.474 278.547,191.586 279.414 C 190.197 280.770,190.058 281.053,190.590 281.442 C 191.141 281.845,191.143 281.949,190.604 282.396 C 189.828 283.040,189.826 284.248,190.600 284.545 C 191.069 284.725,191.200 285.524,191.200 288.200 C 191.200 292.482,191.694 292.860,194.147 290.452 C 195.431 289.192,195.947 288.907,196.301 289.261 C 196.655 289.615,196.923 289.596,197.422 289.182 C 197.983 288.717,198.133 288.738,198.463 289.327 C 199.025 290.331,199.600 289.760,199.600 288.200 C 199.600 287.456,199.780 286.736,200.000 286.600 C 200.220 286.464,200.400 284.828,200.400 282.964 C 200.400 280.320,200.532 279.524,201.000 279.345 C 201.330 279.218,201.600 278.796,201.600 278.406 C 201.600 278.017,201.870 277.474,202.200 277.200 C 202.530 276.926,202.800 276.400,202.800 276.031 C 202.800 275.662,203.023 275.137,203.297 274.863 C 203.692 274.468,203.673 274.292,203.200 274.000 C 202.727 273.708,202.708 273.532,203.103 273.137 C 203.697 272.543,203.766 270.150,203.200 269.800 C 202.980 269.664,202.800 269.243,202.800 268.865 C 202.800 267.804,201.340 266.800,199.795 266.800 C 198.590 266.800,198.400 266.931,198.400 267.757 M174.319 277.700 C 174.131 281.646,172.400 281.761,172.400 277.828 C 172.400 275.278,172.430 275.200,173.419 275.200 C 174.415 275.200,174.435 275.256,174.319 277.700 M186.000 279.400 C 186.000 280.022,185.773 280.400,185.400 280.400 C 185.054 280.400,184.800 280.762,184.800 281.256 C 184.800 281.727,184.501 282.331,184.135 282.598 C 183.202 283.280,183.738 284.493,184.898 284.328 C 185.668 284.219,185.818 283.923,185.922 282.300 C 185.989 281.255,186.214 280.400,186.422 280.400 C 186.630 280.400,186.800 279.950,186.800 279.400 C 186.800 278.850,186.620 278.400,186.400 278.400 C 186.180 278.400,186.000 278.850,186.000 279.400 M184.408 286.592 C 183.064 288.022,183.616 289.301,185.010 287.990 C 185.555 287.479,186.000 286.833,186.000 286.554 C 186.000 285.606,185.319 285.622,184.408 286.592 M337.055 442.600 C 336.886 443.041,336.191 443.200,334.436 443.200 C 333.122 443.200,331.936 443.380,331.800 443.600 C 331.664 443.820,331.224 444.000,330.823 444.000 C 330.422 444.000,329.443 444.720,328.648 445.600 C 327.853 446.480,326.842 447.200,326.401 447.200 C 325.891 447.200,325.600 447.466,325.600 447.933 C 325.600 448.884,322.884 451.600,321.933 451.600 C 321.502 451.600,321.200 451.888,321.200 452.300 C 321.199 452.685,320.299 453.938,319.200 455.085 C 318.100 456.231,317.200 457.409,317.200 457.703 C 317.200 457.997,316.480 458.941,315.600 459.800 C 314.720 460.659,314.000 461.604,314.000 461.900 C 314.000 462.196,313.550 462.855,313.000 463.365 C 312.450 463.875,312.000 464.552,312.000 464.871 C 312.000 465.190,311.460 465.968,310.800 466.600 C 310.140 467.232,309.600 467.994,309.600 468.292 C 309.600 468.591,309.150 469.320,308.600 469.913 C 308.050 470.507,307.600 471.467,307.600 472.047 C 307.600 472.627,307.330 473.326,307.000 473.600 C 306.670 473.874,306.400 474.436,306.400 474.849 C 306.400 475.262,306.220 475.600,306.000 475.600 C 305.780 475.600,305.600 476.208,305.600 476.951 C 305.600 477.694,305.330 478.526,305.000 478.800 C 304.670 479.074,304.400 479.636,304.400 480.049 C 304.400 480.462,304.220 480.800,304.000 480.800 C 303.780 480.800,303.600 481.138,303.600 481.551 C 303.600 481.964,303.330 482.526,303.000 482.800 C 302.670 483.074,302.400 483.887,302.400 484.606 C 302.400 485.400,302.164 486.005,301.800 486.145 C 301.298 486.337,301.200 487.518,301.200 493.338 C 301.200 499.040,301.309 500.392,301.800 500.800 C 302.245 501.169,302.400 502.154,302.400 504.606 C 302.400 507.178,302.534 507.966,303.000 508.145 C 303.330 508.271,303.600 508.741,303.600 509.187 C 303.600 509.634,303.780 510.000,304.000 510.000 C 304.220 510.000,304.400 509.201,304.400 508.224 C 304.400 507.247,304.220 506.336,304.000 506.200 C 303.754 506.048,303.600 502.729,303.600 497.576 C 303.600 492.259,303.746 489.200,304.000 489.200 C 304.221 489.200,304.400 488.150,304.400 486.849 C 304.400 485.247,304.591 484.339,305.000 484.000 C 305.330 483.726,305.600 483.158,305.600 482.738 C 305.600 482.319,305.870 481.871,306.200 481.745 C 306.530 481.618,306.800 481.184,306.800 480.781 C 306.800 480.377,306.980 479.936,307.200 479.800 C 307.420 479.664,307.600 479.225,307.600 478.825 C 307.600 478.425,307.870 477.874,308.200 477.600 C 308.530 477.326,308.800 476.764,308.800 476.351 C 308.800 475.938,308.980 475.600,309.200 475.600 C 309.420 475.600,309.600 475.262,309.600 474.849 C 309.600 474.436,309.870 473.874,310.200 473.600 C 310.530 473.326,310.800 472.795,310.800 472.421 C 310.800 472.046,311.250 471.317,311.800 470.800 C 312.350 470.283,312.808 469.577,312.817 469.230 C 312.826 468.884,313.366 468.158,314.017 467.619 C 314.668 467.079,315.200 466.345,315.200 465.988 C 315.200 465.632,315.650 464.917,316.200 464.400 C 316.750 463.883,317.202 463.177,317.204 462.830 C 317.206 462.484,317.924 461.570,318.800 460.800 C 319.676 460.030,320.394 459.102,320.396 458.739 C 320.398 458.375,321.300 457.215,322.400 456.161 C 323.500 455.107,324.400 453.954,324.400 453.601 C 324.400 452.808,326.822 450.400,327.619 450.400 C 327.939 450.399,328.898 449.679,329.752 448.800 C 330.837 447.681,331.642 447.200,332.428 447.200 C 333.047 447.200,333.664 447.020,333.800 446.800 C 333.936 446.580,334.555 446.400,335.175 446.400 C 335.795 446.400,336.526 446.130,336.800 445.800 C 337.180 445.342,338.219 445.200,341.200 445.200 C 344.181 445.200,345.220 445.342,345.600 445.800 C 345.954 446.226,346.889 446.400,348.825 446.400 C 350.325 446.400,351.664 446.580,351.800 446.800 C 351.936 447.020,352.371 447.200,352.768 447.200 C 353.164 447.200,353.826 447.650,354.239 448.200 C 354.652 448.750,355.285 449.200,355.646 449.200 C 356.007 449.200,356.526 449.470,356.800 449.800 C 357.074 450.130,357.608 450.400,357.987 450.400 C 358.794 450.400,359.999 451.614,360.002 452.431 C 360.004 452.744,360.994 453.961,362.202 455.136 C 363.411 456.310,364.400 457.615,364.400 458.036 C 364.400 458.972,365.131 459.044,365.478 458.142 C 365.627 457.752,365.459 457.286,365.065 456.998 C 364.699 456.731,364.400 456.189,364.400 455.794 C 364.400 455.399,363.680 454.391,362.800 453.554 C 361.920 452.717,361.200 451.786,361.200 451.486 C 361.200 450.780,359.520 449.200,358.769 449.200 C 358.451 449.200,357.852 448.750,357.439 448.200 C 357.026 447.650,356.375 447.200,355.993 447.200 C 355.611 447.200,355.074 446.930,354.800 446.600 C 354.526 446.270,353.964 446.000,353.551 446.000 C 353.138 446.000,352.800 445.820,352.800 445.600 C 352.800 445.380,352.369 445.200,351.843 445.200 C 351.316 445.200,350.782 444.930,350.655 444.600 C 350.529 444.270,350.070 444.000,349.636 444.000 C 349.202 444.000,348.736 443.820,348.600 443.600 C 348.464 443.380,347.998 443.200,347.564 443.200 C 347.130 443.200,346.671 442.930,346.545 442.600 C 346.359 442.116,345.444 442.000,341.800 442.000 C 338.156 442.000,337.241 442.116,337.055 442.600 M343.354 447.774 C 343.182 448.224,342.563 448.400,341.157 448.400 C 340.081 448.400,339.200 448.580,339.200 448.800 C 339.200 449.020,338.294 449.200,337.187 449.200 C 335.620 449.200,335.127 449.355,334.958 449.900 C 334.839 450.285,334.575 450.913,334.371 451.295 C 334.167 451.677,334.000 452.228,334.000 452.520 C 334.000 452.812,333.460 453.568,332.800 454.200 C 332.140 454.832,331.600 455.676,331.600 456.075 C 331.600 456.474,331.420 456.800,331.200 456.800 C 330.980 456.800,330.800 457.121,330.800 457.514 C 330.800 457.906,329.810 459.205,328.600 460.400 C 327.390 461.595,326.400 462.894,326.400 463.286 C 326.400 463.679,326.220 464.000,326.000 464.000 C 325.780 464.000,325.600 464.337,325.600 464.748 C 325.600 465.160,324.880 466.195,324.000 467.048 C 323.121 467.902,322.401 468.893,322.400 469.251 C 322.400 469.609,322.121 470.134,321.780 470.417 C 320.816 471.217,321.176 473.368,322.300 473.528 C 323.262 473.664,323.653 476.073,322.800 476.600 C 322.580 476.736,322.400 477.165,322.400 477.554 C 322.400 477.943,321.950 478.683,321.400 479.200 C 320.850 479.717,320.398 480.423,320.396 480.770 C 320.394 481.116,319.676 482.030,318.800 482.800 C 316.737 484.614,316.612 486.000,318.511 486.000 C 320.676 486.000,322.152 488.888,320.720 490.320 C 320.347 490.693,320.347 490.907,320.720 491.280 C 321.300 491.860,321.362 495.053,320.800 495.400 C 320.580 495.536,320.400 495.963,320.400 496.349 C 320.400 496.735,319.860 497.568,319.200 498.200 C 318.273 499.088,318.000 499.701,318.000 500.892 C 318.000 502.559,317.127 503.817,315.800 504.061 C 315.338 504.146,314.946 504.584,314.873 505.096 C 314.803 505.584,314.296 506.338,313.746 506.771 C 311.867 508.249,312.525 510.152,315.000 510.400 C 316.696 510.570,317.019 510.737,317.128 511.500 C 317.220 512.151,317.524 512.400,318.228 512.400 C 319.452 512.400,319.509 513.100,318.300 513.272 C 317.051 513.450,316.901 518.493,318.138 518.731 C 319.183 518.932,320.400 520.060,320.400 520.827 C 320.400 521.624,321.641 522.800,322.483 522.800 C 322.823 522.800,323.326 523.070,323.600 523.400 C 323.946 523.816,324.864 524.000,326.600 524.000 C 328.336 524.000,329.254 523.816,329.600 523.400 C 329.874 523.070,330.706 522.800,331.449 522.800 C 332.192 522.800,332.800 522.620,332.800 522.400 C 332.800 522.180,333.588 522.000,334.551 522.000 C 335.620 522.000,336.496 521.766,336.800 521.400 C 337.133 520.999,338.043 520.798,339.549 520.793 C 341.421 520.787,341.959 520.619,342.742 519.793 C 343.260 519.247,343.964 518.800,344.306 518.800 C 345.517 518.800,349.600 513.701,349.600 512.188 C 349.600 511.918,349.870 511.474,350.200 511.200 C 350.530 510.926,350.800 510.430,350.800 510.097 C 350.800 509.764,351.250 509.075,351.800 508.565 C 352.350 508.055,352.800 507.382,352.800 507.068 C 352.800 506.755,353.070 506.274,353.400 506.000 C 353.730 505.726,354.000 505.164,354.000 504.751 C 354.000 504.263,354.284 504.000,354.813 504.000 C 355.903 504.000,356.250 505.061,355.449 505.946 C 355.092 506.341,354.800 506.932,354.800 507.262 C 354.800 507.591,354.350 508.283,353.800 508.800 C 353.226 509.339,352.800 510.187,352.800 510.789 C 352.800 511.485,352.263 512.362,351.200 513.400 C 349.973 514.598,349.600 515.270,349.600 516.281 C 349.600 517.007,349.420 517.600,349.200 517.600 C 348.574 517.600,348.732 518.399,349.409 518.659 C 350.063 518.910,352.800 516.322,352.800 515.453 C 352.800 515.183,353.520 514.259,354.400 513.400 C 355.280 512.541,356.000 511.527,356.000 511.148 C 356.000 510.768,356.450 510.104,357.000 509.671 C 357.550 509.239,358.000 508.525,358.000 508.085 C 358.000 507.645,358.270 507.182,358.600 507.055 C 358.977 506.911,359.200 506.299,359.200 505.413 C 359.200 504.636,359.380 504.000,359.600 504.000 C 359.820 504.000,360.000 503.662,360.000 503.249 C 360.000 502.836,360.270 502.274,360.600 502.000 C 360.930 501.726,361.200 501.186,361.200 500.800 C 361.200 500.414,361.470 499.874,361.800 499.600 C 362.164 499.298,362.400 498.422,362.400 497.375 C 362.400 496.425,362.580 495.536,362.800 495.400 C 363.020 495.264,363.200 494.823,363.200 494.419 C 363.200 494.016,363.470 493.582,363.800 493.455 C 364.178 493.310,364.400 492.698,364.400 491.800 C 364.400 490.902,364.622 490.290,365.000 490.145 C 365.367 490.004,365.600 489.397,365.600 488.581 C 365.600 487.847,365.780 487.136,366.000 487.000 C 366.220 486.864,366.400 486.245,366.400 485.625 C 366.400 485.005,366.670 484.274,367.000 484.000 C 367.330 483.726,367.600 482.894,367.600 482.151 C 367.600 481.408,367.780 480.800,368.000 480.800 C 368.248 480.800,368.400 478.600,368.400 475.000 C 368.400 471.810,368.294 469.200,368.164 469.200 C 367.697 469.200,366.426 471.015,366.413 471.700 C 366.402 472.294,366.004 472.400,363.800 472.400 L 361.200 472.400 361.200 471.081 C 361.200 470.070,360.827 469.398,359.600 468.200 C 358.231 466.863,358.000 466.393,358.000 464.942 C 358.000 464.010,357.820 463.136,357.600 463.000 C 357.380 462.864,357.200 462.430,357.200 462.036 C 357.200 461.642,356.660 460.906,356.000 460.400 C 354.996 459.631,354.800 459.200,354.800 457.764 C 354.800 456.820,354.620 455.936,354.400 455.800 C 354.180 455.664,354.000 455.198,354.000 454.764 C 354.000 453.747,352.915 453.335,351.902 453.968 C 350.857 454.621,348.800 452.789,348.800 451.205 C 348.800 449.999,348.142 449.200,347.148 449.200 C 346.735 449.200,346.404 448.837,346.328 448.300 C 346.168 447.173,343.749 446.746,343.354 447.774 M362.835 486.925 C 362.596 487.164,362.400 487.960,362.400 488.693 C 362.400 489.508,362.167 490.114,361.800 490.255 C 361.470 490.382,361.200 490.832,361.200 491.255 C 361.200 491.679,360.930 492.129,360.600 492.255 C 360.209 492.405,360.000 493.028,360.000 494.043 C 360.000 494.899,359.820 495.600,359.600 495.600 C 359.380 495.600,359.200 494.880,359.200 494.000 C 359.200 493.120,359.380 492.400,359.600 492.400 C 359.820 492.400,360.000 491.764,360.000 490.987 C 360.000 490.101,360.223 489.489,360.600 489.345 C 360.930 489.218,361.200 488.684,361.200 488.157 C 361.200 487.573,361.434 487.200,361.800 487.200 C 362.130 487.200,362.400 486.919,362.400 486.576 C 362.400 486.229,362.593 486.072,362.835 486.222 C 363.148 486.415,363.148 486.612,362.835 486.925 M358.000 499.800 C 358.000 500.350,357.820 500.800,357.600 500.800 C 357.380 500.800,357.200 500.350,357.200 499.800 C 357.200 499.250,357.380 498.800,357.600 498.800 C 357.820 498.800,358.000 499.250,358.000 499.800 M356.800 501.800 C 356.800 502.350,356.620 502.800,356.400 502.800 C 356.180 502.800,356.000 502.350,356.000 501.800 C 356.000 501.250,356.180 500.800,356.400 500.800 C 356.620 500.800,356.800 501.250,356.800 501.800 \",\n    stroke: \"none\",\n    fill: \"#040404\",\n    fillRule: \"evenodd\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgToy);\nexport default __webpack_public_path__ + \"static/media/toy.517cb68e.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPine(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 38,\n    height: 42,\n    viewBox: \"0 0 38 42\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M4.00003 10.3333C3.33336 9.06666 1.33336 8.26666 3.00003 6.46666C1.13336 5.93333 0.266696 4.33333 0.533362 2.8C0.733362 1.6 2.53336 0.199997 3.80003 0.199997C5.33336 0.199997 6.4667 1.4 6.80003 3C7.53336 2.73333 7.80003 2.46666 8.2667 2.6C8.73336 2.73333 9.33336 3.46666 9.6667 3.86666C10.2 4.53333 10.6667 4.73333 11.5334 4.4C26.4 1.13333 38 30.9333 37.3334 41.7333C30.1334 42 -4.06664 26.5333 4.00003 10.3333ZM5.73336 3.6C5.6667 2.46666 5.00003 1.66666 4.00003 1.6C2.8667 1.53333 1.8667 2.33333 1.93336 3.53333C2.00003 4.66666 2.73336 5.4 3.73336 5.4C4.80003 5.33333 5.6667 4.4 5.73336 3.6Z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPine);\nexport default __webpack_public_path__ + \"static/media/pine.ebedca99.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSnowflake(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 64,\n    height: 64,\n    viewBox: \"0 0 64 64\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"image2vector-3\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30.617 1.235c-3.706 1.331-4.492 6.024-1.357 8.098 0.27 0.179 0.491 0.361 0.491 0.406s0.119 0.091 0.264 0.102c0.145 0.011 0.281 0.037 0.302 0.058s0.070 1.405 0.11 3.075l0.072 3.037-1.155-0.779c-0.636-0.428-1.213-0.839-1.283-0.912-0.988-1.034-2.485-1.111-3.066-0.157-0.492 0.807-0.245 1.595 0.723 2.314 0.36 0.267 0.613 0.526 0.563 0.577s-0.035 0.078 0.033 0.061c0.143-0.035 0.594 0.137 0.688 0.262 0.034 0.046 0.372 0.299 0.75 0.564s0.913 0.642 1.187 0.839c0.275 0.197 0.739 0.509 1.031 0.694l0.531 0.336v2.556l-0.734-0.465c-0.404-0.256-0.704-0.521-0.668-0.59s0.022-0.085-0.032-0.036c-0.146 0.132-0.587-0.141-0.488-0.302 0.053-0.085 0.028-0.103-0.064-0.046-0.086 0.053-0.497-0.125-0.964-0.418-0.448-0.281-0.832-0.511-0.853-0.511-0.126 0-2.43-1.475-2.381-1.524 0.060-0.060 0.015-0.070-0.565-0.131-0.267-0.028-0.316 0.022-0.336 0.342-0.204 3.295-0.347 4.937-0.43 4.937-0.056 0-0.069 0.085-0.029 0.19s0.034 0.555-0.014 1.001l-0.087 0.811-0.459-0.431c-0.252-0.237-0.584-0.539-0.738-0.67s-0.245-0.273-0.203-0.315c0.042-0.042 0.092-0.441 0.111-0.887s0.064-0.857 0.098-0.912c0.034-0.055 0.099-0.568 0.144-1.139s0.134-1.358 0.198-1.749c0.355-2.165-0.848-3.503-2.402-2.672-0.493 0.264-1.103 2.035-0.952 2.762 0.009 0.041-0.029 0.511-0.084 1.046l-0.099 0.972-0.266-0.254c-0.595-0.567-1.574-1.452-1.801-1.628-0.133-0.103-0.731-0.638-1.328-1.188-1.22-1.123-1.53-1.299-2.3-1.307-0.533-0.006-1.329 0.398-1.344 0.682-0.004 0.069-0.050 0.323-0.102 0.564s-0.042 0.579 0.023 0.75c0.065 0.171 0.121 0.365 0.124 0.431s0.088 0.151 0.188 0.188c0.352 0.13 2.702 2.418 2.624 2.555-0.043 0.076-0.034 0.097 0.021 0.048 0.112-0.101 0.43 0.131 1.386 1.012l0.662 0.611-1.21 0.283c-3.055 0.714-3.070 0.719-3.435 1.125-0.544 0.605-0.458 1.636 0.178 2.15 0.613 0.495 0.872 0.501 2.911 0.072 0.968-0.204 2.141-0.448 2.607-0.542s0.892-0.2 0.948-0.234c0.5-0.309 0.924-0.197 1.658 0.439 0.409 0.355 0.723 0.666 0.697 0.692-0.058 0.058-6.269 0.892-6.806 0.914-0.209 0.009-0.191 0.387 0.031 0.681 0.099 0.13 0.145 0.294 0.102 0.363s-0.023 0.092 0.043 0.051c0.162-0.1 0.581 0.622 0.468 0.806-0.054 0.087-0.034 0.11 0.050 0.058 0.078-0.048 0.232 0.066 0.354 0.262 0.118 0.191 0.402 0.639 0.631 0.994s0.416 0.695 0.416 0.755 0.166 0.303 0.37 0.541c0.203 0.238 0.372 0.48 0.375 0.538s0.121 0.269 0.264 0.469l0.259 0.363h-2.243l-1.23-1.719c-1.961-2.74-2.173-3.078-1.775-2.832 0.092 0.057 0.11 0.034 0.050-0.064-0.052-0.084-0.122-0.125-0.157-0.090s-0.29-0.103-0.569-0.304c-1.193-0.864-2.844-0.142-2.844 1.244 0 0.351 0.362 0.936 1.975 3.188l0.412 0.576-2.725 0.009c-3.13 0.010-3.607 0.050-4.037 0.338-0.172 0.115-0.345 0.2-0.385 0.188-0.195-0.056-0.383 1.221-0.242 1.647 0.31 0.94 0.475 0.978 4.27 0.974 3.252-0.003 3.363 0.005 3.206 0.228-1.919 2.738-2.35 3.454-2.35 3.915 0 1.162 1.037 1.82 2.18 1.384 0.524-0.2 0.691-0.387 1.978-2.217 0.773-1.099 1.476-2.072 1.561-2.161s0.156-0.197 0.156-0.239c0-0.536 0.567-0.816 1.653-0.816 1.267 0 1.236-0.106 0.362 1.246-0.246 0.38-0.449 0.72-0.451 0.754s-0.447 0.782-0.987 1.662c-0.541 0.88-0.951 1.631-0.912 1.67 0.072 0.073 1.622 0.417 1.96 0.436 0.103 0.006 0.975 0.122 1.938 0.257s2.014 0.277 2.336 0.313l0.586 0.066-0.648 0.601c-0.765 0.709-0.509 0.711-3.773-0.022-3.483-0.782-3.914-0.771-4.594 0.11-0.586 0.76-0.249 2.153 0.566 2.342 0.627 0.146 2.091 0.452 3.059 0.64 0.567 0.11 1.031 0.244 1.031 0.297 0 0.154-0.327 0.383-0.418 0.292-0.045-0.045-0.086-0.003-0.091 0.095-0.008 0.156-0.49 0.614-2.648 2.52-1.955 1.726-2.277 2.998-0.923 3.64 0.897 0.426 1.286 0.25 3.039-1.369 0.676-0.625 1.48-1.356 1.788-1.625s0.737-0.664 0.954-0.877l0.396-0.388 0.086 0.825c0.047 0.454 0.11 0.966 0.139 1.138 0.311 1.841 0.404 2.256 0.541 2.422 0.088 0.106 0.132 0.237 0.098 0.291s0.060 0.11 0.208 0.122c0.148 0.013 0.526 0.072 0.84 0.133 0.378 0.073 0.618 0.065 0.712-0.023 0.078-0.073 0.346-0.33 0.597-0.57l0.455-0.437-0.062-1.188c-0.065-1.241-0.115-1.712-0.342-3.229-0.076-0.504-0.105-0.949-0.066-0.989s0.009-0.147-0.068-0.239c-0.076-0.092-0.108-0.168-0.070-0.168s0.022-0.165-0.036-0.367c-0.096-0.337-0.049-0.42 0.564-1 0.725-0.686 0.765-0.71 0.772-0.477 0.003 0.086 0.074 1.056 0.158 2.156s0.19 2.506 0.235 3.125c0.093 1.284 0.132 1.31 1.053 0.701 1.692-1.117 1.971-1.275 2.107-1.192 0.093 0.058 0.115 0.038 0.058-0.054-0.052-0.084 0.005-0.179 0.137-0.225 0.125-0.044 0.395-0.202 0.602-0.351 0.521-0.376 2.313-1.449 2.313-1.384 0 0.029 0.183-0.114 0.406-0.319l0.406-0.371 0.036 1.158c0.023 0.721-0.013 1.174-0.093 1.201-0.071 0.024-0.772 0.512-1.557 1.085s-1.46 1.009-1.5 0.969-0.073-0.016-0.073 0.053c0 0.070-0.421 0.425-0.936 0.789-1.497 1.060-1.848 2.117-0.998 3.005 0.497 0.519 2.059 0.596 2.059 0.102 0-0.058 0.060-0.105 0.134-0.105s0.212-0.070 0.308-0.156c0.461-0.413 0.572-0.475 0.704-0.393 0.080 0.049 0.109 0.033 0.066-0.036-0.076-0.122 0.547-0.664 0.764-0.664 0.061 0 0.212-0.112 0.337-0.25s0.333-0.25 0.464-0.25 0.206-0.052 0.166-0.116c-0.040-0.064-0.014-0.152 0.057-0.196 0.088-0.054 0.119 0.901 0.096 2.991-0.018 1.689 0.012 3.071 0.068 3.071s0.070 0.050 0.033 0.111c-0.27 0.437 0.712 1.389 1.433 1.389 1.112 0 1.731-0.968 1.725-2.693-0.002-0.499 0.034-1.026 0.080-1.17 0.049-0.155 0.028-0.262-0.051-0.262-0.089 0-0.131-0.545-0.124-1.625 0.011-1.846-0.023-1.804 0.91-1.094 0.384 0.292 0.985 0.728 1.336 0.969s0.705 0.495 0.786 0.565c0.081 0.070 0.451 0.123 0.821 0.118 1.611-0.024 2.079-2.18 0.675-3.114-1.53-1.018-2.969-2.089-2.943-2.191 0.016-0.065-0.054-0.086-0.156-0.047s-0.187 0.023-0.189-0.036c-0.001-0.059-0.283-0.273-0.625-0.477l-0.622-0.37v-1.099c0-0.605 0.025-1.099 0.057-1.099 0.058 0 2.388 1.404 3.471 2.090 0.325 0.206 0.55 0.419 0.5 0.475s-0.020 0.059 0.067 0.010c0.090-0.052 0.399 0.072 0.725 0.292 0.312 0.211 0.618 0.383 0.679 0.383s0.199 0.125 0.306 0.278 0.195 0.233 0.195 0.177c0-0.055 0.2 0.023 0.444 0.174 0.608 0.376 0.581 0.518 0.592-3.117 0.012-3.751-0.024-3.663 1.064-2.612 0.881 0.851 0.859 0.745 0.535 2.711-0.132 0.798-0.276 1.775-0.322 2.17s-0.122 0.719-0.171 0.719c-0.462 0 0.116 2.086 0.68 2.456 1.427 0.935 2.286-0.335 2.635-3.893 0.041-0.413 0.086-0.765 0.102-0.784 0.099-0.117 1.082 0.967 0.999 1.102-0.067 0.108-0.047 0.127 0.060 0.061 0.102-0.063 0.351 0.105 0.707 0.476 0.302 0.315 0.549 0.551 0.549 0.523s0.492 0.428 1.094 1.013c1.485 1.444 2.169 1.66 3.013 0.953 1.061-0.89 0.719-1.815-1.423-3.84-0.985-0.932-1.649-1.651-1.601-1.735 0.045-0.079 0.037-0.103-0.017-0.054-0.146 0.132-0.587-0.141-0.488-0.302 0.048-0.078 0.029-0.103-0.045-0.058-0.171 0.106-0.484-0.271-0.334-0.401 0.086-0.075 3.137-0.718 3.857-0.813 0.471-0.062 1.033-1.327 0.829-1.864-0.065-0.172-0.085-0.347-0.044-0.389s0.010-0.075-0.070-0.075c-0.080 0-0.146-0.088-0.146-0.195s-0.048-0.165-0.106-0.129c-0.058 0.036-0.22-0.066-0.36-0.226-0.29-0.333-0.967-0.338-2.347-0.015-0.413 0.096-1.228 0.268-1.813 0.382s-1.175 0.232-1.313 0.264c-0.137 0.031-0.464 0.076-0.725 0.099s-0.51 0.077-0.552 0.119c-0.171 0.171-0.385 0.040-1.211-0.736l-0.864-0.812h0.402c0.261 0 0.372 0.048 0.317 0.137-0.062 0.1-0.015 0.1 0.171 0.001 0.141-0.075 0.386-0.138 0.546-0.139 0.971-0.007 1.292 0.027 1.365 0.146 0.058 0.094 0.096 0.094 0.129-0.002 0.051-0.15 0.623-0.221 2.67-0.336 1.602-0.089 1.525-0.053 1.248-0.581-0.119-0.228-0.28-0.54-0.357-0.694s-0.182-0.281-0.234-0.281c-0.051-0.001-0.094-0.055-0.094-0.121s-0.394-0.743-0.875-1.505c-0.481-0.762-0.875-1.435-0.875-1.495s-0.044-0.128-0.098-0.151c-0.054-0.023-0.253-0.309-0.443-0.635l-0.344-0.594 2.468 0.020 0.233 0.396c0.129 0.218 0.278 0.452 0.332 0.521 0.637 0.809 0.969 1.349 0.899 1.463-0.047 0.076-0.031 0.105 0.036 0.063s0.455 0.408 0.863 0.998c1.506 2.178 2.209 2.58 3.218 1.838 0.62-0.455 0.787-1.742 0.29-2.239-0.112-0.112-0.204-0.252-0.204-0.311s-0.082-0.189-0.181-0.288c-0.232-0.232-1.692-2.38-1.648-2.425 0.051-0.051 2.812-0.138 4.81-0.151l1.794-0.011 0.415-0.415c0.602-0.602 0.684-1.198 0.254-1.848-0.553-0.835-0.783-0.881-4.258-0.837-2.015 0.025-3.006-0.004-2.94-0.087 0.055-0.069 0.41-0.558 0.788-1.087s0.731-0.923 0.784-0.875c0.053 0.048 0.059 0.022 0.013-0.059s0.068-0.325 0.252-0.544c0.768-0.912 0.441-2.347-0.599-2.627-0.536-0.144-1.61 0.030-1.61 0.261 0 0.055-0.073 0.174-0.162 0.265s-0.469 0.614-0.844 1.162-0.725 1.054-0.778 1.125c-0.519 0.698-1.331 1.827-1.531 2.129-0.246 0.371-0.26 0.375-1.396 0.375h-1.147l0.269-0.437c0.148-0.241 0.508-0.786 0.799-1.213s0.794-1.214 1.118-1.75c0.324-0.536 0.622-1.003 0.664-1.037s0.255-0.343 0.475-0.687c0.481-0.752 0.419-0.851-0.655-1.051-1.453-0.27-3.493-0.619-4.188-0.717-1.038-0.146-1.091-0.17-0.812-0.37 0.137-0.099 0.504-0.428 0.815-0.731l0.565-0.551 1.060 0.236c0.583 0.13 1.482 0.327 1.998 0.437s1.078 0.25 1.25 0.311c0.294 0.103 0.575 0.154 1.823 0.329 1.381 0.194 2.367-1.642 1.353-2.521-0.346-0.3-1.749-0.807-2.252-0.814-0.13-0.002-0.726-0.128-1.325-0.281l-1.089-0.278 1.089-0.988c0.599-0.543 1.456-1.331 1.905-1.75s1.029-0.946 1.289-1.171c1.333-1.155 0.885-2.903-0.745-2.903-0.654 0-0.721 0.031-1.348 0.624-0.363 0.343-0.697 0.596-0.742 0.562s-0.056-0.025-0.022 0.019c0.033 0.045-0.043 0.171-0.17 0.281s-0.585 0.51-1.019 0.888c-0.434 0.378-0.84 0.672-0.902 0.653s-0.082 0.017-0.043 0.079c0.080 0.13-0.91 0.973-1.082 0.921-0.062-0.019-0.080 0.020-0.039 0.085s0.021 0.152-0.044 0.192c-0.161 0.099-0.236-0.206-0.315-1.27-0.212-2.861-0.607-3.661-1.806-3.661-1.584 0-1.745 0.793-1.121 5.525l0.276 2.087-0.507 0.475c-0.279 0.261-0.678 0.626-0.887 0.811l-0.38 0.336-0.141-0.836c-0.077-0.46-0.161-1.117-0.186-1.461s-0.075-0.709-0.11-0.813c-0.036-0.103-0.158-0.778-0.273-1.5-0.465-2.937-0.364-2.773-1.339-2.165-0.257 0.16-0.499 0.29-0.539 0.29s-0.264 0.145-0.497 0.323c-0.241 0.184-0.489 0.283-0.573 0.231-0.086-0.053-0.117-0.040-0.073 0.032 0.042 0.069-0.554 0.503-1.325 0.966-1.48 0.889-1.56 0.937-2.449 1.479-0.31 0.189-0.595 0.343-0.633 0.343s-0.069-0.55-0.069-1.222v-1.222l1.781-1.247c3.661-2.563 3.798-2.706 3.603-3.746-0.275-1.464-1.595-1.663-3.238-0.487-0.469 0.336-0.961 0.672-1.092 0.747s-0.352 0.238-0.49 0.363c-0.138 0.125-0.251 0.179-0.251 0.121s-0.070-0.010-0.156 0.107c-0.126 0.172-0.156-0.358-0.153-2.792l0.003-3.005 0.391-0.238c2.312-1.406 2.89-4.657 1.198-6.745-0.625-0.771-0.742-0.887-0.899-0.887-0.074 0-0.134-0.046-0.134-0.102 0-0.127-1.238-0.648-1.541-0.648-0.123 0-0.189-0.056-0.147-0.124 0.044-0.071-0.006-0.092-0.118-0.049-0.107 0.041-0.194 0.024-0.194-0.037 0-0.222-0.707-0.138-1.633 0.195zM32.722 3.817c0.769 0.384 1.154 0.982 1.144 1.781-0.006 0.472-0.041 0.631-0.105 0.468-0.087-0.222-0.103-0.213-0.161 0.090-0.040 0.209-0.017 0.307 0.062 0.258 0.173-0.107-0.011 0.202-0.337 0.566-0.396 0.442-0.661 0.55-0.957 0.391-0.218-0.117-0.252-0.104-0.219 0.085 0.055 0.314-0.36 0.366-0.68 0.086-0.144-0.126-0.221-0.159-0.171-0.073 0.22 0.377-0.533 0.065-1.084-0.449-0.282-0.263-0.334-0.396-0.274-0.703 0.056-0.286 0.042-0.333-0.057-0.192-0.201 0.288-0.173-0.667 0.034-1.162 0.17-0.407 0.979-1.213 1.218-1.213 0.070 0 0.102 0.042 0.070 0.094s0.19 0.094 0.492 0.094c0.357 0 0.551-0.055 0.551-0.156 0-0.197 0.007-0.196 0.472 0.036zM32.375 3.884c0 0.116 0.618 0.414 0.697 0.336 0.020-0.020-0.128-0.132-0.33-0.248s-0.367-0.155-0.367-0.088zM37.922 25.709c-0.012 0.401-0.028 1.492-0.034 2.425l-0.012 1.696-1.469 1.053c-0.808 0.579-1.487 1.096-1.51 1.148s-0.114 0.095-0.203 0.095c-0.089 0-0.234 0.087-0.323 0.194-0.332 0.4-0.662 0.492-0.579 0.161 0.041-0.163 0.083-1.322 0.093-2.576 0.015-1.784 0.054-2.279 0.182-2.279 0.090 0 0.182-0.045 0.205-0.101s0.323-0.291 0.667-0.523c0.344-0.232 0.653-0.454 0.688-0.493 0.242-0.276 1.025-0.757 1.129-0.693 0.070 0.043 0.112 0.004 0.093-0.087s0.063-0.158 0.183-0.148c0.12 0.009 0.19-0.028 0.156-0.083-0.066-0.107 0.579-0.628 0.691-0.558 0.037 0.023 0.057 0.369 0.045 0.77zM27.759 25.5c0.373 0.275 0.791 0.581 0.929 0.68 2.498 1.796 2.259 1.352 2.302 4.285 0.015 1.064 0.063 2.025 0.105 2.134 0.054 0.142-0.044 0.111-0.337-0.106-0.687-0.508-1.54-1.113-2.069-1.468-0.275-0.184-0.528-0.367-0.563-0.406s-0.273-0.198-0.531-0.355l-0.469-0.285-0.008-1.021c-0.005-0.562-0.036-1.682-0.070-2.49s-0.041-1.469-0.015-1.469c0.026 0 0.353 0.225 0.727 0.5zM43.35 31.382c1.523 0.012 2.009 0.052 1.927 0.161-0.061 0.080-0.744 0.948-1.519 1.93l-1.408 1.785-2.394-0.078c-1.316-0.043-2.414-0.097-2.438-0.121-0.082-0.081 1.389-1.872 1.508-1.837 0.065 0.019 0.083-0.022 0.041-0.090s0.038-0.196 0.178-0.283 0.255-0.227 0.255-0.31c0-0.083 0.098-0.209 0.219-0.279s0.174-0.129 0.12-0.131c-0.054-0.002 0.044-0.158 0.219-0.346s0.318-0.392 0.318-0.453c0-0.061 0.211-0.078 0.469-0.037s1.386 0.081 2.506 0.090zM25.771 31.954c0.228 0.266 0.518 0.579 0.645 0.695 0.132 0.121 0.191 0.277 0.138 0.363s-0.041 0.119 0.029 0.075c0.129-0.080 0.185-0.023 1.119 1.125 0.324 0.398 0.678 0.792 0.787 0.876 0.163 0.125 0.064 0.154-0.552 0.16-0.722 0.007-2.283 0.083-3.659 0.179-0.645 0.045-1.038-0.207-0.927-0.594 0.016-0.057-0.017-0.074-0.074-0.039s-0.213-0.082-0.347-0.261c-0.133-0.179-0.299-0.387-0.368-0.461-0.735-0.794-1.169-1.377-1.103-1.483 0.044-0.071 0.019-0.092-0.055-0.046-0.137 0.085-0.654-0.533-0.654-0.781 0-0.075 0.127-0.14 0.281-0.145s0.9-0.048 1.656-0.095c2.424-0.151 2.607-0.126 3.084 0.431zM27.421 37.787c-0.048 0.083-0.163 0.235-0.257 0.338-0.167 0.184-1.577 2.031-2.131 2.791-0.423 0.582-0.533 0.606-2.38 0.521-0.943-0.043-1.98-0.081-2.303-0.084l-0.588-0.005 0.213-0.328c0.281-0.434 0.612-0.762 0.702-0.697 0.040 0.029 0.047 0.017 0.015-0.027-0.067-0.092 0.683-1.164 1.433-2.047l0.521-0.614 2.43 0.001c1.857 0.001 2.41 0.036 2.344 0.151zM42.502 37.982c0.001 0.044 0.195 0.301 0.431 0.572s0.399 0.539 0.363 0.597c-0.036 0.058-0.013 0.090 0.051 0.071 0.111-0.033 1.669 1.74 1.907 2.17 0.102 0.184-0.123 0.215-2.29 0.317-2.733 0.129-2.37 0.243-3.383-1.065-0.264-0.341-0.573-0.724-0.687-0.852-0.523-0.585-1.395-1.649-1.395-1.702 0-0.032 0.408-0.070 0.906-0.084s1.553-0.065 2.344-0.113c1.417-0.086 1.748-0.069 1.752 0.089zM34.838 41.123c0.083 0.070 0.181 0.127 0.218 0.127 0.107 0 1.749 1.143 1.833 1.275 0.042 0.067 0.126 0.12 0.188 0.118 0.229-0.007 0.737 0.428 0.755 0.646 0.010 0.125 0.054 1.049 0.097 2.054s0.113 1.967 0.156 2.137l0.078 0.311-0.425-0.302c-0.234-0.166-0.522-0.358-0.641-0.427-2.284-1.32-3.113-1.973-3.081-2.425 0.018-0.251 0-0.511-0.039-0.578s-0.112-0.925-0.161-1.907l-0.088-1.785 0.48 0.315c0.264 0.173 0.548 0.371 0.631 0.441zM30.581 42.334c-0.146 3.224-0.103 3.073-1.066 3.67-1.864 1.155-2.455 1.532-2.515 1.606-0.289 0.359-0.646 0.393-0.577 0.055 0.039-0.194 0.106-1.28 0.148-2.415s0.129-2.082 0.193-2.105 0.185-0.111 0.27-0.196c0.333-0.332 0.838-0.591 0.98-0.503 0.085 0.053 0.117 0.040 0.074-0.029-0.105-0.17 0.39-0.569 0.574-0.463 0.083 0.047 0.107 0.038 0.053-0.020-0.093-0.102 1.277-1.058 1.516-1.058 0.064 0 0.149-0.084 0.188-0.188 0.191-0.498 0.237-0.032 0.16 1.646z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSnowflake);\nexport default __webpack_public_path__ + \"static/media/snowflake.d3c642d8.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgBall2(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 95,\n    height: 128,\n    viewBox: \"0 0 95 128\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"ball\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.413 0.147c-1.43 0.646-1.431 0.65-1.431 9.221v7.193h-3.504c-4.952 0-6.29 0.491-7.578 2.778-0.741 1.316-0.715 1.006-0.753 8.868l-0.035 7.105-1.037 0.359c-17.373 6.022-29.551 21.113-31.827 39.44-0.242 1.947-0.278 8.672-0.057 10.471 1.747 14.187 8.686 25.903 20.109 33.95 11.9 8.383 27.903 10.765 41.776 6.218 27.516-9.019 40.708-40.165 27.987-66.078-5.524-11.252-16.252-20.61-27.688-24.154l-0.609-0.189-0.035-7.114c-0.038-7.872-0.012-7.561-0.753-8.877-1.288-2.287-2.626-2.778-7.575-2.778h-3.501l-0.029-7.402-0.030-7.402-0.267-0.516c-0.545-1.053-2.079-1.583-3.163-1.093zM56.56 21.59l0.282 0.221v11.31h-18.805v-11.31l0.282-0.221c0.444-0.349 17.798-0.349 18.242 0zM49.362 38.040c32.889 1.594 51.705 38.189 33.799 65.736-16.778 25.812-54.653 25.812-71.445 0-17.84-27.423 0.93-64.16 33.586-65.734 0.911-0.044 1.704-0.086 1.763-0.094s1.093 0.033 2.297 0.092zM30.822 52.777c-1.284 2.584-2.385 4.716-2.448 4.739s-2.41 0.373-5.216 0.778c-2.806 0.405-5.102 0.765-5.102 0.801s1.671 1.695 3.713 3.687c2.042 1.992 3.727 3.676 3.745 3.742s-0.357 2.391-0.833 5.166c-0.476 2.775-0.851 5.088-0.834 5.139s2.132-1.008 4.698-2.355l4.666-2.448 4.67 2.454c2.568 1.35 4.686 2.438 4.706 2.418 0.031-0.031-1.579-9.583-1.717-10.184-0.041-0.179 0.685-0.936 3.739-3.898 2.085-2.022 3.791-3.701 3.791-3.732s-2.344-0.392-5.209-0.803l-5.209-0.747-2.351-4.728c-1.293-2.6-2.379-4.728-2.414-4.728s-1.113 2.114-2.397 4.697zM59.294 88.319c-1.62 3.299-2.351 4.683-2.504 4.739-0.119 0.044-2.476 0.405-5.238 0.802s-5.038 0.737-5.057 0.755c-0.020 0.017 1.014 1.056 2.297 2.308s2.99 2.927 3.792 3.721l1.459 1.445-0.895 5.176c-0.492 2.847-0.882 5.189-0.867 5.205s2.135-1.078 4.709-2.43l4.681-2.459 4.663 2.451c2.564 1.348 4.681 2.435 4.703 2.414s-0.359-2.368-0.846-5.217l-0.886-5.18 2.609-2.541c4.675-4.553 4.955-4.831 4.903-4.882-0.028-0.028-2.376-0.388-5.217-0.8s-5.185-0.769-5.208-0.793c-0.023-0.023-1.076-2.142-2.339-4.708s-2.337-4.666-2.385-4.666c-0.048 0-1.117 2.097-2.375 4.659z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBall2);\nexport default __webpack_public_path__ + \"static/media/ball-2.fa7c6bce.svg\";\nexport { ForwardRef as ReactComponent };","import { Shapes } from \"../../types/types\";\nimport { ReactComponent as BallIcon } from \"../../assets/svg/ball1.svg\";\nimport { ReactComponent as BellIcon } from \"../../assets/svg/bell.svg\";\nimport { ReactComponent as FigureIcon } from \"../../assets/svg/toy.svg\";\nimport { ReactComponent as PineIcon } from \"../../assets/svg/pine.svg\";\nimport { ReactComponent as SnowIcon } from \"../../assets/svg/snowflake.svg\";\n\nimport { FC } from \"react\";\n\nimport \"./ShapeFilter.css\";\nimport { FilterCheckInput } from \"../FilterCheckInput/FilterCheckInput\";\n\ntype ShapeFilterContainerProps = {\n  toggleFilter: CallableFunction;\n  checked: Shapes[];\n};\n\nexport const ShapeFilter: FC<ShapeFilterContainerProps> = (props) => {\n  const { toggleFilter, checked } = props;\n  function handleFilter(filterName, filterValue) {\n    toggleFilter(filterName, filterValue);\n  }\n  return (\n    <div className=\"shape-filter\">\n      <h3 className=\"shape-filter__header\">Формы</h3>\n      <FilterCheckInput\n        className=\"shape-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"shape\"\n        filterValue={Shapes.Ball}\n        checked={checked.indexOf(Shapes.Ball) >= 0}\n      >\n        <BallIcon className=\"shape-filter__icon\" />\n      </FilterCheckInput>\n      <FilterCheckInput\n        className=\"shape-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"shape\"\n        filterValue={Shapes.Bell}\n        checked={checked.indexOf(Shapes.Bell) >= 0}\n      >\n        <BellIcon className=\"shape-filter__icon\" />\n      </FilterCheckInput>\n\n      <FilterCheckInput\n        className=\"shape-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"shape\"\n        filterValue={Shapes.Figure}\n        checked={checked.indexOf(Shapes.Figure) >= 0}\n      >\n        <FigureIcon className=\"shape-filter__icon\" />\n      </FilterCheckInput>\n\n      <FilterCheckInput\n        className=\"shape-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"shape\"\n        filterValue={Shapes.Pinecone}\n        checked={checked.indexOf(Shapes.Pinecone) >= 0}\n      >\n        <PineIcon className=\"shape-filter__icon\" />\n      </FilterCheckInput>\n\n      <FilterCheckInput\n        className=\"shape-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"shape\"\n        filterValue={Shapes.Snowflake}\n        checked={checked.indexOf(Shapes.Snowflake) >= 0}\n      >\n        <SnowIcon className=\"shape-filter__icon\" />\n      </FilterCheckInput>\n    </div>\n  );\n};\n","var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15, _g16;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgHeart(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 485.3 485.3\",\n    style: {\n      enableBackground: \"new 0 0 485.3 485.3\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M349.6,28.95c-36.3,0-70.5,14.2-96.2,39.9l-10.6,10.6L232,68.65c-25.7-25.7-59.9-39.9-96.2-39.9 c-36.2,0-70.3,14.1-96,39.8S0,128.35,0,164.65s14.2,70.4,39.9,96.1l190.5,190.5l0.4,0.4c3.3,3.3,7.7,4.9,12,4.9 c4.4,0,8.8-1.7,12.1-5l190.5-190.5c25.7-25.7,39.9-59.8,39.9-96.1s-14.1-70.5-39.8-96.1C419.9,43.05,385.8,28.95,349.6,28.95z  M421.2,236.75l-178.3,178.4L64.2,236.45c-19.2-19.2-29.8-44.7-29.9-71.9c0-27.1,10.5-52.6,29.7-71.8 c19.2-19.1,44.7-29.7,71.7-29.7c27.2,0,52.7,10.6,72,29.9l22.9,22.9c6.4,6.4,17.8,6.4,24.3,0l22.8-22.8 c19.2-19.2,44.8-29.8,71.9-29.8s52.6,10.6,71.8,29.8c19.2,19.2,29.8,44.7,29.7,71.9C451.1,192.05,440.5,217.55,421.2,236.75z\"\n  }))), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null), /*#__PURE__*/React.createElement(\"g\", null))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)), _g16 || (_g16 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgHeart);\nexport default __webpack_public_path__ + \"static/media/heart.4e0846b5.svg\";\nexport { ForwardRef as ReactComponent };","import { Size } from \"../../types/types\";\nimport { ReactComponent as BallIcon } from \"../../assets/svg/ball-2.svg\";\nimport \"./SizeFilter.css\";\nimport { FC } from \"react\";\nimport { FilterCheckInput } from \"../FilterCheckInput/FilterCheckInput\";\n\ntype SizeFilterContainerProps = {\n  toggleFilter: CallableFunction;\n  checked: Size[];\n};\n\nexport const SizeFilter: FC<SizeFilterContainerProps> = (props) => {\n  const { toggleFilter, checked } = props;\n\n  function handleFilter(filterName, filterValue) {\n    toggleFilter(filterName, filterValue);\n  }\n\n  return (\n    <div className=\"size-filter\">\n      <h3 className=\"size-filter__header\">Размер</h3>\n\n      <FilterCheckInput\n        className=\"size-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"size\"\n        filterValue={Size.L}\n        checked={checked.indexOf(Size.L) >= 0}\n      >\n        <BallIcon className=\"size-filter__icon size-filter__icon-l\" />\n      </FilterCheckInput>\n      <FilterCheckInput\n        className=\"size-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"size\"\n        filterValue={Size.M}\n        checked={checked.indexOf(Size.M) >= 0}\n      >\n        <BallIcon className=\"size-filter__icon size-filter__icon-m\" />\n      </FilterCheckInput>\n      <FilterCheckInput\n        className=\"size-filter\"\n        onToggleFilter={handleFilter}\n        filterName=\"size\"\n        filterValue={Size.S}\n        checked={checked.indexOf(Size.S) >= 0}\n      >\n        <BallIcon className=\"size-filter__icon size-filter__icon-s\" />\n      </FilterCheckInput>\n    </div>\n  );\n};\n","import { FC, useState } from \"react\";\nimport { SpanInput } from \"../SpanInput/SpanInput\";\n\nimport \"./YearFilter.css\";\n\ntype YearFilterContainerProps = {\n  toggleFilter: CallableFunction;\n  min: number;\n  max: number;\n  minVal?: number;\n  maxVal?: number;\n  step?: number;\n};\n\nexport const YearFilter: FC<YearFilterContainerProps> = (props) => {\n  const { toggleFilter, min, max, minVal, maxVal } = props;\n  const [minValue, setMinValue] = useState(minVal);\n  const [maxValue, setMaxValue] = useState(maxVal);\n\n  if (minValue !== minVal) setMinValue(minVal);\n  if (maxValue !== maxVal) setMaxValue(maxVal);\n\n  function handleFilter(minFilter, maxFilter) {\n    setMaxValue(maxFilter);\n    setMinValue(minFilter);\n    toggleFilter(\"year\", minFilter, maxFilter);\n  }\n  return (\n    <div className=\"Year-filter\">\n      <h3 className=\"Year-filter__header\">Год покупки</h3>\n      <SpanInput\n        min={min}\n        max={max}\n        maxVal={maxValue}\n        minVal={minValue}\n        step={1}\n        toggleFilter={handleFilter}\n      />\n    </div>\n  );\n};\n","var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15, _g16;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgHeartFull(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    width: \"544.582px\",\n    height: \"544.582px\",\n    viewBox: \"0 0 544.582 544.582\",\n    style: {\n      enableBackground: \"new 0 0 544.582 544.582\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M448.069,57.839c-72.675-23.562-150.781,15.759-175.721,87.898C247.41,73.522,169.303,34.277,96.628,57.839 C23.111,81.784-16.975,160.885,6.894,234.708c22.95,70.38,235.773,258.876,263.006,258.876 c27.234,0,244.801-188.267,267.751-258.876C561.595,160.732,521.509,81.631,448.069,57.839z\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)), _g16 || (_g16 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgHeartFull);\nexport default __webpack_public_path__ + \"static/media/heart-full.f8cc1a36.svg\";\nexport { ForwardRef as ReactComponent };","import { FC } from \"react\";\nimport { Direction } from \"../../types/types\";\n\ninterface RadioInputProps {\n  className: string;\n  id: string;\n  radioName: string;\n  type: string;\n  value: Direction;\n  onChoose: CallableFunction;\n  selected: boolean;\n}\n\nexport const RadioInput: FC<RadioInputProps> = (props) => {\n  const {\n    className,\n    id,\n    type,\n    value: direction,\n    onChoose,\n    children,\n    radioName,\n    selected,\n  } = props;\n\n  function handleSort(hType, hDirection) {\n    onChoose(hType, hDirection);\n  }\n\n  return (\n    <div>\n      <input\n        type=\"radio\"\n        id={id}\n        name={radioName}\n        className={`${className}__radio`}\n        onClick={() => handleSort(type, direction)}\n        defaultChecked={selected}\n      />\n      <label className={`${className}__label`} defaultChecked htmlFor={id}>\n        {children}\n      </label>\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { Direction } from \"../../types/types\";\nimport { RadioInput } from \"../RadioInput/RadioInput\";\n\nimport \"./SelectSort.css\";\n\ntype SelectSortProps = {\n  setupSort: CallableFunction;\n};\n\nexport const SelectSort: FC<SelectSortProps> = (props) => {\n  const { setupSort } = props;\n\n  function handleSort(type, direction) {\n    setupSort(type, direction);\n  }\n  return (\n    <div className=\"sort\">\n      <h3 className=\"sort__header\">Сортировка</h3>\n      <RadioInput\n        radioName=\"sort\"\n        id=\"sort-name-up\"\n        className=\"sort\"\n        type=\"name\"\n        value={Direction.Up}\n        onChoose={handleSort}\n        selected={true}\n      >\n        Название ↑\n      </RadioInput>\n\n      <RadioInput\n        radioName=\"sort\"\n        id=\"sort-name-down\"\n        className=\"sort\"\n        type=\"name\"\n        value={Direction.Down}\n        onChoose={handleSort}\n        selected={false}\n      >\n        Название ↓\n      </RadioInput>\n\n      <RadioInput\n        radioName=\"sort\"\n        id=\"sort-year-up\"\n        className=\"sort\"\n        type=\"year\"\n        value={Direction.Up}\n        onChoose={handleSort}\n        selected={false}\n      >\n        Год покупки ↑\n      </RadioInput>\n\n      <RadioInput\n        radioName=\"sort\"\n        id=\"sort-year-down\"\n        className=\"sort\"\n        type=\"year\"\n        value={Direction.Down}\n        onChoose={handleSort}\n        selected={false}\n      >\n        Год покупки ↓\n      </RadioInput>\n    </div>\n  );\n};\n","import { FC, useState } from \"react\";\n\nimport \"./Search.css\";\n\ntype SearchProps = {\n  searchLine: string;\n  setupSearch: CallableFunction;\n};\n\nexport const Search: FC<SearchProps> = (props) => {\n  const { searchLine, setupSearch } = props;\n  const [line, setLine] = useState<string>(searchLine);\n  function handleSearch(e) {\n    setLine(e.currentTarget.value);\n    setupSearch(e.currentTarget.value);\n  }\n  function handleReset() {\n    setLine(\"\");\n    setupSearch(\"\");\n  }\n  return (\n    <div className=\"search\">\n      <input\n        autoFocus\n        autoComplete=\"off\"\n        type=\"text\"\n        name=\"toys-name-search\"\n        id=\"toys-name-search\"\n        className=\"search__text\"\n        onInput={handleSearch}\n        value={line}\n        placeholder=\"Поиск\"\n      />\n      <button className=\"search__clear\" onClick={handleReset}>\n        🞫\n      </button>\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { Filters, SpanFilters } from \"../../types/types\";\nimport { ColorFilter } from \"../ColorFilter/ColorFilter\";\nimport { CountFilter } from \"../CountFilter/CountFilter\";\nimport { ShapeFilter } from \"../ShapeFilter/ShapeFilter\";\nimport { SizeFilter } from \"../SizeFilter/SizeFilter\";\nimport { YearFilter } from \"../YearFilter/YearFilter\";\n\nimport { ReactComponent as HeartIcon } from \"../../assets/svg/heart.svg\";\nimport { ReactComponent as HeartIconFull } from \"../../assets/svg/heart-full.svg\";\nimport \"./FiltersContainer.css\";\nimport { SelectSort } from \"../SelectSort/SelectSort\";\nimport { Search } from \"../Search/Search\";\nimport { useToggle } from \"../shared/hooks/useToggle\";\n\ntype FiltersContainerProps = {\n  toggleFilter: CallableFunction;\n  toggleSpanFilter: CallableFunction;\n  filters: Filters;\n  spanFilters: SpanFilters;\n  toggleOnlyFavorite: CallableFunction;\n  favoritesCount: number;\n  setupSort: CallableFunction;\n  reset: CallableFunction;\n  setupSearch: CallableFunction;\n  searchLine: string;\n};\n\nexport const FiltersContainter: FC<FiltersContainerProps> = (props) => {\n  const {\n    toggleFilter,\n    toggleSpanFilter,\n    filters,\n    spanFilters,\n    toggleOnlyFavorite,\n    favoritesCount,\n    setupSort,\n    reset,\n    setupSearch,\n    searchLine,\n  } = props;\n  const [isOnlyFavorite, setIsOnlyFavorite] = useToggle(false);\n\n  function toggleFavorite() {\n    setIsOnlyFavorite();\n    toggleOnlyFavorite();\n  }\n  function handleReset() {\n    reset();\n  }\n  function handleClear() {\n    localStorage.clear();\n  }\n\n  return (\n    <div className=\"filters-container\">\n      <Search setupSearch={setupSearch} searchLine={searchLine} />\n\n      <ShapeFilter toggleFilter={toggleFilter} checked={filters.shape} />\n      <SizeFilter toggleFilter={toggleFilter} checked={filters.size} />\n      <ColorFilter toggleFilter={toggleFilter} checked={filters.color} />\n      <YearFilter\n        toggleFilter={toggleSpanFilter}\n        min={spanFilters.year.min}\n        max={spanFilters.year.max}\n        minVal={spanFilters.year.minVal}\n        maxVal={spanFilters.year.maxVal}\n        step={1}\n      />\n      <CountFilter\n        toggleFilter={toggleSpanFilter}\n        min={spanFilters.count.min}\n        max={spanFilters.count.max}\n        step={1}\n        minVal={spanFilters.count.minVal}\n        maxVal={spanFilters.count.maxVal}\n      />\n      <button\n        className={\n          isOnlyFavorite\n            ? \"favorite-button favorite-button__on\"\n            : \"favorite-button\"\n        }\n        onClick={toggleFavorite}\n      >\n        {isOnlyFavorite ? <HeartIconFull /> : <HeartIcon />}\n        <span className=\"favorite-button__text\"> {favoritesCount}</span>\n      </button>\n      <SelectSort setupSort={setupSort} />\n      <span className=\"filters__reset\" onClick={handleReset}>\n        Сбросить фильтры\n      </span>\n      <span className=\"filters__reset\" onClick={handleClear}>\n        Удалить сохраненные настройки\n      </span>\n      {/* <Footer /> */}\n    </div>\n  );\n};\n","import \"./Messages.css\";\ntype MessageProps = {\n  message: string;\n};\n\nexport function Message(props: MessageProps) {\n  return <span className=\"message\">{props.message}</span>;\n}\n","import { ReactComponent as HeartIcon } from \"../../assets/svg/heart.svg\";\nimport { ReactComponent as HeartIconFull } from \"../../assets/svg/heart-full.svg\";\nimport { FC, useState } from \"react\";\n\nimport { Message } from \"../Message/Message\";\n\nimport \"./FavoriteButton.css\";\ntype FavoriteProps = {\n  isFavorite: boolean;\n  toggleFavorite: CallableFunction;\n  favoritesCount: number;\n};\n\nexport const FavoriteButton: FC<FavoriteProps> = (props) => {\n  const { isFavorite, toggleFavorite, favoritesCount } = props;\n  const [showMsg, setShowMsg] = useState(false);\n  function handleFavorite() {\n    if (favoritesCount < 20 || isFavorite === true) {\n      toggleFavorite();\n    } else {\n      setShowMsg(true);\n      setTimeout(() => setShowMsg(false), 3000);\n    }\n  }\n  return (\n    <button\n      className={\n        isFavorite ? \"favorite-button favorite-button__on\" : \"favorite-button\"\n      }\n      onClick={() => handleFavorite()}\n    >\n      {isFavorite ? <HeartIconFull /> : <HeartIcon />}\n      {showMsg && <Message message=\"Извините, все слоты заполнены\" />}\n    </button>\n  );\n};\n","import { FC, useState } from \"react\";\nimport { Toy } from \"../../types/toys/toy\";\nimport { FavoriteButton } from \"../FavoriteButton/FavoriteButton\";\n\nimport \"./ToyCard.css\";\nimport \"../../main.css\";\n\ntype ToyCardProps = {\n  toy: Toy;\n  toggleFavorite: CallableFunction;\n  favoritesCount: number;\n};\n\nexport const ToyCard: FC<ToyCardProps> = (props) => {\n  const { toy, toggleFavorite, favoritesCount } = props;\n  const [isLoaded, setIsLoaded] = useState(false);\n  function handleToggleFavorite(): void {\n    toggleFavorite(toy);\n  }\n  const path: string = `/assets/toys/${toy.id}.png`;\n  const image: HTMLImageElement = new Image();\n  image.src = path;\n  image.onload = () => setIsLoaded(true);\n\n  return (\n    <div className=\"toy-card\">\n      <h3 className=\"toy-card__header\">{toy.name}</h3>\n      {isLoaded ? (\n        <img className=\"toy-card__image\" alt=\"игрушка\" src={image.src} />\n      ) : (\n        <div className=\"toy-card__image\" />\n      )}\n      <ul className=\"toy-card__properties-list\">\n        <li className=\"toy-card__properties-list-item\">\n          <span className=\"toy-card__properties-name\">Количество:</span>{\" \"}\n          {toy.count}шт.\n        </li>\n        <li className=\"toy-card__properties-list-item\">\n          <span className=\"toy-card__properties-name\">Год покупки:</span>{\" \"}\n          {toy.year}год\n        </li>\n        <li className=\"toy-card__properties-list-item\">\n          <span className=\"toy-card__properties-name\">Форма игрушки:</span>{\" \"}\n          {toy.shape}\n        </li>\n        <li className=\"toy-card__properties-list-item\">\n          <span className=\"toy-card__properties-name\">Цвет:</span> {toy.color}\n        </li>\n        <li className=\"toy-card__properties-list-item\">\n          <span className=\"toy-card__properties-name\">Размер игрушки:</span>{\" \"}\n          {toy.size}\n        </li>\n      </ul>\n      <FavoriteButton\n        isFavorite={toy.isFavorite}\n        toggleFavorite={handleToggleFavorite}\n        favoritesCount={favoritesCount}\n      />\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { Toy } from \"../../types/toys/toy\";\nimport { ToyCard } from \"../ToyCard/ToyCard\";\n\nimport \"./ToysContainer.css\";\n\ntype ToysContainerProps = {\n  toys: Toy[];\n  toggleFavorite: CallableFunction;\n  favoritesCount: number;\n};\n\nexport const ToysContainter: FC<ToysContainerProps> = (props) => {\n  const { toys, toggleFavorite, favoritesCount } = props;\n\n  const cards = toys.map((toy, id) => (\n    <ToyCard\n      key={id}\n      toy={toy}\n      toggleFavorite={toggleFavorite}\n      favoritesCount={favoritesCount}\n    />\n  ));\n  return (\n    <div className=\"toys-container\">\n      {cards}\n      {toys.length <= 0 && (\n        <span className=\"toys-container__text\">\n          Извините, совпадений не обнаружено\n        </span>\n      )}\n    </div>\n  );\n};\n","import { FC, useState } from \"react\";\nimport { Toy } from \"../../types/toys/toy\";\nimport {\n  Colors,\n  Direction,\n  Filters,\n  Shapes,\n  Size,\n  Sort,\n  SpanFilters,\n} from \"../../types/types\";\nimport { data } from \"../../data\";\nimport { FiltersContainter } from \"../FiltersContainer/FiltersContainer\";\nimport { ToysContainter } from \"../ToysContainer/ToysContainer\";\n\nimport \"./ToysApp.css\";\n\ninterface ToysAppProps {\n  favorites: Toy[];\n  sendFavorites: CallableFunction;\n}\n\nconst toys: Toy[] = data.map((item) => new Toy(item));\n\nconst yearsSet: number[] = [];\ntoys.map((toy) => yearsSet.push(toy.year));\nconst years: number[] = yearsSet.sort((a, b) => a - b);\n\nconst countsSet: Set<number> = new Set();\ntoys.map((toy) => countsSet.add(toy.count));\nconst counts: number[] = Array.from(countsSet).sort((a, b) => a - b);\n\nconst curYear = new Date().getFullYear();\n\nconst defaultFilters: Filters = {\n  color: [Colors.Blue, Colors.Green, Colors.Red, Colors.White, Colors.Yellow],\n\n  shape: [\n    Shapes.Ball,\n    Shapes.Bell,\n    Shapes.Figure,\n    Shapes.Pinecone,\n    Shapes.Snowflake,\n  ],\n  size: [Size.L, Size.M, Size.S],\n};\n\nconst defaultSpanFilters: SpanFilters = {\n  year: {\n    min: years[0],\n    max: curYear + 1,\n    minVal: years[0],\n    maxVal: curYear + 1,\n  },\n  count: {\n    min: counts[0],\n    max: counts[counts.length - 1],\n    minVal: counts[0],\n    maxVal: counts[counts.length - 1],\n  },\n};\n\nconst initialFilters = () =>\n  JSON.parse(localStorage.getItem(\"komalapaChristmasFilters\")) ||\n  JSON.parse(JSON.stringify(defaultFilters));\nconst initialSpanFilters = () =>\n  JSON.parse(localStorage.getItem(\"komalapaChristmasSpanFilters\")) ||\n  JSON.parse(JSON.stringify(defaultSpanFilters));\nconst initialFavorites = () => {\n  const favoritesString = localStorage.getItem(\"komalapaChristmasFavorites\");\n  let lsFavorites;\n  if (favoritesString) lsFavorites = JSON.parse(favoritesString);\n  if (lsFavorites) {\n    lsFavorites = lsFavorites\n      .filter((toy) => toy)\n      .map((fav) => toys.find((toy: Toy) => fav.id === toy.id));\n    lsFavorites.forEach((toy: Toy) => {\n      toy.isFavorite = true;\n    });\n    return lsFavorites;\n  }\n  return toys.filter((toy: Toy) => toy.isFavorite);\n};\n\nexport const ToysApp: FC<ToysAppProps> = (props) => {\n  const { sendFavorites } = props;\n  const [curToysList, setCurToysList] = useState<Toy[]>(toys);\n  const [filters, setFilters] = useState<Filters>(initialFilters());\n  const [spanFilters, setSpanFilters] = useState<SpanFilters>(\n    initialSpanFilters()\n  );\n  const [favorites, setFavorites] = useState<Toy[]>(initialFavorites);\n  const [sort, setSort] = useState<Sort>({\n    type: \"name\",\n    direction: Direction.Up,\n  });\n  const [searchStr, setSearchStr] = useState<string>(\"\");\n  const [isOnlyFavorites, setIsOnlyFavorites] = useState<boolean>(false);\n  const [isFiltred, setIsFiltered] = useState<boolean>(false);\n  // filter\n  function filterToys() {\n    setCurToysList([]);\n    function filterToy(filter: string, toy: Toy) {\n      if (filters[filter].indexOf(toy[filter]) >= 0) return true;\n      return false;\n    }\n    function spanFilterToy(toy: Toy, filter: string): Boolean {\n      if (\n        spanFilters[filter].minVal <= toy[filter] &&\n        spanFilters[filter].maxVal >= toy[filter]\n      )\n        return true;\n\n      return false;\n    }\n    let array = toys;\n    for (let filter in spanFilters) {\n      array = array.filter((toy) => spanFilterToy(toy, filter));\n    }\n\n    for (let filter in filters) {\n      array = array.filter((toy) => filterToy(filter, toy));\n    }\n\n    if (isOnlyFavorites) {\n      array = array.filter((toy) => toy.isFavorite);\n    }\n\n    if (searchStr !== \"\")\n      array = array.filter(\n        (toy) => toy.name.toLowerCase().indexOf(searchStr.toLowerCase()) >= 0\n      );\n\n    if (sort.type === \"name\") {\n      if (sort.direction === Direction.Up) {\n        setCurToysList(array.sort((t1, t2) => t1.name.localeCompare(t2.name)));\n      } else {\n        setCurToysList(array.sort((t1, t2) => t2.name.localeCompare(t1.name)));\n      }\n    }\n\n    if (sort.type === \"year\") {\n      if (sort.direction === Direction.Up) {\n        setCurToysList(array.sort((t1, t2) => t1.year - t2.year));\n      } else {\n        setCurToysList(array.sort((t1, t2) => t2.year - t1.year));\n      }\n    }\n    setIsFiltered(true);\n  }\n  //Handlers\n  function toggleFilter(type, value) {\n    const index = filters[type].indexOf(value);\n    if (index >= 0) {\n      let curFilters = { ...filters };\n      curFilters[type].splice(index, 1);\n      setFilters(curFilters);\n      setIsFiltered(false);\n    } else {\n      setFilters({ ...filters, [type]: [...filters[type], value] });\n      setIsFiltered(false);\n    }\n    setIsFiltered(false);\n  }\n\n  function toggleSpanFilter(type, min, max) {\n    setSpanFilters({\n      ...spanFilters,\n      [type]: { ...spanFilters[type], minVal: min, maxVal: max },\n    });\n    setIsFiltered(false);\n  }\n\n  function toggleFavorite(toy: Toy): void {\n    const index = favorites.indexOf(toy);\n\n    if (index >= 0) {\n      setFavorites([\n        ...favorites.slice(0, index),\n        ...favorites.slice(index + 1),\n      ]);\n      toy.isFavorite = false;\n    } else {\n      setFavorites([...favorites, toy]);\n      toy.isFavorite = true;\n    }\n\n    if (isOnlyFavorites) filterToys();\n  }\n\n  function handleSort(type: string, direction: Direction) {\n    setSort({ type, direction });\n    setIsFiltered(false);\n  }\n\n  function handleResetFilters() {\n    setFilters(JSON.parse(JSON.stringify(defaultFilters)));\n    setIsFiltered(false);\n    setSpanFilters(JSON.parse(JSON.stringify(defaultSpanFilters)));\n    setIsFiltered(false);\n  }\n  function handleSearch(searchString: string) {\n    setSearchStr(searchString);\n    setIsFiltered(false);\n  }\n\n  function handleFavoritesFilter() {\n    setIsOnlyFavorites(!isOnlyFavorites);\n    setIsFiltered(false);\n  }\n\n  function handleLS() {\n    localStorage.setItem(\n      \"komalapaChristmasFavorites\",\n      JSON.stringify(favorites)\n    );\n    localStorage.setItem(\n      \"komalapaChristmasSpanFilters\",\n      JSON.stringify(spanFilters)\n    );\n    localStorage.setItem(\"komalapaChristmasFilters\", JSON.stringify(filters));\n  }\n  if (!isFiltred) filterToys();\n  handleLS();\n  sendFavorites(favorites);\n  //render\n  return (\n    <div className=\"toys-app\">\n      <FiltersContainter\n        toggleFilter={toggleFilter}\n        toggleSpanFilter={toggleSpanFilter}\n        filters={filters}\n        spanFilters={spanFilters}\n        toggleOnlyFavorite={handleFavoritesFilter}\n        favoritesCount={favorites.length}\n        setupSort={handleSort}\n        reset={handleResetFilters}\n        setupSearch={handleSearch}\n        searchLine={searchStr}\n      />\n      <ToysContainter\n        toys={curToysList}\n        toggleFavorite={toggleFavorite}\n        favoritesCount={favorites.length}\n      />\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { Colors } from \"../../types/types\";\nimport \"./Lights.css\";\n\nfunction keyInEnum(e: any, value: string): string {\n  let keys = Object.keys(e).filter((x) => e[x] === value);\n  return keys.length > 0 ? keys[0] : \"\";\n}\n\ninterface LightsProps {\n  colors: Colors[] | null;\n}\nexport const Lights: FC<LightsProps> = (props) => {\n  const { colors } = props;\n  if (colors !== null) {\n    const getLamp = (i: number, length: number, color: Colors, key: string) => {\n      const angle = (i * 145) / length + 145;\n      return (\n        <span\n          key={key + i}\n          className={`lights__lamp lights__lamp-${keyInEnum(\n            Colors,\n            color\n          ).toLowerCase()}`}\n          style={{\n            transform: `rotate(${angle}deg)`,\n          }}\n        />\n      );\n    };\n\n    const getLine = (colors: Colors[], length, key) => {\n      const line = [];\n      for (let i = 0; i < length; i++) {\n        const lamp = getLamp(\n          i,\n          length,\n          colors[i % colors.length],\n          `${key}-lamp-`\n        );\n        line.push(lamp);\n      }\n      return line;\n    };\n    const topLineLength = 10;\n    const lineTop = getLine(colors, topLineLength, \"top\");\n\n    const topCenterLineLength = 15;\n    const lineTopCenter = getLine(colors, topCenterLineLength, \"top-center\");\n    const centerLineLength = 20;\n    const lineCenter = getLine(colors, centerLineLength, \"center\");\n    const downLineLength = 35;\n    const lineDown = getLine(colors, downLineLength, \"down\");\n\n    return (\n      <div className=\"lights\">\n        <div className=\"lights__top\">{lineTop}</div>\n        <div className=\"lights__top-center\">{lineTopCenter}</div>\n        <div className=\"lights__center\">{lineCenter}</div>\n        <div className=\"lights__down\">{lineDown}</div>\n      </div>\n    );\n  }\n  return <></>;\n};\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSnow(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 128,\n    height: 128,\n    viewBox: \"0 0 128 128\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"snow\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M61.873 8.408c-1.257 0.297-2.754 1.479-3.479 2.747-0.24 0.421-0.498 3.22-0.606 6.583l-0.188 5.851-1.097-1.28c-4.324-5.045-6.001-5.957-9.453-5.146-5.089 1.197-5.714 6.791-1.316 11.786 3.503 3.978 5.234 5.96 7.295 8.348 1.106 1.282 2.627 3.001 3.378 3.82l1.367 1.49 0.009 9.751-1.188-0.713c-1.749-1.049-5.237-2.941-8.041-4.362-2.471-1.252-3.571-2.308-3.571-3.429 0-0.331-0.306-1.405-0.679-2.387-1.018-2.676-1.922-5.309-2.246-6.54-2.307-8.774-4.516-11.886-8.434-11.886-4.556 0-7.424 4.499-5.644 8.855 0.353 0.862 0.765 2.062 0.918 2.665s0.403 1.406 0.558 1.783c0.22 0.536-0.349 0.344-2.609-0.879-7.756-4.199-7.458-4.082-9.897-3.902-3.62 0.267-5.611 2.332-5.611 5.82 0 3.377 1.108 4.45 8.96 8.675 2.902 1.562 3.161 1.852 1.652 1.852-4.691 0-8.813 2.411-9.327 5.456-0.974 5.766 2.682 8.468 9.525 7.042 2.1-0.438 5.588-1.139 7.75-1.559s5.395-1.078 7.184-1.464c1.969-0.424 3.413-0.571 3.657-0.373 0.222 0.18 0.98 0.642 1.684 1.027 5.020 2.742 7.68 4.295 7.68 4.486 0 0.271-4.588 2.938-5.054 2.938-0.183 0-0.784 0.355-1.336 0.79-1.223 0.962-2.425 0.952-7.128-0.061-1.918-0.413-5.050-1.065-6.962-1.449s-4.709-0.957-6.217-1.274c-3.498-0.734-4.122-0.719-5.775 0.136-5.867 3.035-3.995 10.951 2.815 11.901 4.483 0.625 4.841 0.833 3.051 1.764-0.553 0.288-2.323 1.23-3.931 2.092s-3.507 1.86-4.217 2.216c-6.174 3.095-5.203 11.342 1.407 11.941 2.287 0.207 2.936-0.007 7.199-2.379 1.408-0.783 3.514-1.947 4.68-2.584l2.12-1.16-0.257 1.373c-0.142 0.755-0.558 2.033-0.924 2.839-2.409 5.303 1.64 10.772 6.922 9.35 3.326-0.895 3.454-1.139 8.536-16.294 2.289-6.825 1.372-5.891 10.465-10.66l2.285-1.199v14.423l-2.060 2.374c-1.133 1.306-2.984 3.43-4.114 4.72s-2.383 2.721-2.786 3.18c-0.402 0.459-1.554 1.766-2.56 2.902-4.552 5.146-4.739 8.965-0.577 11.769 2.928 1.974 6.198 0.906 9.59-3.13l2.325-2.766 0.194 4.918c0.27 6.826 1.48 8.53 6.060 8.53 4.624 0 5.993-1.981 6.009-8.694l0.011-4.792 0.943 1.097c5.19 6.038 8.83 7.133 12.189 3.668 3.313-3.418 1.696-7.846-5.425-14.864-0.329-0.325-1.504-1.639-2.61-2.921s-2.711-3.091-3.566-4.019l-1.554-1.689v-7.185c0-3.952 0.091-7.185 0.203-7.185s1.058 0.473 2.103 1.050c1.045 0.577 3.382 1.833 5.192 2.789 6.050 3.197 5.118 1.837 8.773 12.797 3.617 10.847 4.248 11.95 7.12 12.435 6.022 1.017 9.061-3.409 6.776-9.872-0.498-1.408-0.906-2.758-0.906-3.001-0.001-0.389 6.569 2.774 7.478 3.6 0.574 0.522 4.182 0.356 5.347-0.246 2.643-1.367 4.123-5.494 2.856-7.965-0.47-0.918-2.538-3.176-2.907-3.176-0.136 0-1.694-0.808-3.462-1.795l-3.214-1.795 1.43-0.397c0.787-0.219 1.771-0.398 2.187-0.399 4.389-0.012 8.013-3.91 7.15-7.691-0.942-4.125-3.797-5.584-8.946-4.572-5.249 1.032-9.836 1.962-13.475 2.733-4.73 1.002-5.788 0.959-8.074-0.325-1.053-0.591-3.069-1.702-4.479-2.469-4.774-2.594-4.71-2.213-0.727-4.334 2.566-1.366 5.397-2.898 7.945-4.298 1.336-0.734 1.418-0.737 4.388-0.12 1.665 0.346 4.672 0.965 6.684 1.375s5.009 1.060 6.661 1.444c6.838 1.59 10.71-0.362 10.71-5.398 0-3.775-1.237-5.015-6.328-6.345l-3.586-0.937 3.061-1.718c4.357-2.446 5.391-3.723 5.391-6.658 0-6.601-8.586-7.954-14.793-2.331-0.832 0.754-0.769 0.128 0.271-2.702 1.482-4.035 1.665-6.391 0.639-8.218-2.413-4.294-9.031-4.16-10.894 0.221-0.698 1.641-4.067 11.168-4.477 12.66-0.415 1.512-2.453 7.157-2.614 7.244-0.072 0.039-0.512 0.283-0.976 0.544s-1.946 1.064-3.291 1.786c-1.346 0.721-3.187 1.724-4.092 2.229-2.639 1.47-4.853 2.643-4.992 2.643-0.282 0-0.108-9.822 0.177-9.935 0.168-0.067 2.178-2.261 4.467-4.876s5.443-6.21 7.009-7.989l2.847-3.234v-2.561c0-3.982-2.053-6.148-5.827-6.148-2.519 0-3.037 0.303-6.144 3.596l-2.645 2.804-0.006-5.896-0.006-5.896-1.371-1.533c-1.766-1.974-3.751-2.532-6.607-1.856z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSnow);\nexport default __webpack_public_path__ + \"static/media/snow.55926b8e.svg\";\nexport { ForwardRef as ReactComponent };","import { FC } from \"react\";\nimport { Colors } from \"../../types/types\";\nimport { Lights } from \"../Lights/Lights\";\nimport \"./MainTree.css\";\ninterface MainTreeProps {\n  treeUrl: string;\n  lights: Colors[];\n  onTakeToy: CallableFunction;\n}\nexport const MainTree: FC<MainTreeProps> = (props) => {\n  const { treeUrl, lights, onTakeToy } = props;\n\n  function handleDragStart(e) {\n    e.dataTransfer.setData(\"toyId\", e.target.id);\n    e.dataTransfer.setData(\"toySrc\", e.target.src);\n    e.dataTransfer.setData(\"id\", e.target.getAttribute(\"data-id\"));\n    onTakeToy(+e.target.getAttribute(\"data-id\"), false);\n  }\n\n  function handleOverDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type !== \"drop\") {\n      return;\n    }\n    const toyId = e.dataTransfer.getData(\"toyId\");\n    const toyImg = document.getElementById(toyId);\n    const toy = document.createElement(\"img\");\n    toy.className = toyImg.className;\n    toy.id = toyId + \"-\" + e.dataTransfer.getData(\"count\");\n    toy.src = e.dataTransfer.getData(\"toySrc\");\n    toy.style.position = \"absolute\";\n    toy.style.top = e.nativeEvent.layerY + \"px\";\n    toy.style.left = e.nativeEvent.layerX - 25 + \"px\";\n    toy.setAttribute(\"data-id\", e.dataTransfer.getData(\"id\"));\n    const parent = toyImg.parentNode as HTMLElement;\n    if (parent.className === \"toys-area\") toyImg.parentNode.removeChild(toyImg);\n    document.querySelector(\".toys-area\").appendChild(toy);\n    toy.ondragstart = handleDragStart;\n    if (e.dataTransfer.getData(\"id\"))\n      onTakeToy(+e.dataTransfer.getData(\"id\"), true);\n  }\n\n  return (\n    <div className=\"main-tree__wrp\">\n      <map name=\"map\" onDrop={handleOverDrop} onDragOver={handleOverDrop}>\n        <area\n          target=\"_self\"\n          alt=\"map\"\n          title=\"map\"\n          href=\"\"\n          coords=\"247,2,5,568,9,662,472,668,494,581\"\n          shape=\"poly\"\n          className=\"toys-area\"\n        />\n      </map>\n      <img className=\"main-tree\" src={treeUrl} alt=\"main tree\" useMap=\"#map\" />\n      <Lights colors={lights}></Lights>\n    </div>\n  );\n};\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgAudio(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 128,\n    height: 128,\n    viewBox: \"0 0 128 128\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"image2vector-1\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64 18.244c-0.474 0.285-1.581 1.148-2.462 1.918-1.944 1.7-5.731 4.975-10.831 9.366-2.099 1.807-4.48 3.865-5.292 4.574s-3.6 3.124-6.195 5.37l-4.718 4.082-28.262 0.139-0.891 0.611c-0.49 0.336-1.147 1.056-1.459 1.6l-0.567 0.989v35.446l0.616 1.1c0.376 0.671 1 1.317 1.6 1.658l0.984 0.557 27.429 0.008 0.932 0.8c0.512 0.44 0.987 0.856 1.055 0.924 0.13 0.132 6.748 5.84 7.989 6.891 0.4 0.338 1.231 1.065 1.846 1.615s2.725 2.376 4.688 4.060c1.963 1.683 3.625 3.117 3.693 3.186 0.13 0.132 1.69 1.484 6.521 5.653 4.016 3.466 5.63 3.967 7.875 2.447 2.023-1.37 1.85 2.983 1.85-46.481v-43.889l-0.551-0.98c-1.124-2-3.941-2.791-5.849-1.643zM102.625 18.777c-2.242 1.511-2.55 4.209-0.767 6.723 3.863 5.447 5.018 7.303 6.942 11.151 10.562 21.13 8.325 47.401-5.629 66.095-3.062 4.102-3.069 6.967-0.021 8.522 3.198 1.631 5.517-0.249 10.512-8.52 15.466-25.61 13.755-57.919-4.332-81.783-2.087-2.753-4.633-3.584-6.705-2.188zM91.454 30.1c-2.829 1.602-2.962 4.046-0.421 7.77 11.034 16.178 11.216 37.406 0.46 53.575-2.745 4.126-2.816 6.426-0.25 8.085 3.403 2.199 5.926 0.296 10.224-7.715 8.571-15.974 8.904-35.587 0.879-51.815-4.509-9.118-7.489-11.827-10.892-9.9zM79.272 42.289c-2.855 1.405-3.005 3.72-0.55 8.475 0.96 1.859 1.87 3.797 2.023 4.308 2.712 9.059 1.95 16.929-2.449 25.286-1.752 3.329-1.555 5.447 0.639 6.865 2.99 1.933 5.24 0.743 7.71-4.076 5.969-11.649 5.896-25.047-0.2-36.624-2.301-4.37-4.39-5.604-7.172-4.234z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAudio);\nexport default __webpack_public_path__ + \"static/media/audio.ceeeb5ee.svg\";\nexport { ForwardRef as ReactComponent };","import { FC } from \"react\";\nimport { Colors } from \"../../types/types\";\nimport { MainTree } from \"../MainTree/MainTree\";\n\nimport { ReactComponent as SnowIcon } from \"../../assets/svg/snow.svg\";\n\nimport \"./MainTreeContainer.css\";\ninterface MainTreeContainerProps {\n  backgroundUrl: string;\n  treeUrl: string;\n  lights: Colors[];\n  isSnow: boolean;\n  onTakeToy: CallableFunction;\n}\nexport const MainTreeContainer: FC<MainTreeContainerProps> = (props) => {\n  const { backgroundUrl, treeUrl, lights, isSnow, onTakeToy } = props;\n  const flakesCount = 30;\n  const snow = [];\n  for (let i = 0; i < flakesCount; i++) {\n    snow.push(\n      <SnowIcon\n        style={{\n          left: Math.random() * 100 + \"%\",\n          animationDelay: Math.random() * 5 + \"s\",\n        }}\n        className=\"snowflake\"\n      />\n    );\n  }\n  return (\n    <div\n      className=\"main-tree__container\"\n      style={{ backgroundImage: `url(${backgroundUrl}` }}\n    >\n      {isSnow && <div className=\"snowflakes-container\">{snow}</div>}\n      <MainTree\n        treeUrl={treeUrl}\n        lights={lights}\n        onTakeToy={onTakeToy}\n      ></MainTree>\n    </div>\n  );\n};\n","import { FC } from \"react\";\n// import { Direction } from \"../../types/types\";\nimport { RadioInput } from \"../RadioInput/RadioInput\";\n\nimport \"../../main.css\";\nimport \"./BackgroundSelector.css\";\n\ntype BackgroundSelectorProps = {\n  setupBackground: CallableFunction;\n  selected: number;\n};\n\nexport const BackgroundSelector: FC<BackgroundSelectorProps> = (props) => {\n  const { setupBackground, selected } = props;\n\n  function handleBackground(value) {\n    setupBackground(value);\n  }\n  return (\n    //TODO cycle for gen radio\n    <div className=\"background-selector\">\n      <h3 className=\"background-selector__header\">Фоны</h3>\n      <div className=\"background-selector__wrp\">\n        <RadioInput\n          radioName=\"background-selector\"\n          id=\"background-selector-1\"\n          className=\"background-selector\"\n          type=\"background-selector\"\n          value={1}\n          onChoose={() => handleBackground(1)}\n          selected={selected === 1}\n        >\n          <span\n            className=\"background-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/bg/1.jpg\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"background-selector\"\n          id=\"background-selector-2\"\n          className=\"background-selector\"\n          type=\"background-selector\"\n          value={2}\n          onChoose={() => handleBackground(2)}\n          selected={selected === 2}\n        >\n          <span\n            className=\"background-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/bg/2.jpg\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"background-selector\"\n          id=\"background-selector-3\"\n          className=\"background-selector\"\n          type=\"background-selector\"\n          value={3}\n          onChoose={() => handleBackground(3)}\n          selected={selected === 3}\n        >\n          <span\n            className=\"background-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/bg/3.jpg\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"background-selector\"\n          id=\"background-selector-4\"\n          className=\"background-selector\"\n          type=\"background-selector\"\n          value={4}\n          onChoose={() => handleBackground(4)}\n          selected={selected === 4}\n        >\n          <span\n            className=\"background-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/bg/4.jpg\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"background-selector\"\n          id=\"background-selector-5\"\n          className=\"background-selector\"\n          type=\"background-selector\"\n          value={5}\n          onChoose={() => handleBackground(5)}\n          selected={selected === 5}\n        >\n          <span\n            className=\"background-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/bg/5.jpg\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"background-selector\"\n          id=\"background-selector-6\"\n          className=\"background-selector\"\n          type=\"background-selector\"\n          value={6}\n          onChoose={() => handleBackground(6)}\n          selected={selected === 6}\n        >\n          <span\n            className=\"background-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/bg/6.jpg\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"background-selector\"\n          id=\"background-selector-7\"\n          className=\"background-selector\"\n          type=\"background-selector\"\n          value={7}\n          onChoose={() => handleBackground(7)}\n          selected={selected === 7}\n        >\n          <span\n            className=\"background-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/bg/7.jpg\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"background-selector\"\n          id=\"background-selector-8\"\n          className=\"background-selector\"\n          type=\"background-selector\"\n          value={8}\n          onChoose={() => handleBackground(8)}\n          selected={selected === 8}\n        >\n          <span\n            className=\"background-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/bg/8.jpg\" }}\n          ></span>\n        </RadioInput>\n      </div>\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { RadioInput } from \"../RadioInput/RadioInput\";\n\nimport \"../../main.css\";\nimport \"./TreeSelector.css\";\n\ntype TreeSelectorProps = {\n  setupTree: CallableFunction;\n  selected: number;\n};\n\nexport const TreeSelector: FC<TreeSelectorProps> = (props) => {\n  const { setupTree, selected } = props;\n\n  function handleTree(value) {\n    setupTree(value);\n  }\n  return (\n    <div className=\"tree-selector\">\n      <h3 className=\"tree-selector__header\">Ёлочки</h3>\n      <div className=\"tree-selector__wrp\">\n        <RadioInput\n          radioName=\"tree-selector\"\n          id=\"tree-selector-1\"\n          className=\"tree-selector\"\n          type=\"tree-selector\"\n          value={1}\n          onChoose={() => handleTree(1)}\n          selected={selected === 1}\n        >\n          <span\n            className=\"tree-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/tree/1.png\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"tree-selector\"\n          id=\"tree-selector-2\"\n          className=\"tree-selector\"\n          type=\"tree-selector\"\n          value={2}\n          onChoose={() => handleTree(2)}\n          selected={selected === 2}\n        >\n          <span\n            className=\"tree-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/tree/2.png\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"tree-selector\"\n          id=\"tree-selector-3\"\n          className=\"tree-selector\"\n          type=\"tree-selector\"\n          value={3}\n          onChoose={() => handleTree(3)}\n          selected={selected === 3}\n        >\n          <span\n            className=\"tree-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/tree/3.png\" }}\n          ></span>\n        </RadioInput>\n        <RadioInput\n          radioName=\"tree-selector\"\n          id=\"tree-selector-4\"\n          className=\"tree-selector\"\n          type=\"tree-selector\"\n          value={4}\n          onChoose={() => handleTree(4)}\n          selected={selected === 4}\n        >\n          <span\n            className=\"tree-selector__miniature\"\n            style={{ backgroundImage: \"url(../../assets/tree/4.png\" }}\n          ></span>\n        </RadioInput>\n      </div>\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { Colors } from \"../../types/types\";\nimport { BackgroundSelector } from \"../BackgroundSelector/BackgroundSelector\";\nimport { ColorFilter } from \"../ColorFilter/ColorFilter\";\nimport { TreeSelector } from \"../TreeSelector/TreeSelector\";\nimport \"./TreePanel.css\";\ninterface TreePanelProps {\n  setBackground: CallableFunction;\n  setTree: CallableFunction;\n  backgroundNumber: number;\n  treeNumber: number;\n  setLights: CallableFunction;\n  lights: Colors[];\n}\nexport const TreePanel: FC<TreePanelProps> = (props) => {\n  const {\n    setBackground,\n    setTree,\n    backgroundNumber,\n    treeNumber,\n    setLights,\n    lights,\n  } = props;\n\n  function handleBackground(value) {\n    setBackground(value);\n  }\n\n  function handleTree(value) {\n    setTree(value);\n  }\n  function handleLights(_, value) {\n    setLights(value);\n  }\n  return (\n    <div className=\"tree-panel\">\n      <BackgroundSelector\n        setupBackground={handleBackground}\n        selected={backgroundNumber}\n      ></BackgroundSelector>\n      <TreeSelector setupTree={handleTree} selected={treeNumber}></TreeSelector>\n      <ColorFilter\n        toggleFilter={handleLights}\n        checked={lights}\n        header={\"Гирлянда\"}\n      ></ColorFilter>\n    </div>\n  );\n};\n","import { FC, useState } from \"react\";\nimport { Toy } from \"../../types/toys/toy\";\n\nimport \"./SmallToyCard.css\";\nimport \"../../main.css\";\n\ntype SmallToyCardProps = {\n  toy: Toy;\n  onTake: CallableFunction;\n};\n\nexport const SmallToyCard: FC<SmallToyCardProps> = (props) => {\n  const { toy } = props;\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const path: string = `/assets/toys/${toy.id}.png`;\n  const image: HTMLImageElement = new Image();\n  image.src = path;\n  image.onload = () => setIsLoaded(true);\n\n  const toyImg = (\n    <img\n      className={`small-toy-card__image ${\n        toy.count === 0 ? \"small-toy-card__image-empty\" : \"\"\n      }`}\n      id={`toy-${toy.id}`}\n      alt=\"игрушка\"\n      src={image.src}\n      onDragStart={handleDragStart}\n      data-id={toy.id}\n    />\n  );\n\n  function handleDragStart(e) {\n    if (toy.count <= 0) {\n      e.preventDefault();\n      return;\n    }\n    e.dataTransfer.setData(\"id\", `${toy.id}`);\n    e.dataTransfer.setData(\"toyId\", `toy-${toy.id}`);\n    e.dataTransfer.setData(\"toySrc\", e.target.src);\n    e.dataTransfer.setData(\"count\", toy.count);\n  }\n\n  return (\n    <div className=\"small-toy-card\">\n      {isLoaded ? toyImg : <div className=\"small-toy-card__image\" />}\n      <span className=\"small-toy-card__count\">{toy.count}</span>\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { Toy } from \"../../types/toys/toy\";\nimport { SmallToyCard } from \"../SmallToyCard/SmallToyCard\";\n\nimport \"./SmallToysContainer.css\";\n\ntype SmallToysContainerProps = {\n  toys: Toy[];\n  onTakeToy: CallableFunction;\n};\n\nexport const SmallToysContainer: FC<SmallToysContainerProps> = (props) => {\n  const { toys, onTakeToy } = props;\n\n  const cards = toys.map((toy, id) => (\n    <SmallToyCard key={id} toy={toy} onTake={onTakeToy} />\n  ));\n  return <div className=\"small-toys-container\">{cards}</div>;\n};\n","import { FC } from \"react\";\nimport { Toy } from \"../../types/toys/toy\";\nimport { SmallToysContainer } from \"../SmallToysContainer/SmallToysContainer\";\n\nimport { ReactComponent as SnowIcon } from \"../../assets/svg/snow.svg\";\nimport { ReactComponent as MusicIcon } from \"../../assets/svg/audio.svg\";\n\nimport \"./ToysPanel.css\";\n\ninterface ToysPanelProps {\n  toys: Toy[];\n  onTakeToy: CallableFunction;\n  isSnow: boolean;\n  toggleSnow: CallableFunction;\n  isMusic: boolean;\n  toggleMusic: CallableFunction;\n}\nexport const ToysPanel: FC<ToysPanelProps> = (props) => {\n  const { toys, onTakeToy, isSnow, toggleSnow, isMusic, toggleMusic } = props;\n  function handleClear() {\n    localStorage.clear();\n  }\n  return (\n    <div className=\"toys-panel\">\n      <SnowIcon\n        onClick={() => toggleSnow()}\n        className={`snow-button ${\n          isSnow ? \"snow-button__on\" : \"snow-button__off\"\n        }`}\n      />\n      <MusicIcon\n        onClick={() => toggleMusic()}\n        className={`music-button ${\n          isMusic ? \"music-button__on\" : \"music-button__off\"\n        }`}\n      />\n      <SmallToysContainer\n        toys={toys}\n        onTakeToy={onTakeToy}\n      ></SmallToysContainer>\n      <span className=\"ls__clear\" onClick={handleClear}>\n        Удалить сохраненные настройки\n      </span>\n    </div>\n  );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { Toy } from \"../../types/toys/toy\";\nimport { Colors } from \"../../types/types\";\nimport { MainTreeContainer } from \"../MainTreeContainer/MainTreeContainer\";\nimport { TreePanel } from \"../TreePanel/TreePannel\";\n\nimport { data } from \"../../data\";\n\nimport \"./TreeApp.css\";\nimport { useToggle } from \"../shared/hooks/useToggle\";\nimport { ToysPanel } from \"../ToysPanel/ToysPanel\";\n\ninterface TreeAppProps {\n  favorites: Toy[];\n}\nfunction keyInEnum(e: any, value: string): string {\n  let keys = Object.keys(e).filter((x) => e[x] === value);\n  return keys.length > 0 ? keys[0] : \"\";\n}\nfunction getColorsFromLS(): Colors[] | false {\n  const colorsLS = JSON.parse(\n    localStorage.getItem(\"komalapa-christmas-lights\")\n  );\n  if (!colorsLS) return false;\n  return colorsLS.map((color) => Colors[keyInEnum(Colors, color)]);\n}\nconst TreeApp: FC<TreeAppProps> = (props) => {\n  const { favorites } = props;\n\n  if (favorites.length === 0) {\n    for (let i = 0; i < 20; i++) {\n      const toy = new Toy(data[i]);\n      favorites.push(toy);\n    }\n  }\n  const [toys, setToys] = useState<Toy[]>([]);\n  const [isSnow, setIsSnow] = useToggle(\n    JSON.parse(localStorage.getItem(\"komalapa-christmas-snow\"))\n  );\n  const [isMusic, setIsMusic] = useToggle(\n    JSON.parse(localStorage.getItem(\"komalapa-christmas-music\"))\n  );\n  useEffect(() => {\n    setToys(favorites);\n  }, [favorites]);\n\n  const [backgroundNumber, setBackgoundNumber] = useState<number>(\n    +localStorage.getItem(\"komalapa-christmas-background\") || 1\n  );\n  const [treeNumber, setTreeNumber] = useState<number>(\n    +localStorage.getItem(\"komalapa-christmas-tree\") || 1\n  );\n  const [lights, setLights] = useState<Colors[]>(\n    getColorsFromLS() || [Colors.White, Colors.Red, Colors.Blue]\n  );\n\n  const getBackgroundUrl = (number: number): string =>\n    `../../assets/bg/${number}.jpg`;\n  const getTreeUrl = (number: number): string =>\n    `../../assets/tree/${number}.png`;\n  //handler\n  function handleBackground(number) {\n    setBackgoundNumber(number);\n  }\n  function handleTree(number) {\n    setTreeNumber(number);\n  }\n\n  function handleLights(value: Colors) {\n    const index = lights.indexOf(value);\n    if (index >= 0) {\n      let curLights = [...lights];\n      curLights.splice(index, 1);\n      setLights(curLights);\n    } else {\n      setLights([...lights, value]);\n    }\n  }\n\n  function handleTakeById(id, success = true) {\n    const index = toys.indexOf(toys.find((toy) => toy.id === id));\n    const curToys = [...toys];\n    success ? curToys[index].count-- : curToys[index].count++;\n    setToys(curToys);\n  }\n\n  function handleLS() {\n    localStorage.setItem(\"komalapa-christmas-snow\", isSnow);\n    localStorage.setItem(\"komalapa-christmas-music\", isMusic);\n    localStorage.setItem(\"komalapa-christmas-lights\", JSON.stringify(lights));\n    localStorage.setItem(\n      \"komalapa-christmas-background\",\n      backgroundNumber.toFixed(0)\n    );\n    localStorage.setItem(\"komalapa-christmas-tree\", treeNumber.toFixed(0));\n  }\n  handleLS();\n  const audio = document.querySelector(\".audio\") as HTMLAudioElement;\n  if (isMusic && audio) audio.play();\n\n  function handleOverDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type !== \"drop\") {\n      return;\n    }\n    const toyId = e.dataTransfer.getData(\"toyId\");\n    const toyImg = document.getElementById(toyId);\n    const parent = toyImg.parentNode as HTMLElement;\n    if (parent.className === \"toys-area\") toyImg.parentNode.removeChild(toyImg);\n  }\n\n  return (\n    <div\n      className=\"tree-app\"\n      onDragOver={handleOverDrop}\n      onDrop={handleOverDrop}\n    >\n      <TreePanel\n        setBackground={handleBackground}\n        setTree={handleTree}\n        treeNumber={treeNumber}\n        backgroundNumber={backgroundNumber}\n        setLights={handleLights}\n        lights={lights}\n      />\n      <MainTreeContainer\n        backgroundUrl={getBackgroundUrl(backgroundNumber)}\n        treeUrl={getTreeUrl(treeNumber)}\n        lights={lights}\n        isSnow={isSnow}\n        onTakeToy={handleTakeById}\n      />\n      {/* <SmallToysContainer toys={favorites} onTakeToy={handleTake} /> */}\n      <ToysPanel\n        toys={favorites}\n        onTakeToy={handleTakeById}\n        isSnow={isSnow}\n        toggleSnow={setIsSnow}\n        isMusic={isMusic}\n        toggleMusic={setIsMusic}\n      />\n      <audio\n        className=\"audio\"\n        src=\"assets/audio/audio.mp3\"\n        muted={!isMusic}\n        autoPlay={true}\n      ></audio>\n    </div>\n  );\n};\nexport default TreeApp;\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgRss(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 242,\n    height: 90,\n    viewBox: \"0 0 242 90\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"rss\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#fff\",\n    d: \"M137.197 3.257c-6.927 1.609-10.367 5.259-10.401 11.036-0.039 6.727 3.729 9.816 15.812 12.966 5.873 1.53 7.869 4.182 5.091 6.758-3.153 2.922-9.323 1.027-10.1-3.105-0.385-2.062-0.366-2.056-6.837-1.696l-5.735 0.318 0.276 1.806c0.425 2.784 2.722 7.082 4.68 8.758 5.802 4.964 21.78 4.455 27.25-0.872l1.6-1.558 0.307 1.811c1.125 6.663 7.892 12.923 15.677 14.504l2.5 0.509-1.477 1.935c-4.874 6.384-5.012 19.44-0.276 26.221 7.248 10.375 27.644 10.074 34.355-0.506l1.249-1.969v9.391h31.61v-10.097h-18.878v-29.416h-12.732l-0.025 4.5c-0.022 3.676-0.121 4.343-0.548 3.642-2.419-3.968-7.13-7.265-11.748-8.218l-2.489-0.515 2.526-1.898c7.858-5.906 12.752-16.681 11.495-25.307-3.305-22.669-35.958-23.020-48.395-0.523-0.802 1.448-1.485 2.68-1.519 2.737s-1.153-0.956-2.489-2.247c-2.77-2.683-4.995-3.665-12.558-5.538-7.037-1.744-8.477-2.967-6.112-5.192 2.25-2.115 7.149-0.745 8.252 2.309 0.647 1.789 0.529 1.772 8.010 1.277l4.326-0.287-0.276-1.724c-1.277-7.987-11.329-12.386-22.424-9.807zM2.635 23.268v19.755h12.732v-15.806h1.294c2.042 0 3.277 1.502 7.214 8.781l3.682 6.803 7.079 0.121c3.893 0.067 7.076 0.003 7.076-0.141 0-2.225-7.934-15.064-10.136-16.402l-1.207-0.734 2.436-1.274c9.031-4.728 7.321-18.273-2.576-20.396-1.249-0.267-7.574-0.467-14.884-0.467h-12.71v19.755zM195.401 6.952c19.87 5.186 18.051 33.064-2.824 43.242-21.268 10.37-40.222-6.654-30.113-27.045 5.898-11.897 20.984-19.316 32.934-16.194zM24.14 12.417c4.472 2.261 1.505 6.435-4.829 6.795l-3.943 0.225v-7.585l3.842 0.006c2.199 0.003 4.306 0.242 4.93 0.557zM188.373 15.91c-3.496 0.928-7.051 4.461-7.054 7.009-0.006 4.163 3.322 5.664 8.558 3.862 3.203-1.102 4.019-1.102 4.612 0.003 1.004 1.879-2.287 3.794-4.207 2.447-0.965-0.675-4.523 1.454-4.559 2.728-0.056 1.918 4.798 2.644 7.771 1.162 9.442-4.705 6.761-14.805-3.032-11.427-3.915 1.35-4.756 1.409-4.756 0.323 0-1.704 2.663-2.936 3.825-1.775 0.475 0.475 4.075-1.912 4.075-2.703 0-1.181-3.189-2.177-5.237-1.631zM174.201 25.383c-2.095 1.516-2.194 1.122 1.648 6.576 2.365 3.355 3.274 5.012 3.184 5.797-0.157 1.342-1.662 1.699-2.72 0.644-0.672-0.672-0.847-0.619-2.438 0.745-4.019 3.443 2.090 6.398 6.629 3.209 4.987-3.504 4.995-5.678 0.037-12.918-3.845-5.617-4.022-5.729-6.342-4.050zM13.044 49.621c-7.183 1.133-11.388 5.333-11.444 11.43-0.056 6.221 3.977 9.765 13.967 12.265 6.123 1.533 8.139 2.703 8.139 4.719 0 5.678-10.164 5.11-11.239-0.627-0.377-2.002-0.329-1.991-6.812-1.64l-5.749 0.312 0.287 1.8c1.311 8.252 6.109 11.686 16.799 12.021 8.477 0.264 11.391-0.557 15.092-4.258l2.534-2.534 0.931 1.257c5.386 7.284 23.58 7.774 29.554 0.793 1.747-2.039 3.707-5.881 3.907-7.65 0.141-1.246 0.101-1.268-5.223-2.883l-5.363-1.628-0.72 2.166c-2.453 7.383-11.714 7.467-13.748 0.127-0.692-2.495-0.608-8.454 0.157-11.022 1.845-6.207 9.638-7.481 12.8-2.090 1.319 2.25 0.965 2.208 6.95 0.855 5.698-1.288 5.453-1.060 4.154-3.859-5.153-11.087-22.475-13.688-31.66-4.759l-2.562 2.492-1.063-1.814c-2.649-4.523-11.005-6.846-19.682-5.473zM134.342 49.632c-4.863 0.844-9.667 3.904-12.381 7.883-0.726 1.066-0.745 0.979-0.768-3.187l-0.023-4.281h-12.732v13.61h-12.732v-13.61h-12.732v39.513h12.732v-15.806h12.732v15.806h12.732v-8.933l1.375 2.073c5.721 8.634 23.414 10.15 31.466 2.694 9.318-8.626 7.49-28.249-3.136-33.671-4.101-2.093-11.298-3.004-16.535-2.095zM20.183 57.727c0.734 0.38 1.595 1.409 2.062 2.467l0.802 1.817 8.578-0.413-0.281 2.239c-0.371 2.962-0.537 3.074-2.998 1.986-1.159-0.512-4.402-1.505-7.211-2.211-6.646-1.665-7.473-2.022-7.813-3.375-0.63-2.503 3.766-4.112 6.865-2.509zM141.871 59.279c6.502 1.806 7.819 16.729 1.789 20.278-4.503 2.649-10.201 0.394-11.537-4.57-2.655-9.863 2.264-17.786 9.748-15.708zM194.951 59.268c7.554 2.098 7.4 19.074-0.191 21.119-6.103 1.642-10.164-2.599-10.133-10.581 0.034-8.294 3.963-12.305 10.325-10.536z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRss);\nexport default __webpack_public_path__ + \"static/media/rss.2418248d.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as RSLogo } from \"../../assets/svg/rss.svg\";\n\nimport \"./Footer.css\";\n\nexport function Footer() {\n  return (\n    <footer>\n      <a\n        className=\"course-link\"\n        href=\"https://rs.school/js/\"\n        rel=\"noreferrer\"\n        target=\"_blank\"\n        title=\"Курс «JavaScript/Front-end»\"\n      >\n        <RSLogo />\n      </a>\n      <a\n        className=\"github-link\"\n        href=\"https://github.com/komalapa\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        github: komalapa\n      </a>\n      <span>2021</span>\n    </footer>\n  );\n}\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgTree(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 98,\n    height: 128,\n    viewBox: \"0 0 98 128\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"tree\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.98 3.873c-0.649 0.673-5.252 6.277-10.228 12.453s-11.68 14.49-14.896 18.476c-3.216 3.986-5.848 7.42-5.848 7.63 0 0.212 14.772 0.382 33.151 0.382 30.079 0 33.126-0.065 32.882-0.7-0.148-0.385-3.139-4.208-6.648-8.496s-9.070-11.14-12.358-15.227l-5.978-7.43v5.529c0 5.43 0.276 6.654 2.045 9.053 0.066 0.090 1.058 0.339 2.204 0.553 3.969 0.742 4.637 2.432 2.079 5.264-1.563 1.73-2.118 4.316-1.234 5.747 1.091 1.766-2.030 3.34-4.375 2.205-2.196-1.063-3.177-1.115-4.692-0.249-3.155 1.804-5.112 0.489-4.685-3.147 0.286-2.43 0.261-2.503-1.485-4.397-2.508-2.721-2.067-4.651 1.193-5.228 2.918-0.517 3.208-0.713 4.323-2.915 1.032-2.038 1.095-2.568 1.095-9.396v-7.237l-1.361-1.713c-2.255-2.837-3.333-3.077-5.183-1.156zM53.277 27.177c-0.436 0.588-1.429 1.393-2.207 1.789-1.903 0.967-1.882 0.927-1.007 1.894 0.424 0.468 0.872 1.611 0.997 2.541l0.227 1.689h5.872l0.084-1.511c0.046-0.831 0.489-2.059 0.983-2.728l0.899-1.216-1.528-0.504c-0.84-0.277-1.978-1.071-2.528-1.764l-1-1.259-0.792 1.070zM20.916 55.005c-3.857 4.763-8.154 10.044-9.55 11.737-3.369 4.084-3.653 3.879 5.381 3.879h7.919l-0.587-1.132c-1.241-2.391 0.142-3.923 4.119-4.564 2.754-0.444 4.907-1.426 4.907-2.24 0-0.226 0.596-1.422 1.324-2.657 1.288-2.184 1.324-2.404 1.324-7.964v-5.719h-7.824l-7.012 8.66zM39.283 51.788v5.444l1.832 3.372c1.978 3.64 2.382 3.912 6.673 4.492 3.291 0.445 4.349 2.018 3.2 4.752-0.306 0.729 0.722 0.772 18.076 0.772 13.193 0 18.356-0.138 18.239-0.486-0.089-0.267-4.409-5.729-9.6-12.138l-9.438-11.652h-28.984v5.444zM36.706 63.308c-0.961 2.657-4.631 5.094-7.685 5.103-1.14 0.004-0.953 0.537 0.781 2.218 1.871 1.813 2.553 4.063 2.152 7.090l-0.299 2.252 1.938-0.997c2.584-1.33 5.378-1.35 7.839-0.057 2.312 1.215 2.276 1.237 1.838-1.155-0.583-3.179 0.013-4.882 2.748-7.853l1.265-1.374-2.179-0.289c-2.791-0.37-5.369-2.216-6.453-4.619-1.004-2.226-1.242-2.265-1.946-0.319zM15.669 79.737c-2.427 3.043-6.35 7.945-8.717 10.892s-4.303 5.511-4.303 5.696c0 0.185 20.458 0.337 45.462 0.337s45.462-0.161 45.462-0.359c0-0.197-3.982-5.262-8.849-11.255l-8.849-10.897h-14.492c-16.645 0-15.169-0.484-14.44 4.732 0.72 5.153-1.238 6.271-6.335 3.618-2.849-1.483-3.172-1.468-6.716 0.313-4.617 2.32-6.551 0.885-5.705-4.234 0.729-4.413 0.709-4.434-4.067-4.403l-4.035 0.026-4.414 5.533zM43.697 111.711c0 14.076 0.139 14.498 4.779 14.517 1.040 0.004 1.845-0.371 2.759-1.284l1.29-1.29v-23.461h-8.828v11.518z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTree);\nexport default __webpack_public_path__ + \"static/media/tree.64319e34.svg\";\nexport { ForwardRef as ReactComponent };","import { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Footer } from \"../Footer/Footer\";\nimport \"./Home.css\";\nexport const Home: FC = () => (\n  <div className=\"home\">\n    <h1 className=\"home__title\">Бабушкины ёлочные игрушки</h1>\n    <Link to=\"/toys\" className=\"home__button\">\n      Начать игру!\n    </Link>\n    <Footer />\n  </div>\n);\n","import { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ReactComponent as TreeIcon } from \"../../assets/svg/tree.svg\";\nimport \"./Nav.css\";\n\nexport const Nav: FC = () => (\n  <nav>\n    <ul className=\"nav\">\n      <li>\n        <Link className=\"nav__link nav__home\" to=\"/\">\n          <TreeIcon className=\"nav__icon\" />\n        </Link>\n      </li>\n      <li>\n        <Link className=\"nav__link\" to=\"/toys\">\n          Игрушки\n        </Link>\n      </li>\n      <li>\n        <Link className=\"nav__link\" to=\"/tree\">\n          Ёлка\n        </Link>\n      </li>\n    </ul>\n  </nav>\n);\n","import React, { useState } from \"react\";\nimport { FC } from \"react\";\nimport { ToysApp } from \"./components/ToysApp/ToysApp\";\nimport TreeApp from \"./components/TreeApp/TreeApp\";\nimport { Toy } from \"./types/toys/toy\";\nimport \"./main.css\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Home } from \"./components/Home/Home\";\nimport \"./App.css\";\nimport { Nav } from \"./components/Nav/Nav\";\nconst App: FC = () => {\n  const [favorites, setFavorites] = useState<Toy[]>([]);\n  function handleFavorites(favs: Toy[]) {\n    setFavorites(favs);\n  }\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Routes>\n          <Route\n            path=\"/toys\"\n            element={\n              <ToysApp favorites={favorites} sendFavorites={handleFavorites} />\n            }\n          />\n          <Route path=\"/tree\" element={<TreeApp favorites={favorites} />} />\n          <Route path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { addLog } from \"./log\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\naddLog();\n","export const addLog = () => {\n  console.log(`\n  205/200\n  1. Вёрстка страниц приложения и навигация между ними +30\n   - стартовая страница содержит название приложения и кнопку \"Начать игру\" или аналогичную. Выполняются требования к вёрстке +10\n   - на странице с ёлкой есть меню с настройками, слоты с добавленными в избранное игрушками, ёлка. Выполняются  требования к верстке +10\n   Футер включен только на главнойй странице чтобы не мешать игре\n   - в header приложения есть навигация, которая позволяет с каждой страницы приложения перейти на две другие страницы +10    \n2. Меню с настройками +50  \n   У пользователя есть возможность:\n   - выбрать один из 8 фонов +10\n   - выбрать одну из 4 ёлок +10\n   - включить/отключить падающий снег +10\n   - включить/отключить новогоднюю музыку +10\n   - выбранные настройки сохраняются в local storage и отображаются при перезагрузке страницы. Если музыка сохранилась включённой, она начинает играть при первом клике. Есть кнопка сброса настроек, которая очищает local storage +10\n3. Гирлянда +40  \n   Гирлянда реализуется средствами css без использования изображений   \n   Гирлянда на ёлку добавляется динамически средствами JavaScript (на кросс-чеке этот пункт не проверяется)  \n   У пользователя есть возможность:\n   - добавить на ёлку мерцающую разноцветную гирлянду +20  \n   - выбрать один из нескольких (минимум 4) цветов лампочек гирлянды или оставить её разноцветной +10\n   - внешний вид гирлянды соответствует предложенному образцу или является его улучшенной версией +10\n   Гирлянда состоит из включеных лампочек, если выключить все - отключается\n4. Игрушки в избранном +80\n   - в слотах находятся игрушки, которые были добавлены в избранное на странице с игрушками +10\n   - если в избранное не была добавлена ни одна игрушка, в слотах отображаются первые 20 игрушек коллекции исходных данных +10\n   - игрушки  из слотов с игрушками можно перетянуть на ёлку используя drag and drop +10\n   - если в процессе перетягивания игрушку отпускают за пределами ёлки, она возвращается в свой слот (без анимации) +10\n   - повешенные на ёлку игрушки можно перетягивать в пределах ёлки +10\n   - повешенные на ёлку игрушки можно снимать с ёлки, при этом они возвращаются в свой слот +10\n   - возле слота с каждой игрушкой указывается количество игрушек в слоте равное количеству экземпляров игрушки в массиве с исходными данными +10\n   - когда игрушку \"вешают на ёлку\" количество игрушек в слоте уменьшается, когда игрушку \"снимают с ёлки\", количество игрушек в слоте увеличивается, когда все экземпляры игрушки помещаются на ёлку, отображается пустой слот +10\n5. Дополнительный функционал на выбор +5  \n   Гирлянда в любых комбинациях из доступных цветов\n  `);\n};\n"],"sourceRoot":""}